<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bitisle</title>
  
  
  <link href="https://blog.bitisle.net/atom.xml" rel="self"/>
  
  <link href="https://blog.bitisle.net/"/>
  <updated>2021-08-08T03:52:24.000Z</updated>
  <id>https://blog.bitisle.net/</id>
  
  <author>
    <name>Weida Hong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>單台機器的 Ceph 部屬</title>
    <link href="https://blog.bitisle.net/2021/08/08/single-node-ceph-cluster.html"/>
    <id>https://blog.bitisle.net/2021/08/08/single-node-ceph-cluster.html</id>
    <published>2021-08-08T03:52:24.000Z</published>
    <updated>2021-08-08T03:52:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原由"><a href="#原由" class="headerlink" title="原由"></a>原由</h2><p>Ceph 的預設設定對資料的 replica 行為要求嚴格。若只有單台機器或是硬碟數量受限，往往架設起來的 Ceph 無法順利存放資料。</p><p>此篇筆記關注的目標如下</p><blockquote><p>若想要用最少資源，建立可用的 Ceph 環境，需要做哪些額外的調整？</p></blockquote><h2 id="背景知識"><a href="#背景知識" class="headerlink" title="背景知識"></a>背景知識</h2><p>Ceph 是一套開源的儲存叢集 solution。 可以整合多個儲存設備並在其上提供RADOSGW, RBD, Ceph FS 等不同層級的存取介面。</p><p><img src="https://docs.ceph.com/en/latest/_images/stack.png" alt="ceph-stack"></p><p>對於每個儲存設備 (HDD, SSD)，Ceph 會建立對應的 OSD 來管理儲存設備。有了儲存設備之後，Ceph 會建立邏輯上的 pool 作為管理空間的單位。Pool 底下會有多個 PG(placement group) 作為實際存放資料至 OSD 中的區塊。</p><p>在 Ceph 的預設設定中，一般 pool 的 replica 行為如下</p><ul><li>要有三份 replica</li><li>replica 要分散在不同的 host 上</li></ul><p>在開發環境中，資料掉了其實並無傷大雅，三份 replica 意味著儲存空間的浪費。且若資料真的要放在不同的 host 上，連同 replica 三份這點，我們就至少要開三台機器，增加無謂的管理成本。</p><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>假設我們都是透過 <code>cephadm bootstrap</code> 來架設 Ceph。</p><p>Ceph cluster 建立好，也設定完需要的 OSD 之後，就可以來建立 pool。</p><p>根據 pool 的目的不同，要解決單台機器部屬 Ceph 的限制，大概會有兩種做法。</p><h3 id="降低-Pool-Size"><a href="#降低-Pool-Size" class="headerlink" title="降低 Pool Size"></a>降低 Pool Size</h3><p>Pool size 此術語意味著該 pool 下的 PG 要 replica 幾份。若某 pool 是拿供他人存放資料，或是會使用較多空間的，可以把 size 降為 1。</p><p>調整完之後就相當於該 pool 內的所有資料都不會有 replica。</p><p>範例如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create &quot;&lt;pool name&gt;&quot;</span><br><span class="line">ceph osd pool set &quot;&lt;pool name&gt;&quot; size 1</span><br><span class="line">ceph osd pool application enable &quot;&lt;pool name&gt;&quot; rbd</span><br></pre></td></tr></table></figure><h3 id="調整-Choose-Leaf-行為"><a href="#調整-Choose-Leaf-行為" class="headerlink" title="調整 Choose Leaf 行為"></a>調整 Choose Leaf 行為</h3><p>Ceph 有定義不同層級的資料分散設定。預設值為 <code>host</code>，意味著只有一台機器的情況下，資料會無法複製。若調整為 <code>osd</code>，只要該機器上有多顆硬碟即可滿足複製條件。若是針對 Ceph 自行建立出來，管理 meta data 的 pool (e.g. <code>device_health_metrics</code>)可以考慮使用此方式處理。</p><p>設定方式大概有兩種。</p><p><strong>方法一</strong>: 調整 Ceph global 設定</p><p>編輯 <code>/etc/ceph.conf</code> 並在 global section 下加入 <code>osd_crush_chooseleaf_type</code> 設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">...</span><br><span class="line">    osd_crush_chooseleaf_type = 0</span><br></pre></td></tr></table></figure><p>或是直接執行 command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set global osd_crush_chooseleaf_type 0</span><br></pre></td></tr></table></figure><p>這邊的 <code>0</code> 代表 OSD。預設的對應列表如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type 0 osd</span><br><span class="line">type 1 host</span><br><span class="line">...</span><br><span class="line">type 9 zone</span><br><span class="line">type 10 region</span><br><span class="line">type 11 root</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>: 修改 crush map 內容</p><p>筆者有注意到有時即使有執行方法一，pool 還是不會受到設定影響。 (相關知識還太少，不太確定具體原因) 不過針對此狀況，還有第二個方法可以使用。</p><p>此方法會用到 <code>crushtool</code> 指令 (Ubuntu 中需要額外安裝 <code>ceph-base</code> 套件)</p><p>首先執行指令將目前的 crush map 撈出來</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph osd getcrushmap -o &quot;compiled-crush-map&quot;</span><br><span class="line">crushtool -d &quot;compiled-crush-map&quot; -o &quot;crush-map&quot;</span><br></pre></td></tr></table></figure><p>接著修改 <code>crush-map</code> 檔案內容，應該會有一行有 <code>step chooseleaf</code> 開頭的設定，把最後的type 從 <code>host</code> 調整為 <code>osd</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Before</span></span><br><span class="line">step chooseleaf firstn &lt;number&gt; type host</span><br><span class="line"><span class="meta">#</span><span class="bash"> After</span></span><br><span class="line">step chooseleaf firstn &lt;number&gt; type osd</span><br></pre></td></tr></table></figure><p>最後將修改好的 crush map 設定塞回去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crushtool -c &quot;crush-map&quot; -o &quot;compiled-crush-map&quot;</span><br><span class="line">ceph osd setcrushmap -i &quot;compiled-crush-map&quot;</span><br></pre></td></tr></table></figure><p>相關 reference link</p><ul><li><a href="https://docs.ceph.com/en/latest/rados/configuration/common/">Common Settings — Ceph Documentation</a></li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/1.2.3/html/installation_guide_for_centos_x86_64/create_a_cluster">Chapter 4. Create a Cluster Red Hat Ceph Storage 1.2.3 | Red Hat Customer Portal</a></li><li><a href="https://docs.ceph.com/en/latest/rados/operations/crush-map/">CRUSH Maps — Ceph Documentation</a></li><li><a href="https://docs.ceph.com/en/latest/rados/operations/crush-map-edits/">Manually editing a CRUSH Map — Ceph Documentation</a></li><li><a href="https://docs.ceph.com/en/latest/rados/operations/crush-map/">CRUSH Maps — Ceph Documentation</a></li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>筆者在公司業務並不負責維護 production 的 Ceph cluster，僅是為了建立 Kubernetes開發環境，需要有個基本會動的 Ceph。</p><p>為了用最少資源建立 Ceph 環境，需要調整相關設定來改變 Ceph 行為。只可惜相關的資源不是很夠，一路跌跌撞撞下來，決定寫下這篇筆記，希望造福未來的自己，也同時照顧他人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原由&quot;&gt;&lt;a href=&quot;#原由&quot; class=&quot;headerlink&quot; title=&quot;原由&quot;&gt;&lt;/a&gt;原由&lt;/h2&gt;&lt;p&gt;Ceph 的預設設定對資料的 replica 行為要求嚴格。
若只有單台機器或是硬碟數量受限，往往架設起來的 Ceph 無法順利存放資料。&lt;</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="ceph" scheme="https://blog.bitisle.net/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>NATS 與 JetStream 簡易介紹</title>
    <link href="https://blog.bitisle.net/2021/07/28/nats-brief-intro.html"/>
    <id>https://blog.bitisle.net/2021/07/28/nats-brief-intro.html</id>
    <published>2021-07-28T16:23:00.000Z</published>
    <updated>2021-07-28T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因公司業務在玩一套相對新的 MQ: NATS。因為官方文件不慎清楚且有些地方與直覺不同，造成起步緩慢。</p><p>以下簡單紀錄一下剛入門時應知道的事情。</p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>相較 RabbitMQ, Kafka 等，<a href="https://nats.io/">NATS</a> 是一套較為年輕的 MQ。雖然有部分子專案的版本未達 v1.0，但官方宣稱已經接近 production ready。</p><p>NATS 從一開始就是針對 cloud service 設計，cluster mode 的水平擴展，node 之間的身分驗證及 TLS 通訊設計看起來都還不錯。</p><p>NATS 的 message 並無特別限制，在 client library 內任何的 byte sequence 都可以成為 message。</p><p>NATS 有以下三個模式(以及其對應的 client library)。</p><h3 id="NATS-NATS-Core"><a href="#NATS-NATS-Core" class="headerlink" title="NATS (NATS Core)"></a>NATS (NATS Core)</h3><p>NATS 專案從一開始發展時的基本模式。 支援 <strong>Pub/Sub</strong> pattern 並提供 <code>at-most-once</code> 語意。</p><h3 id="NATS-Streaming"><a href="#NATS-Streaming" class="headerlink" title="NATS Streaming"></a>NATS Streaming</h3><p>NATS Streaming 是一套疊在 NATS 上面形成的 solution。</p><p>因為設計上的問題，後來又有了 JetStream，所以我們基本上不用理它，只要知道 NATS Streaming 和JetStream 不一樣，翻文件的時候不要翻錯即可。</p><h3 id="JetStream"><a href="#JetStream" class="headerlink" title="JetStream"></a>JetStream</h3><p>JetStream 是後來做在 NATS 內，可選擇是否啟用的子系統。 藉由 JetStream，可以實作 <strong>Producer/Consumer</strong> pattern 並提供 <code>at-least-once</code> 語意。</p><p>Server side 沒什麼需要注意的，只要用較新版的 NATS image 並啟用設定即可。Client 開發則需要注意一些概念。</p><ul><li>Subject: NATS 最初的概念，代表一些 message 的集合。</li><li>Stream: 建立於一或多個 Subject 之上，可將這些 subject 內的 message 統整起來，並放入 persistent storage。</li><li>Consumer: 建立在某個 Stream 之下，可以依序的 consume 屬於此 stream 的特定 message。</li></ul><p>需要注意的是，不只 Subject 與 Stream，Consumer 本身也是建立在 NATS server 中的一個物件。當利用 client library create 一個 Consumer 時，並不是該 process 本身成為一個 consumer，而是 NATS server 中被創了一個 Consumer 物件，準備去使用 Stream 裡面的 message。</p><p>JetStream client library 並沒有提供一個對稱的 producer/consumer API。基於術語的限制以及為了避免誤會，以下在稱呼一般所稱的 producer/consumer 時，會特別加上 <strong>role</strong> 後綴來表示。</p><p>Producer role: 要使用 NATS library 內的 Publish API，將產生的 message 推送至某個 Subject 內。</p><p>Consumer role: 要使用 JetStream library 內的 Stream API，在 NATS server 上對目標Subject 建立 Stream，接著使用 JetStream Consumer API，在 NATS server 中建立屬於該 Stream 的 Consumer。以上都完成之後，即可利用 Consumer 上的 <code>NextMsg</code> 來消耗 message。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>JetStream 的 API 設計並不常見，需要先認知到與既有設計的差別之處才能開始開發。不過其 cloud native 的架構設計或許可以在維運上面勝過其他老牌的 MQ solution。</p><p>今天就先寫到這裡，如果有哪天有興趣再補吧。 :D</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://gcoolinfo.medium.com/comparing-nats-nats-streaming-and-nats-jetstream-ec2d9f426dc8">Comparing NATS, NATS Streaming and NATS JetStream | by George Koulouris | Medium</a></li></ul><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>Golang sample code:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/nats-io/jsm.go&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/nats-io/jsm.go/api&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/nats-io/nats.go&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullSubject <span class="keyword">string</span> = <span class="string">&quot;report_task.scheduled&quot;</span></span><br><span class="line"><span class="keyword">var</span> wildcardSubject <span class="keyword">string</span> = <span class="string">&quot;report_task.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumeOne</span><span class="params">(doneChan <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">msg, err := consumer.NextMsg()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Fail to get message: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Consume get task: %s\n&quot;</span>, <span class="keyword">string</span>(msg.Data))</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line"><span class="keyword">if</span> err := msg.Ack(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Fail to ack the message %s: %v\n&quot;</span>, <span class="keyword">string</span>(msg.Data), err)</span><br><span class="line">&#125;</span><br><span class="line">doneChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProduceAndConsume</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">producerStopChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">consumerStopChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">var</span> taskCount <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; taskCount; idx++ &#123;</span><br><span class="line">taskName := fmt.Sprintf(<span class="string">&quot;task #%d&quot;</span>, rand.Int())</span><br><span class="line">nc.Publish(fullSubject, []<span class="keyword">byte</span>(taskName))</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Producer produce: %s\n&quot;</span>, taskName)</span><br><span class="line">&#125;</span><br><span class="line">producerStopChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; taskCount; idx++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">consumeOne(consumerStopChan)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;-producerStopChan</span><br><span class="line"><span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; taskCount; idx++ &#123;</span><br><span class="line">&lt;-consumerStopChan</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ctx context.Context</span><br><span class="line"><span class="keyword">var</span> cancel context.CancelFunc</span><br><span class="line"><span class="keyword">var</span> nc *nats.Conn</span><br><span class="line"><span class="keyword">var</span> stream *jsm.Stream</span><br><span class="line"><span class="keyword">var</span> consumer *jsm.Consumer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), <span class="number">10</span>*time.Second)</span><br><span class="line">nc, err = nats.Connect(nats.DefaultURL, nats.UserInfo(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;password&quot;</span>), nats.UseOldRequestStyle())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsmgr, err := jsm.New(nc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">streamName := <span class="string">&quot;ReportTask&quot;</span></span><br><span class="line">stream, err = jsmgr.LoadOrNewStreamFromDefault(streamName,</span><br><span class="line">api.StreamConfig&#123;</span><br><span class="line">Subjects:     []<span class="keyword">string</span>&#123;wildcardSubject&#125;,</span><br><span class="line">Storage:      api.FileStorage,</span><br><span class="line">Retention:    api.LimitsPolicy,</span><br><span class="line">Discard:      api.DiscardOld,</span><br><span class="line">MaxConsumers: <span class="number">-1</span>,</span><br><span class="line">MaxMsgs:      <span class="number">-1</span>,</span><br><span class="line">MaxBytes:     <span class="number">-1</span>,</span><br><span class="line">MaxAge:       <span class="number">24</span> * time.Hour,</span><br><span class="line">MaxMsgSize:   <span class="number">-1</span>,</span><br><span class="line">Replicas:     <span class="number">1</span>,</span><br><span class="line">NoAck:        <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumerName := <span class="string">&quot;Generator&quot;</span></span><br><span class="line">consumer, err = stream.LoadOrNewConsumerFromDefault(consumerName,</span><br><span class="line">api.ConsumerConfig&#123;</span><br><span class="line">Durable:         consumerName,</span><br><span class="line">DeliverPolicy:   api.DeliverNew,</span><br><span class="line">FilterSubject:   fullSubject,</span><br><span class="line">AckPolicy:       api.AckExplicit,</span><br><span class="line">AckWait:         <span class="number">30</span> * time.Second,</span><br><span class="line">MaxDeliver:      <span class="number">5</span>,</span><br><span class="line">ReplayPolicy:    api.ReplayInstant,</span><br><span class="line">SampleFrequency: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shutdown</span><span class="params">()</span></span> &#123;</span><br><span class="line">cancel()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">setup()</span><br><span class="line">code := m.Run()</span><br><span class="line">shutdown()</span><br><span class="line">os.Exit(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近因公司業務在玩一套相對新的 MQ: NATS。
因為官方文件不慎清楚且有些地方與直覺不同，造成起步緩慢。&lt;/p&gt;
&lt;p&gt;以下簡單紀錄一下剛入門時應知道的事情。&lt;/p&gt;
&lt;h2 id=&quot;Guide&quot;&gt;&lt;a href=&quot;#Guide&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="nats" scheme="https://blog.bitisle.net/tags/nats/"/>
    
    <category term="mq" scheme="https://blog.bitisle.net/tags/mq/"/>
    
    <category term="golang" scheme="https://blog.bitisle.net/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>GitLab 更換自家 GPG Key</title>
    <link href="https://blog.bitisle.net/2021/06/17/gitlab-revoke-gpg-key.html"/>
    <id>https://blog.bitisle.net/2021/06/17/gitlab-revoke-gpg-key.html</id>
    <published>2021-06-17T03:10:00.000Z</published>
    <updated>2021-06-17T03:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天 GitLab 在自家 blog 上公告 revoke 簽署 package 的 GPG key。</p><blockquote><p>We recently became aware of an instance where this key and other tokensused to distribute official GitLab Runner packages and binaries were notsecured according to GitLab’s security policies.</p></blockquote><blockquote><p>We have not found any evidence of unauthorized modification of the packagesor access to the services storing them.</p></blockquote><p>並不是因為 key 被 compromise，僅是因為 key 不符合公司的安全規範，所以就進行了一次 rekey。</p><p>GPG key rekey 並不如換憑證一樣，只要重簽一張就好 (因為信賴建立在已知的第三方 CA 上)。GPG key rekey 需要透過可信管道重新宣告 fingerprint 並請大家 import 新的 key。這個轉換的成本，相較換憑證應是高非常多且難以量化的。</p><p>沒想到居然僅為了不合安全規範就進行 rekey，不愧是國際一線的軟體公司！</p><p>See: <a href="https://about.gitlab.com/blog/2021/06/16/gpg-key-used-to-sign-gitlab-runner-packages-rotated/">The GPG key used to sign GitLab Runner packages has been rotated | GitLab</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天 GitLab 在自家 blog 上公告 revoke 簽署 package 的 GPG key。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We recently became aware of an instance where this key and other </summary>
      
    
    
    
    <category term="news" scheme="https://blog.bitisle.net/categories/news/"/>
    
    
    <category term="gitlab" scheme="https://blog.bitisle.net/tags/gitlab/"/>
    
    <category term="gnupg" scheme="https://blog.bitisle.net/tags/gnupg/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 新功能: Remote Repositories</title>
    <link href="https://blog.bitisle.net/2021/06/12/vscode-feature-remote-repositories.html"/>
    <id>https://blog.bitisle.net/2021/06/12/vscode-feature-remote-repositories.html</id>
    <published>2021-06-12T08:35:00.000Z</published>
    <updated>2021-06-12T08:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>VS Code 在 <a href="https://code.visualstudio.com/updates/v1_57">1.57</a> 版中，Remote Development 系列 extension 加入了新成員:<a href="https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub">Remote Repositories</a>。</p><p>有了這個 extension 之後，如果遇上臨時想看的 project，就可以直接在 VS Code中叫出來看，不需要事先 clone 至某個 local 資料夾。</p><p>不過.. 因為這個 extension 實際上是建一個<a href="https://github.com/microsoft/vscode/wiki/Virtual-Workspaces">Virtual Workspaces</a>並把 code 放在裡面閱覽，所以用 Remote Repositories 開出來的 workspace 功能非常受限。諸如 Debug, Terminal 及大部分的 extension 基本上都不能用。但話雖如此，當看 code 看一看想要開始進行比較深入的修改及除錯時，其實也是有提供轉換成一般 workspace 的功能。 使用上非常方便！</p><p>可惜的是，目前此 extension 支援的 remote repository 種類只有 GitHub。且如同其他 Remote Development Series，這個 extension 並非 open source project：</p><ul><li><a href="https://code.visualstudio.com/docs/remote/faq#_why-arent-the-remote-development-extensions-or-their-components-open-source">Visual Studio Code Remote Development Frequently Asked Questions</a></li><li><a href="https://github.com/VSCodium/vscodium/issues/196">Cannot use Remote Development extension pack · Issue #196 · VSCodium/vscodium</a></li></ul><p>未來會不會支援 GitHub 以外的 Git repositories，甚至其他種類的 VCS，只能看微軟爸爸的眼色了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VS Code 在 &lt;a href=&quot;https://code.visualstudio.com/updates/v1_57&quot;&gt;1.57&lt;/a&gt; 版中，
Remote Development 系列 extension 加入了新成員:
&lt;a href=&quot;https://mar</summary>
      
    
    
    
    <category term="news" scheme="https://blog.bitisle.net/categories/news/"/>
    
    
    <category term="github" scheme="https://blog.bitisle.net/tags/github/"/>
    
    <category term="ide" scheme="https://blog.bitisle.net/tags/ide/"/>
    
    <category term="vscode" scheme="https://blog.bitisle.net/tags/vscode/"/>
    
    <category term="development" scheme="https://blog.bitisle.net/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages 與 GitLab Pages 架設 Blog</title>
    <link href="https://blog.bitisle.net/2021/06/06/github-pages-gitlab-pages.html"/>
    <id>https://blog.bitisle.net/2021/06/06/github-pages-gitlab-pages.html</id>
    <published>2021-06-06T13:00:00.000Z</published>
    <updated>2021-06-06T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>筆者最近把個人 blog 的產生工具從 GitHub Pages 預設的 <a href="https://jekyllrb.com/">Jekyll</a>換成 <a href="https://hexo.io/">Hexo</a>，有了一點心得。 而且不只 GitHub Pages，筆者在公司業務中也有大量使用 GitLab Pages 來產生文件及測試報表，算是有累積不少經驗。</p><p>趁著印象還深刻時，寫點筆記，替這兩個相同性質的服務做基本的介紹。</p><h2 id="Pages-服務與-Static-Site-Generator"><a href="#Pages-服務與-Static-Site-Generator" class="headerlink" title="Pages 服務與 Static Site Generator"></a>Pages 服務與 Static Site Generator</h2><p>GitHub / GitLab Pages 可以將一組靜態網頁內容 (html, css, js 等)，透過 GitHub / GitLab的伺服器，host 在某個 URL 底下。 網頁產生工具 (Static Site Generator, 下稱 SSG) 則是一個可以將用 Markdown 撰寫的文章，轉化成漂亮的靜態網頁內容的工具。常見的 SSG 有 Jekyll(Ruby), Hugo(Go),Hexo(JavaScript) 等。</p><p>若將 SSG 工具與 GitHub / GitLab Pages 服務，搭配使用，<strong>寫作者只需要寫寫簡單的 Markdown 並 push commit，就能得到一個漂亮的 blog 或是文件網頁。</strong>筆者的個人 blog 及公司的工作筆記即是使用這類流程架設。</p><p>整體流程大概如下圖所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">               +   GitHub            +     github.io</span><br><span class="line">Local Project  |          Project    |               site</span><br><span class="line">               |   GitLab            |     gitlab.io</span><br><span class="line">               +                     +</span><br><span class="line"></span><br><span class="line">+----------+        +----------+  Build &amp;  +------+  User</span><br><span class="line">| Markup   |  Push  | Markup   |  Deploy   | Site |  Browse</span><br><span class="line">| config.. | +----&gt; | Config.. | +-------&gt; |      | +-------&gt;</span><br><span class="line">+----------+        +----------+           +------+</span><br></pre></td></tr></table></figure><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p><a href="https://pages.github.com/">GitHub Pages</a> 基本上會有兩種主要的使用方式。可以直接使用 GitHub Pages，或是透過 GitHub Pages 的 Jekyll 整合功能。前者需要的技術背景與設定步驟均較複雜，後者較簡單但缺少了根據個別需求調整的機會。</p><h3 id="Native-GitHub-Pages"><a href="#Native-GitHub-Pages" class="headerlink" title="Native GitHub Pages"></a>Native GitHub Pages</h3><p>若直接使用 GitHub Pages，使用方式是: 將 SSG 產生的網頁擺放至某 branch (預設為 <code>gh-pages</code>)的 <code>/</code> 或 <code>/docs</code> 目錄。 每次該 branch 被更新時，GitHub 就會將最新版本的網頁內容，呈現在 <code>https://&lt;username&gt;.github.io/&lt;project&gt;</code> 連結下。</p><p>早期這個 push brach 的動作是蠻麻煩的，但後來有了 GitHub Action 之後，產生網站和後 push branch 的動作都可以在 GitHub 提供的環境完成，非常方便。</p><p>筆者個人使用的 job 描述檔如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/blog.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">build-and-deploy-blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;master&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2.3.4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2.1.5</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">12.</span><span class="string">x</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependent</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">blog</span> <span class="string">posts</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>若不想使用 GitHub 提供的 domain，也可以參照<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">官方文件</a>，使用自己購買的 domain 來架設網站。只要設定完成，GitHub 也可以一併幫使用者申請 custom domain 需要的 HTTPS 憑證。</p><p>比方說筆者的 blog 原本可存取的位置應是 <code>https://wdhongtw.github.io/blog</code>，但有設定custom domain 後，目前是透過 <code>https://blog.bitisle.net</code> 來存取架在 GitHub Pages 上的 blog。</p><p><img src="/assets/images/f0b7ac13-d964-496f-ab78-1fed9a8a742b.png"></p><h3 id="GitHub-Pages-Jekyll"><a href="#GitHub-Pages-Jekyll" class="headerlink" title="GitHub Pages Jekyll"></a>GitHub Pages Jekyll</h3><p>前述 (Native) GitHub Pages 的使用方式會需要自己 push branch。但若 GitHub 偵測到 project 使用的 SSG 是 Jekyll，GitHub 會自動處理產生網頁以及後續部屬到 <code>https://&lt;username&gt;.github.io/&lt;project&gt;</code> 的工作。(連 <code>gh-pages</code> branch 都省了，整個 project 會非常乾淨。)</p><p>此方法相當容易上手，也是 GitHub Pages 教學文件預設的使用方式。但因為產生網站的環境是由 GitHub 協助處理，能使用的 Jekyll plugin 自然也是受到限制。</p><p>說是受到限制，但以一般使用情境應該也很夠了。諸如 RSS feed, sitemap, Open Graph metadata等現代 blog 必備的功能都有自帶。若想知道有那些 Jekyll plugin 可用，可至 <a href="https://pages.github.com/versions/">Dependency versions | GitHub Pages</a>查閱。</p><h3 id="Compare-Native-GitHub-Page-with-GitHub-Pages-and-Jekyll"><a href="#Compare-Native-GitHub-Page-with-GitHub-Pages-and-Jekyll" class="headerlink" title="Compare Native GitHub Page with GitHub Pages and Jekyll"></a>Compare Native GitHub Page with GitHub Pages and Jekyll</h3><p>簡單比較上述兩種方式如下</p><table><thead><tr><th></th><th>GitHub Page</th><th>GitHub Page with Jekyll</th></tr></thead><tbody><tr><td>SSG Tool</td><td>on your choice</td><td>only Jekyll</td></tr><tr><td>Deployment</td><td>push generated site</td><td>done by GitHub</td></tr><tr><td>Customization</td><td>any plugins of SSG</td><td>limited Jekyll plugin list</td></tr></tbody></table><h2 id="GitLab-Pages"><a href="#GitLab-Pages" class="headerlink" title="GitLab Pages"></a>GitLab Pages</h2><p><a href="https://about.gitlab.com/stages-devops-lifecycle/pages/">GitLab Pages</a>與 GitHub Pages 一樣，有將 SSG 產生的網頁 host 在特定網址的能力。以 GitLab 官方 host 的站台來說，網站會放在 <code>https://&lt;username&gt;.gitlab.io/&lt;project&gt;</code> 下。(私人或公司 host 的 GitLab instance 就要看各自的設定)</p><p>與 GitHub 不同的是，GitLab Pages 並不是透過 push branch 的方式部屬，且沒有針對特定 SSG 提供更進一步的自動部屬功能。</p><p>GitLab Pages 的使用方式是基於 GitLab CI Pipeline 的架構設計的。若想要部屬網站，一般的使用方式是在 pipeline 內產生網頁，接著將網頁內容擺放至為特定 job (<code>pages</code>) 的特定artifacts 目錄 (<code>public</code>) 中。 一旦有 pipeline jobs 達成此條件。 GitLab 就會把網頁內容部屬到對應的網址下。</p><p>筆者個人使用的 job 描述檔如下:(因為 GitHub Action 與 GitLab CI 的架構差異，寫起來比較簡潔)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ruby:3.0.1</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bundle</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">jekyll</span> <span class="string">build</span> <span class="string">--destination</span> <span class="string">public</span> <span class="string">--baseurl</span> <span class="string">&quot;$CI_PAGES_URL&quot;</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>至於其他 GitHub Pages 有的功能，如 custom domain，自動申請 HTTPS 憑證等，GitLab Pages也都有。 記得去 project 設定頁面設定即可。</p><p><img src="/assets/images/49f9611b-3d40-4425-beb6-317aeae0aa6e.png"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>在 2008 年 GitHub Pages 剛推出時，使用者都要自己手動 push <code>gh-pages</code> branch。後來 GitLab 推出基於 GitLab CI 的 Pages 服務之後，GitHub Pages使用體驗相較之下可說是非常糟糕。</p><p>但後來隨著 GitHub Actions 服務推出，以及社群維護的高品質<a href="https://github.com/marketplace/actions/github-pages-action">Pages 部屬 Action</a> 出現。GitHub / GitLab Pages 的使用體驗已經變得相當接近。其他像是 custom domain 以及 HTTPS 的支援也都是免費的基本功能。</p><p>基於上述原因，許多早期的 <a href="https://mjswensen.com/blog/github-pages-vs-gitlab-pages/">比較文章</a>其實已經沒什麼參考價值。 若現在想架設新的 blog 等站台，只要選擇自己習慣的平台即可。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.github.com/en/pages">GitHub Pages Documentation - GitHub Docs</a></li><li><a href="https://docs.gitlab.com/ee/user/project/pages/">GitLab Pages | GitLab</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;筆者最近把個人 blog 的產生工具從 GitHub Pages 預設的 &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;
換成 &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;，有了一點心得。 而且不只 GitHu</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="github" scheme="https://blog.bitisle.net/tags/github/"/>
    
    <category term="gitlab" scheme="https://blog.bitisle.net/tags/gitlab/"/>
    
    <category term="blog" scheme="https://blog.bitisle.net/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 即日起支援使用 Security Key 進行 Git 操作</title>
    <link href="https://blog.bitisle.net/2021/05/11/github-ssh-fido-key.html"/>
    <id>https://blog.bitisle.net/2021/05/11/github-ssh-fido-key.html</id>
    <published>2021-05-11T00:00:00.000Z</published>
    <updated>2021-05-11T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 開始支援使用 security key 進行 Git 操作啦！</p><p>這應該是各家科技巨頭當中，第一個支援 security key 進行 SSH login 的服務吧。筆者昨天 5/10 才在公司內分享如何使用 security key 來做 SSH login，沒想到 Yubico 和 GitHub 也剛好在昨天一起同步更新 blog 文章，通知大家這個新功能。喜極而泣..</p><ul><li><a href="https://github.blog/2021-05-10-security-keys-supported-ssh-git-operations/">Security keys are now supported for SSH Git operations - The GitHub Blog</a></li><li><a href="https://www.yubico.com/blog/github-now-supports-ssh-security-keys/">GitHub now supports SSH security keys - Yubico</a></li></ul><p>以下簡單介紹如何使用這個新功能。為了方便解說及避免誤會，後述內容均以正式名稱 authenticator 代稱 security key。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先當然要有一把 authenticator，如果還沒有，趕快去買一把囉。 :D</p><p><strong>第一步</strong>，在 authenticator 內產生新的 key pair。</p><p>產生 key pair 的流程和傳統放在檔案系統上的差不多，只是 key type 要指定代表 authenticator的 type。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa-sk</span><br></pre></td></tr></table></figure><p>產生的過程，根據不同的 authenticator，會有要求按一下 且/或 輸入 PIN code 驗證身分。此步驟會在 authenticator 內產生一組 key pair，並將 public key 寫到檔案系統上。平常放 private key 的那個檔案還是會產生，不過這次裡面放的會是一個 key handle。</p><p><strong>第二步</strong>，透過 GitHub 的 web UI 上傳 public key</p><p>上傳完之後，沒意外就可以順利使用了，可以試著 clone 一些 project</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:github/secure_headers.git</span><br><span class="line">Cloning into &#x27;secure_headers&#x27;...</span><br><span class="line">Confirm user presence for key ECDSA-SK SHA256:........</span><br><span class="line">User presence confirmed</span><br></pre></td></tr></table></figure><p>若確認 OK，之後的 Git 操作都可以透過隨身攜帶的 authenticator 保護，只要按一下 authenticator 即可。</p><p>設定完之後，<strong>若沒有拿出 authenticator，就不能進行 push / pull 操作。</strong>只要確保 authenticator 還在身上，就可以安心睡大覺。(再也不用擔心 private key 放在公司電腦上會被摸走了！)</p><h2 id="進階使用方式"><a href="#進階使用方式" class="headerlink" title="進階使用方式"></a>進階使用方式</h2><p>FIDO 2 authenticator 博大精深，除了上述的基本使用流程外，還有些細節可以設定。</p><p>以下分別介紹三個進階使用技巧：</p><h3 id="要求身分驗證-User-Verification-才能使用-Authenticator"><a href="#要求身分驗證-User-Verification-才能使用-Authenticator" class="headerlink" title="要求身分驗證 (User Verification) 才能使用 Authenticator"></a>要求身分驗證 (User Verification) 才能使用 Authenticator</h3><p>根據每個人平常保管鑰匙習慣的差異，可能有人會擔心 authenticator 真的被摸走。</p><p>但 authenticator 也有支援一定要驗甚身分 (e.g. PIN code or 指紋辨識) 後才能使用內部的 key pair 的功能。</p><p>要如何使用呢？ 只要在產生 key pair 的過程中多下一個 flag 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa-sk -O verify-required</span><br></pre></td></tr></table></figure><p>若之後要使用由此方式產生的 key pair，除了手指按一下 authenticator 之外，還會要求使用者輸入 PIN code 才能順利完成操作。如此即使 authenticator 被偷走了，也不用太緊張。</p><h3 id="全自動使用-Authenticator-避免-User-Presence-Check"><a href="#全自動使用-Authenticator-避免-User-Presence-Check" class="headerlink" title="全自動使用 Authenticator (避免 User Presence Check)"></a>全自動使用 Authenticator (避免 User Presence Check)</h3><p>若把 authenticator 插上電腦後，想要隨時隨地都進行 push / pull，但不要每次都手按一下 authenticator。這種自動化的使用情境 OpenSSH 其實也是有支援的。</p><p>使用的方式也是在產生 key pair 時多帶一個參數。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa-sk -O no-touch-required</span><br></pre></td></tr></table></figure><p>同時在將 public key 部屬到目標機器上時，在 public key 該行前面多下 <code>no-touch-required</code>即可。 (詳情請見 <code>ssh-keygen(1)</code> 及 <code>sshd(8)</code>)</p><p>以此方始產生的 key pair 在使用時就不需要每次都手按一下，可以全自動使用。</p><p>不過，雖然 OpenSSH 有支援此種使用情境，<strong>但目前 GitHub 禁止這種使用方式</strong>。</p><p>節錄自上述 blog 文章</p><blockquote><p>While we understand the appeal of removing the need for the taps,we determined our current approach to require presence and intentionis the best balance between usability and security.</p></blockquote><p>所以在 GitHub 上，若想要全自動操作，只能回去用一般的 SSH key 或 API token 囉。</p><h3 id="避免手動複製-Key-Handle"><a href="#避免手動複製-Key-Handle" class="headerlink" title="避免手動複製 Key Handle"></a>避免手動複製 Key Handle</h3><p>前面有提到，原先檔案系統上用來放 private key 的檔案會變成拿來擺放 key handle。</p><p>這意味著，當我們想在新的機器上透過 SSH 進行 Git 操作時，除了拿出 authenticator 之外，也需要把原先的 key handle 檔案複製到新的機器上。且若 key handle 檔案掉了，該組 key pair 就不能使用了。</p><p>若要避免此問題，就要用上 authenticator 的另一個進階功能discoverable credentials / resident keys 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa-sk -O resident</span><br></pre></td></tr></table></figure><p>使用此類型的 key pair 時，會在 authenticator 上消耗一些儲存空間。但換來的好處是，使用者可以在新的機器上，把 key handle 從 authenticator 內抽出來。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -K # extract discoverable credentials</span><br></pre></td></tr></table></figure><p>如此就不用手動複製擺放 key handle 的 private key 檔案了。</p><p>但要注意的是此類型 key pair 會消耗 authenticator 的空間。每把 authenticator 可以放多少 key pair 要再自行查閱官方文件。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上介紹了基本使用情境及三種可能的進階使用方式。</p><p>筆者在 2014 年第一次注意到 FIDO (U2F) 標準，當時就在想像沒有密碼的世界。如今，藉由 FIDO 2 security key 的普及，當初所想的美好願景似乎在慢慢地實現中..</p><p>希望未來能看到 security key 運用在更多場景上！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub 開始支援使用 security key 進行 Git 操作啦！&lt;/p&gt;
&lt;p&gt;這應該是各家科技巨頭當中，第一個支援 security key 進行 SSH login 的服務吧。
筆者昨天 5/10 才在公司內分享如何使用 security key 來做 SS</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="github" scheme="https://blog.bitisle.net/tags/github/"/>
    
    <category term="fido" scheme="https://blog.bitisle.net/tags/fido/"/>
    
    <category term="git" scheme="https://blog.bitisle.net/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>延長或縮短 GPG 金鑰的過期時間 (Expiration Time)</title>
    <link href="https://blog.bitisle.net/2021/05/06/gpg-key-extend-expiration-date.html"/>
    <id>https://blog.bitisle.net/2021/05/06/gpg-key-extend-expiration-date.html</id>
    <published>2021-05-06T00:00:00.000Z</published>
    <updated>2021-05-06T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>筆者在 2018 年的時候開了第一個真的有在長期使用的 GPG 金鑰。</p><p>因為年少輕狂不懂事，當時特別把 primary key 設定成永遠不會過期。但演算法可能在未來被發現漏洞，電腦的運算能力也會越來越好，一把不會過期的 GPG 金鑰是先天上不合理的存在。考量到此問題，筆者後來又再修正了該金鑰的過期時間，以及整理這篇筆記…</p><h2 id="GPG-Key-可以延展過期時間？"><a href="#GPG-Key-可以延展過期時間？" class="headerlink" title="GPG Key 可以延展過期時間？"></a>GPG Key 可以延展過期時間？</h2><p>我想這應該是熟悉 X.509 憑證生態系的人最為驚訝的一件事情了。</p><p>我發現幾位公司主管並不知道這件事情，也促使我在經過一段時間後回來整理這篇文章。事實上，GPG key 不只是可以延展過期時間，這也是一般推薦的最佳慣例。</p><blockquote><p>People think that they don’t want their keys to expire,but you actually do. Why? Because you can always extend your expiration date,even after it has expired!</p></blockquote><p>See: <a href="https://riseup.net/en/security/message-security/openpgp/best-practices#use-an-expiration-date-less-than-two-years">OpenPGP Best Practices - riseup.net</a></p><p>使用者應該設一個較短的有效時間，並在後續有需要時延展過期時間。</p><p>GPG key 可以自己修改金鑰的過期時間，是因為 GPG key 和 X.509憑證有著本質上的區別。</p><blockquote><p>GPG key 的產生是透過 primary key 的 self-signature，而 X.509 憑證的簽署是由公正的第三方 CA 進行。</p></blockquote><p>X.509 憑證的過期時間是 CA 幫你簽署憑證時決定，自然無法隨意修改，大家也很習慣這件事情，但 GPG key 就不一樣了。GPG key 的有效時間是透過 key 的 self-signature 內所記載的時間決定。只要 primary (private) key 沒有遺失，持有者隨時可以重新自簽並修改時間。</p><p>只要認知到兩者本質上的差異，可以修改過期時間這件事情也就很好理解了。</p><h2 id="他人如何認定過期時間？"><a href="#他人如何認定過期時間？" class="headerlink" title="他人如何認定過期時間？"></a>他人如何認定過期時間？</h2><p>既然 GPG key 可以隨時重簽修改過期時間，那對他人來說，該如何判定某把 key 究竟什麼時候過期呢？</p><p>規則很簡單</p><blockquote><p>The latest self-signature takes precedence</p></blockquote><p>See: <a href="https://www.gnupg.org/gph/en/manual/c235.html">Key Management</a></p><p>若是透過 <code>gpg</code> tool 修改過期時間，舊的 self-signature 會被刪掉。因為只有一個 self-signature，修改完之後，只要重新把 key export 給他人，他人就可以知道新的過期時間。</p><p>若不是透過信賴管道直接把新簽的 key 給他人，而是透過 GPG key server，狀況會有點不一樣。</p><p>基於安全考量，GPG key server 是不允許部分或完全刪除 key 的，MIT 名下的 key server還特別寫了一篇 <a href="https://pgp.mit.edu/faq.html">FAQ</a> 來說明這件事。對於一把已存在的 key，使用者只能推新的 sub key 或新的 signature 上去。</p><p>因此，他人透過 key server 取得 key 時，也會拿到多個 signature。好在 signature 本身也有時戳，根據上述 “後者為準” 的規則，他人就可以知道正確的過期時間是何時。</p><p>有興趣的可以查看筆者的 GPG key 來確認這個行為</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver keys.gnupg.net --recv-keys C9756E05</span><br><span class="line"><span class="meta">#</span><span class="bash"> Get key from key server</span></span><br><span class="line"></span><br><span class="line">gpg --export C9756E05 | gpg --list-packets</span><br><span class="line"><span class="meta">#</span><span class="bash"> One signature has <span class="string">&quot;key expires after ...&quot;</span> <span class="keyword">while</span> another doesn<span class="string">&#x27;t</span></span></span><br><span class="line"></span><br><span class="line">gpg -k C9756E05</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Validate that the key indeed expires at some time</span></span></span><br></pre></td></tr></table></figure><p>或是可以直接去 GnuPG 官方的 key server 查看:<a href="http://keys.gnupg.net/pks/lookup?op=vindex&fingerprint=on&search=0xC728B2BDC9756E05">Search results for ‘0xc728b2bdc9756e05’</a></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>翻閱文件研究的過程，慢慢感受到到 GPG 這個扣除 X.509 之外唯一成熟的 PKI生態系，究竟有多麼偉大。同時也看到很多值得細讀的 guideline 文件。</p><p>若有時間，真的該來好好吸收整理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;筆者在 2018 年的時候開了第一個真的有在長期使用的 GPG 金鑰。&lt;/p&gt;
&lt;p&gt;因為年少輕狂不懂事，當時特別把 primary key 設定成永遠不會過期。
但演算法可能在未來被發現漏洞，電腦的運算能力也會越來越好，
一把不會過期的 GPG 金鑰是先天上不合理的存在。</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="security" scheme="https://blog.bitisle.net/tags/security/"/>
    
    <category term="gnupg" scheme="https://blog.bitisle.net/tags/gnupg/"/>
    
  </entry>
  
  <entry>
    <title>保護存在檔案系統上的 Docker 登入密碼</title>
    <link href="https://blog.bitisle.net/2021/03/04/docker-credential-helper.html"/>
    <id>https://blog.bitisle.net/2021/03/04/docker-credential-helper.html</id>
    <published>2021-03-04T00:00:00.000Z</published>
    <updated>2021-03-04T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在企業內部的工作環境中，常會碰到需要存取 private registry 上的 image 的狀況。以 Docker 的工作流程來說，一般要透過執行 <code>docker login</code> 來存取 private registry。不過，若事先毛設定好 <em>docker credential helper</em>，執行 <code>docker login</code> 會導致我們的密碼 / API token 直接以明文的方式寫在檔案系統上。</p><p>這篇筆記說明如何在 Linux 環境下安裝與設定 <em>docker credential helper</em>。</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>至 docker/docker-credential-helpers 的 GitHub release 頁面下載最新版本的<code>docker-credential-secretservice</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/docker-credential-helpers/releases/download/v0.6.3/docker-credential-secretservice-v0.6.3-amd64.tar.gz &gt;secretservice.tar.gz</span><br></pre></td></tr></table></figure><p>解壓縮並把執行檔放到任意一個 PATH 資料夾內。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxv -f secretservice.tar.gz</span><br><span class="line">chmod +x docker-credential-secretservice</span><br><span class="line">mv docker-credential-secretservice ~/.local/bin</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>為了讓 <code>docker</code> 工具知道我們要用 credential helper，需要調整家目錄下的設定檔。</p><p>在設定檔 <code>~/.docker/config.json</code> 內加入 <code>credsStore</code> 設定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">EDITOR ~/.docker/config.json</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;credsStore&quot;</span>: <span class="string">&quot;secretservice&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>註: 此資料夾和 JSON 檔案可能不存在。若沒有自己創一個即可。</p><p>註: 根據文件，此欄位的值與是 helper binary 的後綴對齊，因為 Linux 環境使用的 binary 是<code>docker-credential-secretservice</code> 所以需要填入的值爲 <code>secretservice</code></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>如果已經有登入過某 registry，需要手動登出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout registry.example.com</span><br></pre></td></tr></table></figure><p>(重新) 登入該 registry。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login registry.example.com</span><br></pre></td></tr></table></figure><p>檢視 <code>~/.docker/config.json</code> 並確認對應的身分紀錄是空白的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;auths&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;registry.example.com&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若有安裝 Seahorse 程式的話，此時可以看到 secret 被放在 Login keyring 中。</p><p>如果設定錯誤的話，登入資訊會以編碼過的方式呈現在該紀錄中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;auths&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;registry.example.com&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;auth&quot;</span>: <span class="string">&quot;c3R...zE2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Future-Reading"><a href="#Future-Reading" class="headerlink" title="Future Reading"></a>Future Reading</h2><ul><li><a href="https://docs.docker.com/engine/reference/commandline/login/">docker login - Docker Documentation</a></li><li><a href="https://github.com/docker/docker-credential-helpers">docker/docker-credential-helpers</a></li><li><a href="https://wiki.archlinux.org/index.php/GNOME/Keyring">GNOME/Keyring - ArchWiki</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在企業內部的工作環境中，常會碰到需要存取 private registry 上的 image 的狀況。
以 Docker 的工作流程來說，一般要透過執行 &lt;code&gt;docker login&lt;/code&gt; 來存取 private registry。
不過，若事先毛設定好 &lt;</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="docker" scheme="https://blog.bitisle.net/tags/docker/"/>
    
    <category term="secret" scheme="https://blog.bitisle.net/tags/secret/"/>
    
    <category term="security" scheme="https://blog.bitisle.net/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Audit Log 使用筆記</title>
    <link href="https://blog.bitisle.net/2020/10/22/kubernetes-auditing.html"/>
    <id>https://blog.bitisle.net/2020/10/22/kubernetes-auditing.html</id>
    <published>2020-10-22T00:00:00.000Z</published>
    <updated>2020-10-22T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在公司的工作環境中，有些業務需要部屬服務在 Kubernetes (下稱 K8s) 上。因此在專案早期，部門內的同事自架了 K8s cluster 來開發。</p><p>隨著時間流逝，各個 RD 開始上手 K8s 操作後，每天都有人在對 K8s 的 master 開發環境做修改。於是部門內開始產生一些令人煩躁的對話</p><ul><li>我看 K8s 上面有裝了某個 CRD，但沒有裝對應的 service 來用這個 CRD，這個是你裝的嗎？</li><li>Test namespace 裝了一個 Ingress rule 產生衝突了，那個 rule 是誰裝的？</li><li>…</li></ul><p>這些對話的共通點是：想知道 K8s 的狀態改變是誰造成的。但在部門自架的環境內，因為大家共用了一個 kubeconfig，所以根本無從找起..</p><p>於是我想辦法把開發用的 K8s 環境設定好 auditing log 的功能，並留下這篇筆記</p><h2 id="Audit-目標"><a href="#Audit-目標" class="headerlink" title="Audit 目標"></a>Audit 目標</h2><p>要做 audit 來確認每個人做了什麼操作，我需要達到兩個目標</p><ol><li>不同人員需要使用不同的身分存取 K8s API server</li><li>API server 需開啟 log 且 log 需保存在 persistent storage 上</li></ol><h2 id="身分驗證方式比較"><a href="#身分驗證方式比較" class="headerlink" title="身分驗證方式比較"></a>身分驗證方式比較</h2><p>參考 K8s 的 <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">Authenticating</a>官方文件，在不依賴外部服務的情況下，大概有三種身分驗證的方式</p><ul><li>X509 Client Certificate</li><li>Static Token File</li><li>Service Account Tokens</li></ul><p>以下分別介紹各方式的優缺點</p><h3 id="X509-Client-Certificate"><a href="#X509-Client-Certificate" class="headerlink" title="X509 Client Certificate"></a>X509 Client Certificate</h3><p>此方式依賴 TLS 的 client verification 功能，只要你有正確的憑證塞在 kubeconfig 裡即可使用。一般在做 cluster 初始化過程中拿到的 admin kubeconfig ，其內容即屬這一類。</p><p>此方式的優點為</p><ul><li>若採取嚴謹的使用者自行產生 key-CSR pair 再給 CA 簽署流程，因為僅使用者有 private key，出事時有高度信心一定是該使用者所為</li><li>除了自己的 user name 外，使用者可以從自己的憑證中直接確認操作 K8s 時會有那些 group 身分<ul><li>憑證內 subject 的 <em>CN</em> 對應 K8s user name, <em>O</em> 對應 K8s group name</li></ul></li></ul><p>此方式的缺點為</p><ul><li>K8s 不支援 X509 原生的 certificate revocation 功能，若有特定 client 憑證有問題，得整個 CA 換掉重來<ul><li>Upstream issue: <a href="https://github.com/kubernetes/kubernetes/issues/18982">Support for managing revoked certs</a> (opened for 5 years)</li></ul></li></ul><h3 id="Static-Token-File"><a href="#Static-Token-File" class="headerlink" title="Static Token File"></a>Static Token File</h3><p>K8s API server 在開啟時，可以設定一個檔案來記錄 token 與 user(group) 的 mapping 關係。Client 連上 API server 時，只要能拿出此 token，便會被視為對應的 user 進行後續權限檢查。</p><p>此方式的優點為</p><ul><li>設定簡單。需要新增/刪除使用者或修改 token 時，只需修改一個檔案</li><li>Token 可長可短，可以做出較為可讀的 kubeconfig 檔案 (行寬 80 字元以內)</li></ul><p>此方式的缺點為</p><ul><li>static token file 設定有異動時需要重開 server</li></ul><h3 id="Service-Account"><a href="#Service-Account" class="headerlink" title="Service Account"></a>Service Account</h3><p>Service Account 是 K8s 原生設計給 K8s 內的 service 做 K8s 自我管理的機制。</p><p>此方式的優點為</p><ul><li>彈性極高，可在 runtime 直接透過 K8s API 產生新的 service account</li></ul><p>此方式的缺點為</p><ul><li>service account 屬 namespaced resource，若有多個 namespace 要相同 user，需要重複設定</li><li>產生的 audit log 較難做事後梳理<ul><li>K8s 有大量利用 service account 的自我管理行為，因此難以區隔使用者操作和 K8s 自身操作</li></ul></li><li>相較於 X509 或 static token 方式，service account 不能直接設定群組</li></ul><h2 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h2><p>若使用 <code>kubeadm</code> 安裝設定 K8s cluster，只有 <code>kubelet</code> 會作為一個 system service 運行在 host 中。其他如 K8s API server, scheduler 及 etcd 等都是跑在 master node 的 Docker container 環境中</p><p>以下說明均假設為此類環境進行操作。</p><h2 id="設定-Static-Token-File"><a href="#設定-Static-Token-File" class="headerlink" title="設定 Static Token File"></a>設定 Static Token File</h2><h3 id="K8s-Master-Node-設定修改"><a href="#K8s-Master-Node-設定修改" class="headerlink" title="K8s Master Node 設定修改"></a>K8s Master Node 設定修改</h3><p>新增 user token file <code>/etc/kubernetes/tokens.csv</code> (路徑可自行調整)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user-token,user-name,uid,&quot;optional-group,another-group&quot;</span><br><span class="line">fc27911e-73dd-46b0-8c57-86f2fe5fdd21,alice,alice@example.com,&quot;developer&quot;</span><br></pre></td></tr></table></figure><p>檔案為單純的 CSV 格式，包含四個欄位</p><ul><li>User Token: 任意字串，不一定要使用 UUID 格式</li><li>User Name: 使用此 token 身分驗證完成後得到的 user name</li><li>UID: 用途不明，會出現在 audit log 中<ul><li><blockquote><p>identifies the end user and attempts to be more consistent and unique than username</p></blockquote></li></ul></li><li>List of Group Name: (Optional) 使用此 token 身分驗證完成後得到的 group 身分</li></ul><p>設好 static token file 後，修改 API server 的 static pod 描述 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>。<code>user-tokens</code> 的 path 與前述設定對齊。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/root/manifests/kube-apiserver.yaml b/root/token-api-server.yaml</span></span><br><span class="line"><span class="comment">index 31c5f40..d4511ae 100644</span></span><br><span class="line"><span class="comment">--- a/root/manifests/kube-apiserver.yaml</span></span><br><span class="line"><span class="comment">+++ b/root/token-api-server.yaml</span></span><br><span class="line"><span class="meta">@@ -37,6 +37,7 @@</span> spec:</span><br><span class="line">     - --service-cluster-ip-range=10.96.0.0/12</span><br><span class="line">     - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span><br><span class="line">     - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span><br><span class="line"><span class="addition">+    - --token-auth-file=/etc/kubernetes/tokens.csv</span></span><br><span class="line">     image: k8s.gcr.io/kube-apiserver:v1.17.4</span><br><span class="line">     imagePullPolicy: IfNotPresent</span><br><span class="line">     livenessProbe:</span><br><span class="line"><span class="meta">@@ -71,6 +72,9 @@</span> spec:</span><br><span class="line">     - mountPath: /usr/share/ca-certificates</span><br><span class="line">       name: usr-share-ca-certificates</span><br><span class="line">       readOnly: true</span><br><span class="line"><span class="addition">+    - mountPath: /etc/kubernetes/tokens.csv</span></span><br><span class="line"><span class="addition">+      name: user-tokens</span></span><br><span class="line"><span class="addition">+      readOnly: true</span></span><br><span class="line">   hostNetwork: true</span><br><span class="line">   priorityClassName: system-cluster-critical</span><br><span class="line">   volumes:</span><br><span class="line"><span class="meta">@@ -98,4 +102,8 @@</span> spec:</span><br><span class="line">       path: /usr/share/ca-certificates</span><br><span class="line">       type: DirectoryOrCreate</span><br><span class="line">     name: usr-share-ca-certificates</span><br><span class="line"><span class="addition">+  - hostPath:</span></span><br><span class="line"><span class="addition">+      path: /etc/kubernetes/tokens.csv</span></span><br><span class="line"><span class="addition">+      type: FileOrCreate</span></span><br><span class="line"><span class="addition">+    name: user-tokens</span></span><br><span class="line"> status: &#123;&#125;</span><br></pre></td></tr></table></figure><p>上述修改內容的重點為</p><ul><li>將 master node 上的 user token 設定檔 mount 至 API server 的 container 內</li><li>設定 API server 去使用此 token 檔案</li></ul><h3 id="User-Token-File-後續維護"><a href="#User-Token-File-後續維護" class="headerlink" title="User Token File 後續維護"></a>User Token File 後續維護</h3><p>若之後需要修改 user token file，因為一些<a href="https://github.com/kubernetes/kubernetes/issues/44713">上游的限制</a>，API server pod 無法觀測到檔案的修改，即使 kill pod 再重啟也無法使用新的 token file。</p><p>不過我們可以透過修改 API server 描述檔的方式，穩定地重新部屬 API server，讓新的 token file 生效。</p><ul><li>編輯 <code>/etc/kubernetes/tokens.csv</code></li><li>修改 API server 描述檔 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code><ul><li>加入或修改 <code>metadata.annotations.lastModify</code> 欄位，填入合適字串</li></ul></li><li>修改後 kubelet 會偵測到檔案異動，並重新 apply <code>apiserver</code> pod</li></ul><h3 id="User-kubeconfig-設定"><a href="#User-kubeconfig-設定" class="headerlink" title="User kubeconfig 設定"></a>User kubeconfig 設定</h3><p>使用 <code>kubectl</code> 設定 user token</p><p><code>kubectl config set-credentials &lt;user-name&gt; --token=&lt;token&gt;</code></p><p>或是直接修改 kubeconfig 內的 user object</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alice</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">token:</span> <span class="string">fc27911e-73dd-46b0-8c57-86f2fe5fdd21</span></span><br></pre></td></tr></table></figure><h2 id="Log-設定"><a href="#Log-設定" class="headerlink" title="Log 設定"></a>Log 設定</h2><p>當各個使用者操作 K8s 的身分確實有被切分開之後，即可進行後續的 audit log 設定動作。</p><p>Audit log 必須在吻合事先設定的 match rule 才會被記錄下來。根據 <a href="https://kubernetes.io/docs/tasks/debug-application-cluster/audit/">Auditing 文件</a> 說明，server 在判斷每個事件的 log level 時，是採取 first match 的規則進行。第一個吻合的規則會決定此事件是否紀錄以及紀錄的詳細程度。</p><blockquote><p>The first matching rule sets the “audit level” of the event.</p></blockquote><h3 id="API-Server-Audit-設定"><a href="#API-Server-Audit-設定" class="headerlink" title="API Server Audit 設定"></a>API Server Audit 設定</h3><p>在 master node 上設定 audit policy <code>/etc/kubernetes/audit-policy.yaml</code> (路徑可自行調整)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">audit.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Policy</span></span><br><span class="line"><span class="attr">omitStages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;RequestReceived&quot;</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Metadata</span></span><br><span class="line">  <span class="attr">userGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;developer&quot;</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;deletecollection&quot;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Metadata</span></span><br><span class="line">  <span class="attr">userGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;developer&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;secrets&quot;</span>, <span class="string">&quot;configmaps&quot;</span>]</span><br></pre></td></tr></table></figure><p>此設定有幾個重點</p><ul><li>global 的 <em>omitStages</em> 設定<ul><li>所有 API request 都會經過 <em>RequestReceived</em> stage</li><li>省略此 stage 可以避免所有的 request 都產生兩筆 log</li></ul></li><li>Rule 以 <em>userGroups</em> 進行篩選<ul><li>若已知要紀錄的 user group 範圍，明定 group 可避免記錄到大量的 K8s 自身維護的事件</li></ul></li><li>設定動詞範圍記錄所有的 modify 操作</li><li>設定敏感的 resource 種類 (e.g. secrets &amp; configmaps) 記錄所有操作</li></ul><p>接著修改 API server 的 static pod 描述 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>。<code>audit</code> hostPath volume 需與前述設定對齊</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/root/token-api-server.yaml b/root/audit-token-api-server.yaml</span></span><br><span class="line"><span class="comment">index d4511ae..0e07f7f 100644</span></span><br><span class="line"><span class="comment">--- a/root/token-api-server.yaml</span></span><br><span class="line"><span class="comment">+++ b/root/audit-token-api-server.yaml</span></span><br><span class="line"><span class="meta">@@ -38,6 +38,10 @@</span> spec:</span><br><span class="line">     - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span><br><span class="line">     - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span><br><span class="line">     - --token-auth-file=/etc/kubernetes/tokens.csv</span><br><span class="line"><span class="addition">+    - --audit-policy-file=/etc/kubernetes/audit-policy.yaml</span></span><br><span class="line"><span class="addition">+    - --audit-log-path=/var/log/kubernetes/audit.log</span></span><br><span class="line"><span class="addition">+    - --audit-log-maxsize=1</span></span><br><span class="line"><span class="addition">+    - --audit-log-maxbackup=6</span></span><br><span class="line">     image: k8s.gcr.io/kube-apiserver:v1.17.4</span><br><span class="line">     imagePullPolicy: IfNotPresent</span><br><span class="line">     livenessProbe:</span><br><span class="line"><span class="meta">@@ -75,6 +79,12 @@</span> spec:</span><br><span class="line">     - mountPath: /etc/kubernetes/tokens.csv</span><br><span class="line">       name: user-tokens</span><br><span class="line">       readOnly: true</span><br><span class="line"><span class="addition">+    - mountPath: /etc/kubernetes/audit-policy.yaml</span></span><br><span class="line"><span class="addition">+      name: audit</span></span><br><span class="line"><span class="addition">+      readOnly: true</span></span><br><span class="line"><span class="addition">+    - mountPath: /var/log/kubernetes</span></span><br><span class="line"><span class="addition">+      name: audit-log</span></span><br><span class="line"><span class="addition">+      readOnly: false</span></span><br><span class="line">   hostNetwork: true</span><br><span class="line">   priorityClassName: system-cluster-critical</span><br><span class="line">   volumes:</span><br><span class="line"><span class="meta">@@ -106,4 +116,12 @@</span> spec:</span><br><span class="line">       path: /etc/kubernetes/tokens.csv</span><br><span class="line">       type: FileOrCreate</span><br><span class="line">     name: user-tokens</span><br><span class="line"><span class="addition">+  - name: audit</span></span><br><span class="line"><span class="addition">+    hostPath:</span></span><br><span class="line"><span class="addition">+      path: /etc/kubernetes/audit-policy.yaml</span></span><br><span class="line"><span class="addition">+      type: File</span></span><br><span class="line"><span class="addition">+  - name: audit-log</span></span><br><span class="line"><span class="addition">+    hostPath:</span></span><br><span class="line"><span class="addition">+      path: /var/log/kubernetes</span></span><br><span class="line"><span class="addition">+      type: DirectoryOrCreate</span></span><br><span class="line"> status: &#123;&#125;</span><br></pre></td></tr></table></figure><p>Note: 開 <code>/var/log/kubernetes</code> 資料夾而非單一 log 檔案，是為了避免 log rotate 時因權限不足無法正確 rotate</p><p>設定完之後即可在 master node 的 <code>/var/log/kubernetes</code> 看到 access log</p><p>Sample 如下</p><p>command: <code>kubectl apply -f services/tasks/redis-cluster-proxy.yml</code></p><p>log: (Log 檔內會寫成一行，beautify 後如下)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;kind&quot;</span>:<span class="string">&quot;Event&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;apiVersion&quot;</span>:<span class="string">&quot;audit.k8s.io/v1&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;level&quot;</span>:<span class="string">&quot;Metadata&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;auditID&quot;</span>:<span class="string">&quot;f09f32f4-a93f-41ee-b2b9-2f3acf3aa963&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;stage&quot;</span>:<span class="string">&quot;ResponseComplete&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;requestURI&quot;</span>:<span class="string">&quot;/api/v1/namespaces/alice/services&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;verb&quot;</span>:<span class="string">&quot;create&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;user&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;username&quot;</span>:<span class="string">&quot;alice&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;uid&quot;</span>:<span class="string">&quot;alice@example.com&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;groups&quot;</span>:[</span><br><span class="line">         <span class="string">&quot;developer&quot;</span>,</span><br><span class="line">         <span class="string">&quot;system:authenticated&quot;</span></span><br><span class="line">      ]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;sourceIPs&quot;</span>:[</span><br><span class="line">      <span class="string">&quot;10.300.400.512&quot;</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">&quot;userAgent&quot;</span>:<span class="string">&quot;kubectl/v1.18.2 (linux/amd64) kubernetes/52c56ce&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;objectRef&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;resource&quot;</span>:<span class="string">&quot;services&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;namespace&quot;</span>:<span class="string">&quot;alice&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;redis-cluster-proxy&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;apiVersion&quot;</span>:<span class="string">&quot;v1&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;responseStatus&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span>:&#123;&#125;,</span><br><span class="line">      <span class="attr">&quot;code&quot;</span>:<span class="number">201</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;requestReceivedTimestamp&quot;</span>:<span class="string">&quot;2020-10-21T12:27:30.252440Z&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;stageTimestamp&quot;</span>:<span class="string">&quot;2020-10-21T12:27:30.272401Z&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;annotations&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;authorization.k8s.io/decision&quot;</span>:<span class="string">&quot;allow&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;authorization.k8s.io/reason&quot;</span>:<span class="string">&quot;RBAC: allowed by RoleBinding \&quot;super-user-role-binding-alice/alice\&quot; of Role \&quot;super-user\&quot; to User \&quot;alice\&quot;&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="疑難排解"><a href="#疑難排解" class="headerlink" title="疑難排解"></a>疑難排解</h2><h3 id="設定檔位置"><a href="#設定檔位置" class="headerlink" title="設定檔位置"></a>設定檔位置</h3><p>kubelet Static Pod 設定資料夾不一定在 <code>/etc/kubernetes/manifests</code> 位置，須從 <code>kubelet</code> 啟動設定中的 <code>staticPodPath</code> 欄位找到真實位置。</p><h3 id="備份設定檔"><a href="#備份設定檔" class="headerlink" title="備份設定檔"></a>備份設定檔</h3><p>若要備份 static pod 設定資料夾內的任何檔案，不能備份在相同資料夾內，否則會導致 <code>kubelet</code> 行為怪異。</p><h3 id="Reload-K8s-API-server-設定"><a href="#Reload-K8s-API-server-設定" class="headerlink" title="Reload K8s API server 設定"></a>Reload K8s API server 設定</h3><p><code>kubelet</code> service 一般會自動偵測 static pod 資料夾內的檔案異動，並重新佈署該 pod，但偶爾還是會碰上意外..</p><p>發生意外時，以下方式可能可以回到正常狀態</p><ul><li>刪除對應的 pod, e.g. <code>kubectl delete -n kube-system pod kube-apiserver-&lt;cluster name&gt;</code><ul><li>刪除後 <code>kubelet</code> 會馬上重新佈署一個新的 API server</li><li><code>Controlled By:  Node/k8s-master</code>: 意味者此 pod 不是由 deployment 等 K8s object 控制，是直接由 master node 控制</li></ul></li><li>或是重啟 <code>kubelet</code> systemd service</li></ul><h2 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h2><p>此篇筆記紀錄 static token 的身分驗證機制，但若有企業規模的身分驗證需求時，這顯然不是個好方法。</p><p>Kubernetes 也有原生支援 OpenID 的身分驗證方式來應付更進一步的需求，不過這部分就等未來有空再來研究了。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">Authenticating | Kubernetes</a></li><li><a href="https://stackoverflow.com/questions/51666507/how-can-kube-apiserver-be-restarted">kubernetes - How can kube-apiserver be restarted? - Stack Overflow</a></li><li><a href="https://kubernetes.io/docs/tasks/debug-application-cluster/audit/">Auditing | Kubernetes</a></li><li><a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/">Authorization Overview | Kubernetes</a></li><li><a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/">kube-apiserver | Kubernetes</a></li><li><a href="https://github.com/kubernetes/kubernetes/issues/70664">kube-apiserver audit log rotation throwing permission denied · Issue #70664 · kubernetes/kubernetes</a></li></ul><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>Request Stages:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> +-----------------+</span><br><span class="line"> | RequestReceived +----+</span><br><span class="line"> +---+-------------+    |</span><br><span class="line">     |                  |</span><br><span class="line">     |       +----------v------+</span><br><span class="line">     |       | ResponseStarted |</span><br><span class="line">     |       +----------+------+</span><br><span class="line">     |                  |             +-------+</span><br><span class="line">     |                  |             | Panic |</span><br><span class="line">+----v------------+     |             +-------+</span><br><span class="line">| ResponseComplete&lt;-----+</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在公司的工作環境中，有些業務需要部屬服務在 Kubernetes (下稱 K8s) 上。
因此在專案早期，部門內的同事自架了 K8s cluster 來開發。&lt;/p&gt;
&lt;p&gt;隨著時間流逝，各個 RD 開始上手 K8s 操作後，每天都有人在對 K8s 的 master 開發</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.bitisle.net/tags/kubernetes/"/>
    
    <category term="log" scheme="https://blog.bitisle.net/tags/log/"/>
    
    <category term="authentication" scheme="https://blog.bitisle.net/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu Server 上自動啟用 SSH Agent</title>
    <link href="https://blog.bitisle.net/2020/04/04/run-ssh-agent-ubuntu-server.html"/>
    <id>https://blog.bitisle.net/2020/04/04/run-ssh-agent-ubuntu-server.html</id>
    <published>2020-04-04T00:00:00.000Z</published>
    <updated>2020-04-04T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>當 我們的 SSH private key 有上 pass phrase 保護時，SSH agent 是個方便的好東西。因為它可以幫我們記住已經解鎖過的 private key。</p><p>可惜的是，Ubuntu server 18.04 的環境預設並不會幫你生一個 SSH agent 出來。</p><p>本文章記錄一點摸索的過程…</p><h2 id="系統自帶的-SSH-agent-systemd-unit"><a href="#系統自帶的-SSH-agent-systemd-unit" class="headerlink" title="系統自帶的 SSH agent systemd unit"></a>系統自帶的 SSH agent systemd unit</h2><blockquote><p>我看別人的 Ubuntu 登入之後就有 SSH agent 可以用啊？</p></blockquote><p>很可惜的是我的環境沒有。研究一陣子之後，發現 SSH agent 應是在有圖形介面的情況下才會被自動帶起。</p><p>在 <code>dpkg --listfiles openssh-client</code> 下可看到幾個重要的檔案</p><ul><li><code>/usr/lib/openssh/launch-agent</code></li><li><code>/usr/lib/systemd/user/ssh-agent.service</code></li><li><code>/usr/lib/systemd/user/graphical-session-pre.target.wants/ssh-agent.service</code></li></ul><p>看了這幾個檔案的內容後可得知</p><ol><li>這是設計給圖形介面的登入 session 使用的 service</li><li>即使想要直接 enable <code>ssh-agent.service</code> 也無法，因為裡面沒有寫任何的 <code>[Install]</code> 參數</li></ol><h2 id="自行撰寫並啟用一個-SSH-agent-服務"><a href="#自行撰寫並啟用一個-SSH-agent-服務" class="headerlink" title="自行撰寫並啟用一個 SSH agent 服務"></a>自行撰寫並啟用一個 SSH agent 服務</h2><p>為了解決沒有 SSH agent 的問題，我們可以自己寫一個 systemd 的 user service，讓系統在發現我登入之後，自動幫我把 SSH agent 拉起來。</p><p>首先編輯 <code>~/.local/share/systemd/user/ssh-agent.service</code> (參考 <code>man systemd.unit</code> 此為預設的 user unit 路徑)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=SSH authentication agent</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/ssh-agent -a %t/ssh-agent.socket -D</span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=default.target</span><br></pre></td></tr></table></figure><p>注意 <code>ssh-agent</code> 的 <code>-D</code> 參數與 <code>Type=simple</code> 設定。</p><p>接著執行 <code>systemctl --user enable ssh-agent.service</code>。這一步會在 <code>.config/systemd/user/default.target.wants</code> 資料夾下創出一個 symbolic link，連回剛剛我們寫的 service file，表示要在登入時自動啟用此 unit。</p><p>接著重新登入該機器，應該就可以看到一個 <code>ssh-agent</code> process 跑起來了。</p><h2 id="設定-SSH-agent-所需的的環境變數"><a href="#設定-SSH-agent-所需的的環境變數" class="headerlink" title="設定 SSH agent 所需的的環境變數"></a>設定 SSH agent 所需的的環境變數</h2><p>雖然 SSH agent 起來了，但此時若下 <code>ssh-add -L</code> 依然會發現無法連上 SSH agent。</p><blockquote><p>Could not open a connection to your authentication agent.</p></blockquote><p>這是因為 <code>ssh</code> 以及 <code>ssh-add</code> 等工具預設都是看 <code>SSH_AUTH_SOCK</code> 環境變數來得知要透過哪個 Unix socket 與 agent 溝通。</p><p>為了處理此問題，我們需在 <code>~/.profile</code> 內加入一行環境變數設定，確保在登入時能自動設定完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export SSH_AUTH_SOCK=&quot;$XDG_RUNTIME_DIR/ssh-agent.socket&quot;</span><br></pre></td></tr></table></figure><p>註: <code>$XDG_RUNTIME_DIR/ssh-agent.socket</code> 與前述 unit file 內的 <code>-a %t/ssh-agent.socket</code> 對應。詳細可參考 <code>man systemd.unit</code></p><p>下次登入重新讀取 profile 之後即可正常使用 SSH agent 囉。 :D</p><h2 id="Alternative-Solution"><a href="#Alternative-Solution" class="headerlink" title="Alternative Solution"></a>Alternative Solution</h2><p>尋找解決方式的過程中，注意到了一些解法，透過純 shell script 的方式處理重複登入的問題</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SSH_ENV=<span class="string">&quot;<span class="variable">$HOME</span>/.ssh/environment&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> start_agent &#123;</span><br><span class="line">    /usr/bin/ssh-agent | sed <span class="string">&#x27;s/^echo/#echo/&#x27;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span></span><br><span class="line">    chmod 600 <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span></span><br><span class="line">    . <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span> &gt; /dev/null</span><br><span class="line">    /usr/bin/ssh-add;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    . <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span> &gt; /dev/null</span><br><span class="line">    ps -ef | grep <span class="variable">$&#123;SSH_AGENT_PID&#125;</span> | grep ssh-agent$ &gt; /dev/null || &#123;</span><br><span class="line">        start_agent;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    start_agent;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>Ref: <a href="https://stackoverflow.com/questions/18880024/start-ssh-agent-on-login/18915067#18915067">https://stackoverflow.com/questions/18880024/start-ssh-agent-on-login/18915067#18915067</a></li></ul><p>若不考慮 race condition，該作法其實也很值得參考。可以在沒有 systemd 輔助的的生態系底下使用。</p><h2 id="雜談"><a href="#雜談" class="headerlink" title="雜談"></a>雜談</h2><p>看 systemd 的文件時，發現 systemd 的 user mode 會非常遵守 <code>XDG_</code> 系列的環境變數。不過因為我們是在 Ubuntu server edition 下，所以大部分都略過不看。 :D</p><p>但 <code>XDG_RUNTIME_DIR</code> 這個變數除外，此變數雖然也是由<a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG Base Directory Specification</a>所規範，但在一般 Linux 發行版，此變數是由 <code>pam_systemd</code> 直接維護的。所以即使是在 server環境也會有此變數存在。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html">systemd.unit</a></li><li><a href="https://askubuntu.com/questions/872792/what-is-xdg-runtime-dir">command line - What is XDG_RUNTIME_DIR? - Ask Ubuntu</a></li><li><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG Base Directory Specification</a></li><li><a href="https://gist.github.com/magnetikonline/b6255da90606fe9c5c25d3333c98c90d">Add user ssh-agent as daemon to Ubuntu 18.04LTS server.</a></li><li><a href="https://stackoverflow.com/questions/18880024/start-ssh-agent-on-login">git - Start ssh-agent on login - Stack Overflow</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;當 我們的 SSH private key 有上 pass phrase 保護時，
SSH agent 是個方便的好東西。因為它可以幫我們記住已經解鎖過的 private key。&lt;/p&gt;
&lt;p&gt;可惜的是，Ubuntu server 18.04 的環境預設並不會幫你生一個 </summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="authentication" scheme="https://blog.bitisle.net/tags/authentication/"/>
    
    <category term="ssh" scheme="https://blog.bitisle.net/tags/ssh/"/>
    
    <category term="systemd" scheme="https://blog.bitisle.net/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>在 macOS 上架設 Apache 與 PHP-FPM</title>
    <link href="https://blog.bitisle.net/2019/11/09/run-apache-and-php-fpm-in-macos.html"/>
    <id>https://blog.bitisle.net/2019/11/09/run-apache-and-php-fpm-in-macos.html</id>
    <published>2019-11-09T00:00:00.000Z</published>
    <updated>2019-11-09T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作上因為一些特殊需求，需要在 macOS 環境下架設 Apache + PHP-FPM的使用環境。好在 macOS 本來就有預裝 Apache 以及 PHP-FPM，並提供 Apache 的 <code>launchd</code> 設定檔，要在 macOS 上架設這個服務並不困難。</p><p>本文介紹如何以最低限度的設定，在 macOS 上跑 Apache + PHP-FPM。以筆記的方式呈現，不會有太多的講解。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul><li>筆者是在 macOS 10.14 與 10.15 上測試此流程</li><li>macOS 系統上，<code>/etc</code> 是一個 symblic link 連至 <code>/private/etc</code>，<code>/var</code>, <code>/tmp</code> 也有相同行為。</li></ul><h2 id="設定與啟用-PHP-FPM"><a href="#設定與啟用-PHP-FPM" class="headerlink" title="設定與啟用 PHP-FPM"></a>設定與啟用 PHP-FPM</h2><h3 id="複製並修改-PHP-FPM-設定檔"><a href="#複製並修改-PHP-FPM-設定檔" class="headerlink" title="複製並修改 PHP-FPM 設定檔"></a>複製並修改 PHP-FPM 設定檔</h3><p>系統內有會自帶 PHP-FPM 的 default 設定檔，將其複製一份出來，並修改內容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp /etc/php-fpm.conf.default /etc/php-fpm.conf</span><br><span class="line">$ sudo cp /etc/php-fpm.d/www.conf.default /etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><p>將執行身分從 <code>nobody</code> 修改為 <code>_www</code> (與 Apache httpd一致)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; Unix user/group of processes</span><br><span class="line">; Note: The user is mandatory. If the group is not set, the default user&#x27;s group</span><br><span class="line">;       will be used.</span><br><span class="line">user = _www</span><br><span class="line">group = _www</span><br></pre></td></tr></table></figure><p>修改 <code>error_log</code>，調整 log file 的路徑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/php-fpm.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">; Error log file</span><br><span class="line">; If it&#x27;s set to &quot;syslog&quot;, log is sent to syslogd instead of being written</span><br><span class="line">; into a local file.</span><br><span class="line">; Note: the default prefix is /usr/var</span><br><span class="line">; Default Value: log/php-fpm.log</span><br><span class="line">error_log = /var/log/php-fpm.log</span><br></pre></td></tr></table></figure><h3 id="新增-PHP-FPM-的-launchd-設定檔並啟用"><a href="#新增-PHP-FPM-的-launchd-設定檔並啟用" class="headerlink" title="新增 PHP-FPM 的 launchd 設定檔並啟用"></a>新增 PHP-FPM 的 launchd 設定檔並啟用</h3><p>創一個 launchd daemon 設定檔給 PHP-FPM 使用，此舉目的為讓 PHP-FPM daemon 可以在 macOS 開機時自己啟用。</p><p>建議將設定檔放在 <code>/Library/LaunchDaemons</code> 下，參照 launchd 的文件，此位置是供第三方軟體擺放 daemon 設定使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /Library/LaunchDaemons/com.example.php-fpm.plist</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="meta-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.example.php-fpm<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/sbin/php-fpm<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>--nodaemonize<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>OnDemand<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>做好設定檔之後，用 <code>launchctl</code> 指令 load 此設定檔，並下參數告訴 macOS之後此 daemon 要在開機時預設啟用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo launchctl load -w /Library/LaunchDaemons/com.example.php-fpm.plist</span><br></pre></td></tr></table></figure><p>上述指令執行完後， launchd 會把 PHP-FPM daemon 叫起。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep php</span><br><span class="line">_www              515   0.0  0.0  4297608    648   ??  S     6:18PM   0:00.00 /usr/sbin/php-fpm</span><br><span class="line">_www              514   0.0  0.0  4305800    628   ??  S     6:18PM   0:00.00 /usr/sbin/php-fpm</span><br><span class="line">root              513   0.0  0.0  4305800    784   ??  Ss    6:18PM   0:00.00 /usr/sbin/php-fpm</span><br></pre></td></tr></table></figure><h2 id="設定並啟用-Apache-Web-Server"><a href="#設定並啟用-Apache-Web-Server" class="headerlink" title="設定並啟用 Apache Web Server"></a>設定並啟用 Apache Web Server</h2><p>修改設定檔，讓 Apache 使用 <code>proxy_module</code> 與 <code>proxy_fcgi_module</code>，並確認 <code>php7_module</code> 沒被啟用。</p><p>需要本文的讀者應該不至於把 Apache PHP module 與 PHP-FPM 搞混.. XD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/apache2/httpd.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LoadModule proxy_module libexec/apache2/mod_proxy.so</span><br><span class="line">LoadModule proxy_fcgi_module libexec/apache2/mod_proxy_fcgi.so</span><br><span class="line"># LoadModule php7_module libexec/apache2/libphp7.so</span><br></pre></td></tr></table></figure><p>在 <code>&lt;Directory &quot;/Library/WebServer/Documents&quot;&gt;</code> 或其他需要的地方內，加入 PHP 的 handler，指向 PHP-FPM 預設提供服務的 socket。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory</span> &quot;/<span class="attr">Library</span>/<span class="attr">WebServer</span>/<span class="attr">Documents</span>&quot;&gt;</span></span><br><span class="line">... 上略</span><br><span class="line">    <span class="tag">&lt;<span class="name">FilesMatch</span> \<span class="attr">.php</span>$&gt;</span></span><br><span class="line">        SetHandler &quot;proxy:fcgi://localhost:9000/&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">FilesMatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Apache 的 daemon config 本來就存在於系統目錄內，但 Disable 的值被設為 true，用下述 command 將 Apache daemon load 進 launchd 內，並讓 launchd 記錄此 daemon 應被啟用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist</span><br></pre></td></tr></table></figure><p>與 PHP-FPM 相同，此指令下去之後，launchd 就會把 Apache 拉起。</p><p>此時可去 http://localhost/ 確認，如果看到大大的標題寫著</p><blockquote><p>It works!</p></blockquote><p>即代表 Apache 有順利執行。</p><h2 id="確認-PHP-FPM-運作正常"><a href="#確認-PHP-FPM-運作正常" class="headerlink" title="確認 PHP-FPM 運作正常"></a>確認 PHP-FPM 運作正常</h2><p>丟一個 <code>phpinfo</code> 到 web server 的預設根目錄下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /Library/WebServer/Documents/phpinfo.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>之後連上 http://localhost/phpinfo.php ，看到 <code>Server API</code> 為<code>FPM/FastCGI</code> 即可。 :D</p><h2 id="Useful-Links"><a href="#Useful-Links" class="headerlink" title="Useful Links"></a>Useful Links</h2><ul><li><a href="https://www.launchd.info/">A launchd Tutorial</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工作上因為一些特殊需求，需要在 macOS 環境下架設 Apache + PHP-FPM
的使用環境。好在 macOS 本來就有預裝 Apache 以及 PHP-FPM，並提供 Apache 的 &lt;code&gt;launchd&lt;/code&gt; 設定檔，要在 macOS 上架設這個</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="security" scheme="https://blog.bitisle.net/tags/security/"/>
    
    <category term="github" scheme="https://blog.bitisle.net/tags/github/"/>
    
    <category term="fido" scheme="https://blog.bitisle.net/tags/fido/"/>
    
  </entry>
  
  <entry>
    <title>關於電子報一鍵退訂</title>
    <link href="https://blog.bitisle.net/2019/08/31/email-one-click-unsubscribe.html"/>
    <id>https://blog.bitisle.net/2019/08/31/email-one-click-unsubscribe.html</id>
    <published>2019-08-31T00:00:00.000Z</published>
    <updated>2019-08-31T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前先日子在 Gmail 內整理信件時，赫然注意到了一件事情：</p><p>某些訂閱來的電子報，在寄件者名字的右邊有個退訂的文字可以按！但讓我訝異的其實不只是這個退訂文字..  按下退訂文字後，Gmail 會彈出一個視窗給我，裡頭會問我是不是確定要退訂此電子報，以及一個藍色的退訂按鈕。 神奇的是，當我按下這個按鈕後，Gmail 直接告訴我，你已經退訂了此電子報！ “You unsubscribed from xxxxxx..”</p><p><img src="/assets/images/6f64025c-3482-48f7-a029-e459061a200f.png"></p><p><img src="/assets/images/d068304f-8a52-49cd-ab90-9c1a9e2b2624.png"></p><p>某人: 奇怪… 一般不是會連到某個電子報寄送方的頁面，然後讓我點個確認之類的嗎？</p><p>既然 Gmail 有辦法在不離開 web mail 介面的情況下，幫我完成退訂的動作，那大概是有某種標準程序，可以讓 mail 供應商自動化的幫我處理吧？ 於是乎，本著實事求是的精神，就有了今天這篇文章。</p><h2 id="工程師的直覺"><a href="#工程師的直覺" class="headerlink" title="工程師的直覺"></a>工程師的直覺</h2><p>注意到有這個退訂按鈕可以按之後，我就開始一封信一封信看，有退訂按鈕的都來給他點看看，看會發生什麼事。但我很快地就注意到… 並不是每個有按鈕可按的 Gmail，都可以直接幫我完成退訂。 像是 Linkin 和 Google Map 寄來的信，都是會幫你打開某連結，讓你到該頁面去做後續處理。</p><p><img src="/assets/images/e1bc655c-5396-4651-86d1-b7275e90b131.png"></p><p>但不管如何，既然 Gmail 可以幫我把這個連結取出來，大概是有某種標準的 mail header 來記錄這些資訊吧？把 Linkin 那封原始信件點開來一看，發現了這個東西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List-Unsubscribe: &lt;https://www.linkedin.com/e/v2?e=6f948d7f&amp;t=ad69-4827&amp;...&gt;</span><br></pre></td></tr></table></figure><p>再把這個 <code>List-Unsubscribe</code> 拿去查，就找到一篇 RFC 了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Network Working Group                                      G. Neufeld</span><br><span class="line">Request for Comments: 2369                                      Nisto</span><br><span class="line">Category: Standards Track                                     J. Baer</span><br><span class="line">                                                 SkyWeyr Technologies</span><br><span class="line">                                                            July 1998</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        The Use of URLs as Meta-Syntax for Core Mail List Commands</span><br><span class="line">            and their Transport through Message Header Fields</span><br></pre></td></tr></table></figure><p>RFC 2369 “The Use of URLs as Meta-Syntax for Core Mail List Commands”。仔細一讀後發現，以前的人為了用 mail 標準化 mail list 的各種處理動作，還下了不少苦心。 XD  光是這份 RFC 內有提到的部分 header 就有:</p><ul><li><code>List-Help</code>: 所有和此 mail list 相關的資訊都從這邊取得</li><li><code>List-Unsubscribe</code>: 使用者快速退訂的方式</li><li><code>List-Subscribe</code>: 使用者快速訂閱的方式</li><li><code>List-Post</code>: 使用者發表文章至此 mail list 的方式</li></ul><p>其中的 <code>List-Unsubscribe</code> 就是我們要的東西。參照 RFC 說明，這個 header 內可以放 HTTP 的連結或 <code>mailto</code> 的連結。這樣看起來，如果是 HTTP 連結，Gmail 就會幫我們連上該頁面。而那些沒有額外跳出頁面的，大概就是 Gmail 直接幫我們寄退訂信件了吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List-Unsubscribe: &lt;http://www.host.com/list.cgi?cmd=unsub&amp;lst=list&gt;,</span><br><span class="line">    &lt;mailto:list-request@host.com?subject=unsubscribe&gt;</span><br></pre></td></tr></table></figure><h3 id="開始驗證"><a href="#開始驗證" class="headerlink" title="開始驗證"></a>開始驗證</h3><p>為了確認上面的猜想，我又點了封有退訂按鈕且不會跳出額外頁面的信件。這次的實驗對象是 The Hacker News。在點擊退訂之後，在我的寄件信箱內找到 Gmail 自動幫我產生的信件，Gmail 不只有幫我寄這封信，連信件主旨和內文都幫我填好好的。 XD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按下退訂後，我寄出的信 (省略部分 header)</span><br><span class="line">To: f081fcde-0c7e-4617-afaf-c0c35eeea170@unsubscribe.netline.com</span><br><span class="line">Subject: Unsubscribe</span><br><span class="line">Content-Disposition: inline</span><br><span class="line"></span><br><span class="line">$You will be unsubscribed from this list within ten days of sending this reply</span><br></pre></td></tr></table></figure><p>在回去看一下原本納封電子報的原始信件，果然在 header 內找到這對應的 <code>List-Unsubscribe</code> <code>mailto</code> 連結，且信件主旨和信件內文和這個連結後方帶的資訊完全吻合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The Hacker News 信件的 List-Unsubscribe header</span><br><span class="line">List-Unsubscribe: &lt;mailto:f081fcde-0c7e-4617-afaf-c0c35eeea170@unsubscribe.netline.com?subject=Unsubscribe&amp;body=$You%20will%20be%20unsubscribed%20from%20this%20list%20within%20ten%20days%20of%20sending%20this%20reply&gt;</span><br></pre></td></tr></table></figure><p>看到這裡，似乎是真相大白了。參與制定 RFC 的人們真偉大！趴機趴機趴機！</p><p>用 HTTP(S) 連結做退訂的會開一個 HTTP Get 請求，讓使用者到某頁面按退訂；而那些用 <code>mailto</code> 連結的，mail agent 可以幫我自動寄出退訂信件，於是達成一鍵退訂的功能！</p><p>不過… 我剛剛好像也一鍵退訂了 Pinkoi 的電子報，但好像沒有看到自動寄出的信件？</p><h2 id="案外案-RFC-8058"><a href="#案外案-RFC-8058" class="headerlink" title="案外案: RFC 8058"></a>案外案: RFC 8058</h2><p>原本以為該懂得都懂了，一切就是那麼的單純，都在我的掌握之中。直到我注意到 Pinkoi 的電子報 (X</p><p>在實驗的過程中，Pinkoi 也像 The Hacker News 一樣，可以在 mail 介面中直接完成退訂。但不一樣的是，mail 系統沒有自動幫我產生並寄出退訂用的信件。 …看來這當中一定還有些我不知道的東西！</p><p>有了先前的經驗，這次很快地把 Pinkoi 電子報的原始信件打開來看，並直接搜尋 <strong>unsubscribe</strong> 字眼。一搜不得了，看到了一個沒在 RFC 2369 中出現的 header: <code>List-Unsubscribe-Post</code> 。拿這個 header 去找 RFC，結果找到了這個東西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Internet Engineering Task Force (IETF)                         J. Levine</span><br><span class="line">Request for Comments: 8058                          Taughannock Networks</span><br><span class="line">Category: Standards Track                                     T. Herkula</span><br><span class="line">ISSN: 2070-1721                                              optivo GmbH</span><br><span class="line">                                                            January 2017</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Signaling One-Click Functionality for List Email Headers</span><br><span class="line"></span><br><span class="line">Abstract</span><br><span class="line"></span><br><span class="line">    This document describes a method for signaling a one-click function</span><br><span class="line">    for the List-Unsubscribe email header field.  The need for this</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>“Signaling One-Click Functionality for List Email Headers”，嗯.. 看來這就是我要的東西了…</p><p>在經過快速地閱讀之後，這個 RFC 的部分動機大概是這樣的</p><blockquote><p>防毒軟體一般會掃過所有在信件內的 HTTP(S) 連結。電子報供應商為了避免防毒軟體不小心幫使用者退訂，通常會把連結做成需要使用者互動的網頁，像是在頁面中放個額外的確認按鈕等。但此作法又會造成信件軟體或信件服務商，無法在取得使用者的同意後，自動化的幫使用者退訂電子報。因此，需要訂出一個標準的方法，讓 HTTPS 的退訂連結也可以達成一鍵退訂。</p></blockquote><p>這動機看起來是很清楚了.. (其實還有部分有關垃圾信的處理問題，這邊就不翻譯了)。不過究竟該怎麼做一鍵退訂呢？</p><p>根據 RFC 8058 的描述，信件若要用 HTTPS 連結做一鍵退訂，至少需要滿足以下幾點:</p><ol><li><code>List-Unsubscribe</code> header 內至少有一 HTTPS 連結</li><li>需要額外有 <code>List-Unsubscribe-Post</code> header，且其值必須為 <code>List-Unsubscribe=One-Click</code></li><li>必須有 DKIM 簽章來驗證上述兩個欄位</li></ol><p>第一點是挺合理的，這個 RFC 是 2017 年出來的，大概不會有人還想推 HTTP 連結了。而第二點的 List-Unsubscribe-Post header，是要告訴 mail 軟體說 “我這個連結可以吃 HTTP POST 請求喔！喔對了記得 POST 過來時內容要帶 List-Unsubscribe=One-Click 喔”。至於第三點，單純是要確保上述兩個 header 是沒有被竄改過的。</p><p>因為有講好 client 應該用 POST 方法去戳這個連結，於是電子報的 server 就可以很清楚的分辨，哪些請求是防毒軟體不小心誤發的，哪些請求是使用者真的想退訂才發的。且因為有清楚的表達意圖，這個 HTTPS POST 請求也不需要回一個要使用者額外互動的頁面，server 可以在收到請求後，直接處理使用者的退訂動作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 假設信件內有以下 header</span><br><span class="line">List-Unsubscribe: &lt;https://example.com/unsubscribe/opaquepart&gt;</span><br><span class="line">List-Unsubscribe-Post: List-Unsubscribe=One-Click</span><br><span class="line"></span><br><span class="line"># 那 mail 軟體(提供商) 可以簡單透過以下 HTTPS POST 幫使用者退訂</span><br><span class="line">POST /unsubscribe/opaquepart HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 26</span><br><span class="line"></span><br><span class="line">List-Unsubscribe=One-Click</span><br></pre></td></tr></table></figure><p>可喜可賀.. 可喜可賀 XDD</p><h3 id="其他軟體的支援性和-Google-的工人智慧"><a href="#其他軟體的支援性和-Google-的工人智慧" class="headerlink" title="其他軟體的支援性和 Google 的工人智慧"></a>其他軟體的支援性和 Google 的工人智慧</h3><p>發現有這個標準後，其實很好奇其他的 web mail 或信件軟體對這些 header 的支援度如何。無奈的是，沒找到比較完整的整理結果，似乎也沒多少人在意這個東西。 XD 不過從<a href="https://litmus.com/blog/the-ultimate-guide-to-list-unsubscribe">唯一一份找到的資料</a>來看，在 iOS Mail, Gmail, Outlook 與 Yahoo Mail 四者中，mailto 的退訂連結都有支援，而 RFC 8058 所定義的一鍵退訂則是只有 Gmail 可以做到。(至少在 2018 年 11 月還是如此)</p><p>另外，我也發現到，即使有些信件完全沒有 <code>List-Unsubscribe</code> header，Gmail 仍然可以生出退訂的按鈕給使用者按，Twitter 的通知信件即是一例。Twitter 的信件 header 內沒有相關的資訊，但 Gmail 可以從信件內文內把退訂的連結 parse 出來。至於這部分是 Google 偉大的工人智慧，還是有一些我還不知道的標準可參考，這我就還沒研究到了。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這篇文章基本上是把某個週末因為三分鐘熱度而去學的東西記錄下來。但過了兩週之後再回來看，其實好像也不是多重要的東西。就算今天我們不知道有這個標準，或是根本沒注意到有這個功能，日子也還是過得很好 (?</p><p>但是.. 小工程師滿足自己的好奇心後，心中所獲得的那種成就感，是無可取代的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前先日子在 Gmail 內整理信件時，赫然注意到了一件事情：&lt;/p&gt;
&lt;p&gt;某些訂閱來的電子報，在寄件者名字的右邊有個退訂的文字可以按！
但</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="email" scheme="https://blog.bitisle.net/tags/email/"/>
    
    <category term="rfc" scheme="https://blog.bitisle.net/tags/rfc/"/>
    
  </entry>
  
  <entry>
    <title>利用 GitHub Page 經營 Blog</title>
    <link href="https://blog.bitisle.net/2019/01/12/github-page-blog-howto.html"/>
    <id>https://blog.bitisle.net/2019/01/12/github-page-blog-howto.html</id>
    <published>2019-01-12T00:00:00.000Z</published>
    <updated>2019-01-12T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果要用一句話來簡單說明 GitHub Page，那基本上就是</p><blockquote><p>指定一個 Git 版本庫來作為存放網站資源的地方，然後讓 GitHub 幫你把網站架起來。</p></blockquote><p>任何人只要申請一個 GitHub 帳號，都可以免費的享有這個服務。</p><p>當然，考量到 GitHub 只是把我們放在版本庫上的檔案，讓別人透過瀏覽器瀏覽，那種需要用到資料庫的可互動網站基本上是很難達成。但若我們只是要經營一個部落格，或是存放專案文件等靜態網站時，GitHub Page就會是個很合適且方便的選擇。</p><p>本文會粗淺的介紹如何利用 GitHub Page 來經營自己的 Blog，以省去自行架設機器的各種煩惱。 :D</p><h2 id="GitHub-Page-的類別"><a href="#GitHub-Page-的類別" class="headerlink" title="GitHub Page 的類別"></a>GitHub Page 的類別</h2><p>目前 GitHub Page 有兩類的站台，一類是 User Page、另一類是 Project Page。(其實還有 Organization Page，但這邊就不花時間贅述) User Page 與 Project Page最主要的差別在於專案名稱的限制，與網站的 URL 格式這兩點。簡單整理如下</p><p>User Page 特點:</p><ul><li>專案名稱須為 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 即為 GitHub 帳號的使用者名稱。</li><li>站台會擺在 <code>http(s)://&lt;username&gt;.github.io</code> 供他人瀏覽</li></ul><p>Project Page 特點:</p><ul><li>專案名稱沒有限制。 若假設專案名稱為 <code>&lt;projectname&gt;</code> 則</li><li>站台會擺在 <code>http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;</code> 供他人瀏覽</li></ul><p>因為專案名稱的限制，一個 GitHub 帳號只能有一個 User Page 但可以有多個 Project Page。</p><p>更詳細的介紹請參考 <a href="https://help.github.com/articles/user-organization-and-project-pages/">官方網站的說明</a></p><h2 id="GitHub-Page-使用方式"><a href="#GitHub-Page-使用方式" class="headerlink" title="GitHub Page 使用方式"></a>GitHub Page 使用方式</h2><p>GitHub Page 的使用方式也可以簡單分成兩種。</p><p>第一種是直接建置好的整個網站直接 push 到 GitHub 上，供使用者瀏覽。若我們需要架一個 Blog，可以先用 Markdown 等 markup language 撰寫文章，之後利用 Jekyll(Ruby)、Hugo(Golang) 或 Hexo(JS) 等靜態網站生成工具，建出一個 Blog 網站並 push 上去。又或我們需要 host 一個專案文件站台時，可以將 Doxygen 或 Sphinx 等工具產生出的網站推上 GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                                    +</span><br><span class="line">          Local Project             |    GitHub Project</span><br><span class="line">                                    |    github.io site</span><br><span class="line">                                    +</span><br><span class="line">+----------+          +--------+         +------+  User</span><br><span class="line">| Markup   |  Build   | Site   |  Push   | Site |  Browse</span><br><span class="line">| config.. | +------&gt; |        | +-----&gt; |      | +-------&gt;</span><br><span class="line">+----------+          +--------+         +------+</span><br></pre></td></tr></table></figure><p>如果我們是使用 Jekyll 來建置我們的網站，那 GitHub Page 有提供我們第二種用法。我們可以將 Markup 和其他 Jekyll 需要的設定檔 push 上 GitHub，讓 GitHub 幫我們建置網站，並在 github.io 網域上放出網站供人瀏覽。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">               +                    +</span><br><span class="line">Local Project  |   GitHub Project   |    github.io site</span><br><span class="line">               |                    |</span><br><span class="line">               +                    +</span><br><span class="line">+----------+        +----------+         +------+  User</span><br><span class="line">| Markup   |  Push  | Markup   |  Build  | Site |  Browse</span><br><span class="line">| config.. | +----&gt; | Config.. | +-----&gt; |      | +-------&gt;</span><br><span class="line">+----------+        +----------+         +------+</span><br></pre></td></tr></table></figure><p>第二個做法的缺點是，GitHub 只支援 Jekyll 這套工具，其他同性質的工具的不支援。但相對來說也有優點，即是我們不須把工具建出的網站內的所有檔案都進到 commit 中。(在 git project 中看到許多無意義 diff 實在不是工程師所樂見的事情 XD)</p><p>針對這兩個方式的更詳細說明，也請見官方文件</p><ul><li><a href="https://help.github.com/articles/about-github-pages-and-jekyll/">使用 Jekyll</a></li><li><a href="https://help.github.com/articles/using-a-static-site-generator-other-than-jekyll/">不使用 Jekyll</a></li></ul><h2 id="簡單的流程說明"><a href="#簡單的流程說明" class="headerlink" title="簡單的流程說明"></a>簡單的流程說明</h2><p>接下來會介紹使用 Jekyll，並讓 GitHub 幫忙 build 與 host 網站的簡單步驟。</p><p>參照 <a href="https://pages.github.com/">官方介紹</a> 的說明，最簡單的方式，其實只需要我們點開 project 的 GitHub 設定頁面，找到 GitHub Page 的設定選項，設定一個Jekyll 使用的主題，並用 Markdown 寫一個首頁文章即可。</p><p>用此方法會在專案內產生首頁的 <code>index.md</code> 檔案及一個 Jekyll 的設定檔 <code>_config.yml</code>。檔案內僅一行你選的主題名稱</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">jekyll-theme-minimal</span></span><br></pre></td></tr></table></figure><p>但基本上，一個 <a href="https://jekyllrb.com/docs/structure/">完整的 Jekyll 專案</a>不會只有這兩個檔案，到最後我們還是得把其他需要的檔案生出來。所以個人推薦使用下述方法建立我們的專案。</p><p>(假設我們已經裝好 Git 和 Jekyll 等工具。)</p><p>建立 Git 專案</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir website &amp;&amp; <span class="built_in">cd</span> website</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>在專案資料夾建立 Jekyll 的 template 檔案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jekyll new .</span><br></pre></td></tr></table></figure><p>此時應該會看到 jekyll 預設產生的檔案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">404.html  about.md  _config.yml  Gemfile  Gemfile.lock  index.md  _posts</span><br></pre></td></tr></table></figure><p>將所有產生的檔案 add 並 commit 起來(要不要略過 <code>Gemfile.lock</code> 看個人需求)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>之後將專案 push 上 GitHub，並至專案設定內啟用 GitHub Page 即可。沒意外的話，大概十秒內就可以在對應的 URL 看到生成好的網站了。</p><p>有關 Jekyll 的安裝說明或其他細部設定，可參考 <a href="https://jekyllrb.com/">官方網站</a>。</p><h2 id="在-GitHub-Page-服務上使用個人客製的網址"><a href="#在-GitHub-Page-服務上使用個人客製的網址" class="headerlink" title="在 GitHub Page 服務上使用個人客製的網址"></a>在 GitHub Page 服務上使用個人客製的網址</h2><p>如果不想使用 <code>&lt;username&gt;.github.io</code> 來提供自己的網站，而是透過自己購買的域名，所需的麻煩差事 GitHub Page 也幫我們做得好了。</p><p>在 GitHub 專案開啟 GitHub Page 功能後，可以看到一個額外的選項 Custom domain，可以填入我們可控制的 DNS hostname。</p><p>假設我們想在 <code>blog.example.com</code> 提供我們的網站，只需要在 DNS 設定中加入一筆<code>CNAME</code>，將 <code>blog.example.com</code> 指向 <code>&lt;username&gt;.github.io</code>。並去 GitHub Page所用的 GitHub 專案設定頁面內，在 Custom domain 欄位內填入 <code>blog.example.com</code> 即可。</p><p>設定完後，即可透過 <code>blog.example.com</code> 瀏覽我們要的網站。同時 GitHub 也會在一天內生出對應的 SSL 憑證，即使透過 <code>blog.example.com</code> 瀏覽，也可以享有 HTTPS protocol 帶來的安全性。 :D</p><h2 id="雜談"><a href="#雜談" class="headerlink" title="雜談"></a>雜談</h2><p>大概從 2018 十月開始，小弟我在與朋友以及公司同事談話後，漸漸有了經營自己 Blog 的想法。</p><p>經歷了數週的拖拉散漫後，終於在 2018 十二月底刷卡買了自己的 domain，並利用GitHub Page 架設好 Blog。但因為一直沒想好要寫什麼文章，於是第一篇就先來寫寫我自己的架站筆記。</p><p>期許自己未來能不斷產出新文章，成為一位散發正面能量的一倍工程師。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果要用一句話來簡單說明 GitHub Page，那基本上就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指定一個 Git 版本庫來作為存放網站資源的地方，然後讓 GitHub 幫你把網站架起來。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;任何人只要申請一個 GitHub 帳</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="github" scheme="https://blog.bitisle.net/tags/github/"/>
    
    <category term="blog" scheme="https://blog.bitisle.net/tags/blog/"/>
    
    <category term="jekyll" scheme="https://blog.bitisle.net/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>Samba 內檔案的異常執行權限</title>
    <link href="https://blog.bitisle.net/2018/04/17/samba-executable-bit.html"/>
    <id>https://blog.bitisle.net/2018/04/17/samba-executable-bit.html</id>
    <published>2018-04-17T00:00:00.000Z</published>
    <updated>2018-04-17T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>許多場合會利用 Samba 來建立給所有工作者共用的 SMB 工作目錄。</p><p>SMB 是 Microsoft 針對 Windows 體系設計的 protocol，但因為種種因素，目前 Mac 及各 Linux 桌面發行版也都有不錯的 SMB client 支援。已 SMB 提供共用的工作目錄，似乎已成為最常見的協同工作方法。</p><p>在另一方面，Samba 是一套基於 Unix 環境開發的開源 SMB server 實作。但因為 Windows 與 Unix 在檔案系統上設計的根本性差別，儘管 Samba 歷史悠久且功能齊全，仍然會有一些先天性的問題。</p><p>為了解釋問題到底從何而來，以下要簡單介紹一下 Windows 與 Unix 的檔案相關特性。</p><h2 id="Windows-File-Attribute-與-Unix-File-Mode"><a href="#Windows-File-Attribute-與-Unix-File-Mode" class="headerlink" title="Windows File Attribute 與 Unix File Mode"></a>Windows File Attribute 與 Unix File Mode</h2><p>傳統上，Windows 系統下的每個檔案都會需要有以下四個屬性:</p><ul><li>Archive: 紀錄此檔案在上次備份後是否更動過。</li><li>Hidden: 紀錄此檔案是否要隱藏。Windows 內建 <code>dir</code> 或檔案總管均會遵從此設定。</li><li>System: 紀錄此檔案是否爲系統檔案。</li><li>Read-only: 紀錄此檔案是否只能讀取。</li></ul><p>Unix 作業系統採取了與 Windows 不同的設計。在 Unix 內，每個檔案紀錄針對檔案擁有者、檔案擁有群組及其他人分別紀錄三組權限</p><ul><li>Readable: 檔案是否可讀取</li><li>Writable： 檔案是否可寫入</li><li>Executable： 檔案是否可執行</li></ul><p>現在我們可以知道，Windows 與 Unix 對於檔案應該紀錄的特性/模式其實有不一樣的要求。許多和檔案系統相關的功能也會用不同的方式來達成。</p><p>比方說，有關檔案 <strong>是否隱藏</strong> 這件事情，在 Windows 上會有一個獨立的 attribute 來處理。而在 Unix 上，則是依據 “<code>.</code> 開頭的檔案應被隱藏” 的常規。除了檔名看起來有點不一樣之外，隱藏檔案和一般檔案在檔案系統裡沒有差別。</p><p>另外我們也可以注意到Windows 和 Unix 對於 <strong>可執行</strong> 這個概念的處理方式也不同。在 Unix 的世界中，每個檔案的 mode 中會紀錄這個檔案是否可執行。而在 Windows 中，檔案並沒有是否可執行的概念，而是讓作業系統維護一個表單，裡面紀錄各種副檔名的檔案應該如何開啟或執行。</p><h2 id="Samba-的設計與產生的問題"><a href="#Samba-的設計與產生的問題" class="headerlink" title="Samba 的設計與產生的問題"></a>Samba 的設計與產生的問題</h2><p>Samba 是個 SMB 的 server 實作，作為在 Unix 環境上跑的服務，但同時也要支援 Windows 的file attribute，亦即前述提到的 Archive、Read-only 等。這些 attribute 是必得以某種方式存在 Samba server 上。在這裏 Samba 的實作非常有趣：</p><blockquote><p>利用 Unix 環境中 Windows 用不到的 executable bit 來存放 Windows 需要的 file attribute。</p></blockquote><p>具體來說，Archive、System 與 Hidden 屬性會分別存在擁有者、擁有群組與其他人的 file mode的 executable bit 當中。而 Read-only 則是影響檔案擁有者的寫入權限是開啟。簡單圖示如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    Owner    Group    Others</span><br><span class="line">  +----------------------------+</span><br><span class="line">  | r  w  x  r  w  x  r  w  x  |</span><br><span class="line">  +-^--^--^--------^--------^--+</span><br><span class="line">    |  |  |        |        |</span><br><span class="line">ReadOnly  Archive  System   Hidden</span><br></pre></td></tr></table></figure><p><em>但此做法舉其實會導致其他問題</em>。這會其他在 Mac 或 Unix 環境下掛載 SMB share 的使用者，會看到檔案有時莫名的變成可執行，或原本可執行的 script 突然變成不可執行。</p><p>於是乎，在 Window 與 Linux 混用的工作環境中，RD 的 terminal 下常會看到一片花花綠綠的source code 資料夾。(一般 shell 都會預設開 <code>ls</code> 的 colorize 選項)</p><h2 id="Executable-Bit-異常的解決方式"><a href="#Executable-Bit-異常的解決方式" class="headerlink" title="Executable Bit 異常的解決方式"></a>Executable Bit 異常的解決方式</h2><p>若要避免 Samba 的這類行為，可以在 <code>smb.conf</code> 中加入以下設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map archive = no</span><br><span class="line">map system = no</span><br><span class="line">map hidden = no</span><br><span class="line">map read only = no</span><br></pre></td></tr></table></figure><p>如此 Samba 就不會嘗試利用 Unix 的 file mode 來存放這些 attribute。</p><p>又或是如果想支援 Windows 的 attribute，但又不想影響 Unix 下的執行權限，可以將這些attribute 寫進 extended attributes 裡。這需要使用以下設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store dos attributes = yes</span><br></pre></td></tr></table></figure><h2 id="碎碎唸"><a href="#碎碎唸" class="headerlink" title="碎碎唸"></a>碎碎唸</h2><p>作為一個軟體工程師，常聽到 <strong>Every detail matters</strong> 或其他類似精神的標語。魔鬼蔵在細節裏，確保每個細節的正確(或至少看起來正確)是每個工程師都應該追求的境界。而這個追求細節的精神，必須從乾淨的工作環境開始做起。</p><p>為什麼會寫出這邊文章？其實就只看到公司的 VCS 內各種怪異的檔案權限，感到困惑而已。清楚的變數命名、符合直覺的 API 設計有助於開發人員理解專案。正確的檔案權限其實也是如此。設定檔應該是 <code>rw-</code>，script 應該是 <code>r-x</code>，不違背直覺的專案狀態才不會阻礙工程師工作。</p><p>當然，一切的根本原因還是在於 Samba 的預設設定會把 Archive attribute map 到file mode 裡面。在 Window 環境工作的工程師一般都是在無意的情況下把 file mode 的異動寫道 VCS 裡面。這時只能抱怨爲何當年 Samba 的作者要做出這種設計了。</p><h2 id="相關連結"><a href="#相關連結" class="headerlink" title="相關連結"></a>相關連結</h2><ul><li><a href="https://unix.stackexchange.com/questions/103415/why-are-files-in-a-smbfs-mounted-share-created-with-executable-bit-set">Why are files in a smbfs mounted share created with executable bit set?</a></li><li><a href="http://www.oreilly.com/openbook/samba/book/ch05_03.html">File Permissions and Attributes on MS-DOS and Unix</a></li><li><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/attrib">Document: <code>attrib</code> command</a></li><li><a href="https://docs.microsoft.com/en-us/windows/desktop/fileio/file-attribute-constants">Document: File attribute API</a></li><li><a href="https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html">Official Samba Config Document</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;許多場合會利用 Samba 來建立給所有工作者共用的 SMB 工作目錄。&lt;/p&gt;
&lt;p&gt;SMB 是 Microsoft 針對 Windows 體系設計的 protocol，但因為種種因素，
目前 Mac 及各 Linux 桌面發行版也都有不錯的 SMB client 支援。</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="git" scheme="https://blog.bitisle.net/tags/git/"/>
    
    <category term="samba" scheme="https://blog.bitisle.net/tags/samba/"/>
    
  </entry>
  
</feed>
