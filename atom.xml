<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bitisle</title>
  
  
  <link href="https://blog.bitisle.net/atom.xml" rel="self"/>
  
  <link href="https://blog.bitisle.net/"/>
  <updated>2024-11-25T22:25:00.000Z</updated>
  <id>https://blog.bitisle.net/</id>
  
  <author>
    <name>Weida Hong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The True Placeholder Symbol in C++</title>
    <link href="https://blog.bitisle.net/2024/11/25/cpp-blank-identifier.html"/>
    <id>https://blog.bitisle.net/2024/11/25/cpp-blank-identifier.html</id>
    <published>2024-11-25T22:25:00.000Z</published>
    <updated>2024-11-25T22:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>In many programming language, the common way to indicate that the symbol is not important,is to use <code>_</code> for the symbol.</p><p>It was just a convention in C++, but it will become a language feature start from C++26.</p><p>Well… what’s the difference?</p><hr><p>We use <code>_</code> when there is some declaration but we do not care the name &#x2F; have no good name forthe variable.</p><p>For example, a common trick to preserve the life time of RAII lock is</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">doJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> std::mutex mutex;</span><br><span class="line">    std::lock_guard _(mutex); <span class="comment">// give it a name so it won&#x27;t unlock immediately</span></span><br><span class="line">    <span class="comment">// some jobs ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or in structure-binding statement.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;std::regular T&gt;</span><br><span class="line"><span class="function">std::tuple&lt;T, <span class="type">bool</span>&gt; <span class="title">someJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; &#123;&#125;, <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> [_, done] = <span class="built_in">someJob</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The problem is… in C++, this style is just a convention, <code>_</code> is still a regular variable.So if we want to ignore two value with different type, it does not work since the type mismatch.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> [_1, done1] = <span class="built_in">someJob</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="keyword">auto</span> [_2, done2] = <span class="built_in">someJob</span>&lt;std::string&gt;();</span><br><span class="line">    <span class="comment">// we need to separate _2 from _1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s frustrating, especially for people with experience of pattern-matching expression inother languages.</p><p>So in C++26 (proposed by P2169), now we can new way to interpret the semantic of <code>_</code>.</p><p>The rule is simple.</p><blockquote><p>If there is only one declaration of <code>_</code> in some scope, everything is same as before.</p></blockquote><p>A we can reference it later if we wan’t, although it’s probably a bad smell to use <code>_</code> in this case.</p><blockquote><p>If there are more declarations of <code>_</code>, they all refer to different objects respectively.</p></blockquote><p>In this case, they can only be assigned to. Try to use them is a compiling error.</p><p>And we can finally write something that looks more natural.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> [_, done1] = <span class="built_in">someJob</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="keyword">auto</span> [_, done2] = <span class="built_in">someJob</span>&lt;std::string&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Golang has this feature from the beginning, is called <em>blank identifier</em>.For Python, although being a dynamic-type language, there is no problem to do use <code>_</code> for differenttype value. <code>_</code> is defined as a wildcard when pattern-matching is introduced to Python (PEP 634).</p><p>It’s happy to see this came to C++ now. :D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In many programming language, the common way to indicate that the symbol is not important,
is to use &lt;code&gt;_&lt;/code&gt; for the symbol.&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="news" scheme="https://blog.bitisle.net/categories/news/"/>
    
    
    <category term="cpp" scheme="https://blog.bitisle.net/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>There is No Unit Type in C++</title>
    <link href="https://blog.bitisle.net/2024/10/23/cpp-optional-monostate.html"/>
    <id>https://blog.bitisle.net/2024/10/23/cpp-optional-monostate.html</id>
    <published>2024-10-23T00:15:00.000Z</published>
    <updated>2024-10-23T00:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>There is NO unit type in C++. (Not in core language spec, at least.)</p><h2 id="A-Story"><a href="#A-Story" class="headerlink" title="A Story"></a>A Story</h2><p>Assuming we are define a abstract interface for storage to get name &#x2F; set name for some user.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Storage</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Storage</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">GetName</span><span class="params">(<span class="type">int</span> id)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SetName</span><span class="params">(<span class="type">int</span> id, std::string name)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Simple and straightforward.</p><p>But it’s intended to be a storage accessed through network, so any operation on it isinherently going to fail at some time.Also, We are 2024 now, loving FP, preferring expression over statement, monadic operationbeing so cool.Thus we decide to wrap all return type in <code>std::optional</code> to indicate these actions may fail.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Storage</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Storage</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::optional&lt;std::string&gt; <span class="title">GetName</span><span class="params">(<span class="type">int</span> id)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::optional&lt;<span class="type">void</span>&gt; <span class="title">SetName</span><span class="params">(<span class="type">int</span> id, std::string name)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Looks good! But now it fails to be compiled.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...\include\optional(100,26): error C2182: &#x27;_Value&#x27;: this use of &#x27;void&#x27; is not valid</span><br></pre></td></tr></table></figure><p>Well. template stuff.</p><h2 id="What-Happened"><a href="#What-Happened" class="headerlink" title="What Happened?"></a>What Happened?</h2><p>The problem is that <code>void</code> is an incomplete type in C&#x2F;C++, and always to be treat speciallywhen we are trying to use them.</p><p>By incomplete in C&#x2F;C++, we mean a type that the size of which is not (yet) known.</p><p>For example, if we forward declare a struct type, and later define it’s member. The struct typeis incomplete before the definition.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Item</span>;</span><br><span class="line"></span><br><span class="line">Item item; <span class="comment">// &lt;- invalid usage, since that the size of Item is unknown yet.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Item item; <span class="comment">// &lt;- valid usage here.</span></span><br></pre></td></tr></table></figure><p>And <code>void</code> is a type that is impossible to be complete by specification.</p><p>But we can have a function that return <code>void</code>?Well, we return <em>nothing</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span>; &#125; <span class="comment">// Or explicit return, both equivalent.</span></span><br></pre></td></tr></table></figure><p>BTW, C before C23 prefer putting a <code>void</code> in parameter list to indicate that a function takes<em>nothing</em>, e.g. <code>int bar(void)</code>, but is’s kinda broken design here.</p><p>Since that we can not evaluate <code>bar(foo())</code>. There is no such thing that is a <code>void</code> and exists.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(<span class="type">void</span>)</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bar</span>(<span class="built_in">foo</span>()); <span class="comment">// &lt;- invalid expression here.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So back to our problem here <code>std::optional&lt;void&gt;</code></p><p>Conceptually, <code>std::optional&lt;T&gt;</code> is just a some T with additional information of <em>value-existence</em>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyOptional</span> &#123;</span><br><span class="line">    T value;</span><br><span class="line">    <span class="type">bool</span> hasValue;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Because that there is impossible to have a member <code>void value</code>,<code>std::optional&lt;void&gt;</code> is not going to be a valid type at first place.</p><p>(Well, we can make a specialization for <code>void</code>, but that’s another story.)</p><h2 id="So-How-can-We-Fix"><a href="#So-How-can-We-Fix" class="headerlink" title="So, How can We Fix?"></a>So, How can We Fix?</h2><p>The problem here is that there is no a valid value for <code>void</code> in C&#x2F;C++.At some level, program can be though of a bunch of expressions. An running a programis just the evaluation of these expressions. (Also the side effects, for real products &#x2F; services)</p><p>The atom of expression is value. If there is a concept that’s not possible to be expressas a value, we are kicking ourselves.</p><p>Take Python for example, if we have a function that return nothing, then the function actually<strong>returns</strong> <code>None</code> when it exits.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(foo() <span class="keyword">is</span> <span class="literal">None</span>) <span class="comment"># check pass here</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">arg: <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">arg: <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">bar(foo(<span class="literal">None</span>)) <span class="comment"># well.. if we really want to chain them together</span></span><br></pre></td></tr></table></figure><p>So <em>nothing</em> itself is a thing, in Python, we call it <code>None</code>.Every expression now is evaluated to some value that exists, the the type system build up thatis complete at any case.</p><p>The concept of <em>nothing</em> itself here is call <strong>unit type</strong> in type theory.It’s a type that has one and only one value.In Python, the value is <code>None</code>, in JavaScript it’s <code>null</code>, in Golang … maybe <code>struct&#123;&#125;&#123;&#125;</code> is agood choice, although not standardized by the language.</p><h2 id="Unit-Type-in-C"><a href="#Unit-Type-in-C" class="headerlink" title="Unit Type in C++"></a>Unit Type in C++</h2><p>Now is the time for C++. As we already see, <code>void</code> is not a good choice for unit type because wecan not have a value for it. Are there other choices here?</p><p>Just define a empty struct and use it probably not a good choice, since thatnow our custom unit type is not compatible with unit type from other code in the product code base.</p><p>How about <code>nullptr</code>, that’s the only one value for <code>std::nullptr_t</code>.(So the type is <code>std::optional&lt;std::nullptr_t&gt;</code>).It’s a feasible choice, but looks weird since that pointer implies indirect access semantic,but it’s not the case when using with <code>std::optional&lt;T&gt;</code> here.</p><p>How about using <code>std::nullopt_t</code>? It’s also a unit type but it’s now more confusing.What’s does it mean by <code>std::optional&lt;std::nullopt_t&gt;</code>? A optional with empty option?There is a static assert in <code>std::optional&lt;T&gt;</code> template that forbid this usage directly,probably because it’s too confusing.</p><p>Maybe <code>std::tuple&lt;&gt;</code>? A tuple with zero element, so it have only one value, the empty tuple.That seems to be a good choice because the canonical unit type in Haskell is <code>()</code> the empty tuple.So it looks natural for people came from Haskell.But personally I don’t like this either since that now the type has nested angle bracketas <code>std::optional&lt;std::tuple&lt;&gt;&gt;</code>.</p><p>There is a type called <code>std::monostate</code>, arrived at the same time as <code>std::optional</code> in C++17.This candidate do not have additional implication by it’s type or it’s name.It’s <em>monostate</em>! Just a little wordy.</p><p><code>std::monostate</code> is originally designed to solve the problem for a <code>std::variant&lt;...&gt;</code> to bedefault initialized with any value. But it’s name and it’s characteristic are all fit ourrequirement here. Thus a good choice for wrapping a function that may fail butreturn nothing.</p><p>Now the interface looks like</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Storage</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Storage</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::optional&lt;std::string&gt; <span class="title">GetName</span><span class="params">(<span class="type">int</span> id)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::optional&lt;std::monostate&gt; <span class="title">SetName</span><span class="params">(<span class="type">int</span> id, std::string name)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Hmm… <code>std::optional&lt;std::monostate&gt;</code>, which takes 29 characters.C++ is not easy. Just like we use <code>std::shared_ptr&lt;T&gt;</code> all over the places.</p><p>Maybe the C++ Standards Committee should specialize <code>std::optional&lt;void&gt;</code>,just like <code>std::expected&lt;void&gt;</code> in C++23.</p><hr><p>Wish someday <code>void</code> can be a REAL unit type in C&#x2F;C++. :D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;There is NO unit type in C++. (Not in core language spec, at least.)&lt;/p&gt;
&lt;h2 id=&quot;A-Story&quot;&gt;&lt;a href=&quot;#A-Story&quot; class=&quot;headerlink&quot; title=&quot;A </summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="cpp" scheme="https://blog.bitisle.net/tags/cpp/"/>
    
    <category term="typing" scheme="https://blog.bitisle.net/tags/typing/"/>
    
  </entry>
  
  <entry>
    <title>Golang 1.23 Iterator Functions</title>
    <link href="https://blog.bitisle.net/2024/08/22/golang-iterator-functions.html"/>
    <id>https://blog.bitisle.net/2024/08/22/golang-iterator-functions.html</id>
    <published>2024-08-22T09:05:34.000Z</published>
    <updated>2024-08-22T09:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>For a long long long time, Golang have no standard way to represent a iterable sequence.</p><p>C++ has range adaptor and iterator (although not strictly typed, only by concept), Python hasiterable&#x2F;iterator by <code>__iter__</code>&#x2F;<code>__next__</code>, JavaScript has standardized <code>for-of</code> and<code>Symbol.iterator</code> since ES6.</p><p>Now it’s time for Golang. Starting from Golang 1.23 Aug., we have <strong>iterator functions</strong>.</p><h2 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works."></a>How It Works.</h2><p>Sample code explains faster.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Iota</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(yield <span class="keyword">func</span>(idx <span class="type">int</span>)</span></span> <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(yield <span class="keyword">func</span>(idx <span class="type">int</span>)</span></span> <span class="type">bool</span>) &#123;</span><br><span class="line">idx := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !yield(idx) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">idx += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> idx := <span class="keyword">range</span> Iota() &#123;</span><br><span class="line"><span class="keyword">if</span> idx == <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(idx) <span class="comment">// print 0 1 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>According to <a href="https://go.dev/doc/go1.23">Go 1.23 Release Notes</a>Now the <code>range</code> keyword accept three kinds of functions, for which takes another <code>yield</code> functionthat yield zero&#x2F;one&#x2F;two values.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>()</span></span> <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>(K)</span></span> <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>(K, V)</span></span> <span class="type">bool</span>)</span><br></pre></td></tr></table></figure><p>The loop control variable and the body of the for-loop is translated into the <code>yield</code> function bylanguage definition. So we can still write imperative-style loop structure even though we areactually doing some functional-style function composition here.</p><h2 id="Why-Do-We-Need-This"><a href="#Why-Do-We-Need-This" class="headerlink" title="Why Do We Need This?"></a>Why Do We Need This?</h2><p>Standardize the iterable&#x2F;iterator interface is a important pre-condition for lazy evaluation.For example, how should we do when we need to iterates through all non-negative integer,and doing some map&#x2F;filter&#x2F;reduce on them?  It waste space to allocate a list for all theseintegers (if possible).</p><p>Someone may say “we already have channel types”.Well, but that requires a separate coroutine instance. We probably don’t want such heavycost every time we are doing some iterate operations.</p><p>Also a separate coroutine means additional synchronization and lifecycle control.For example, how can we terminate the <code>Count</code> coroutine when we need early break in loop?</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(start <span class="type">int</span>)</span></span> <span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">output := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">idx := start</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">output &lt;- idx</span><br><span class="line">idx += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> idx := <span class="keyword">range</span> Count(<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> idx == <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Loop: &quot;</span>, idx)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We need some mechanism like context object or another channel right?That’s a burden for such easy task here.</p><p>On the other hand, <strong>iterator functions</strong> are just ordinary function that accept another functionto yield&#x2F;output the iterated values, so it’s much lightweight than a separate coroutine.We want fast program, right? :D</p><h2 id="The-Stop-Design"><a href="#The-Stop-Design" class="headerlink" title="The Stop Design"></a>The Stop Design</h2><p>For languages like Python and JavaScript, the iterator function (or generator in Python terms)is paused and the control is transfer back to the function that iterates the values.When <code>break</code>&#x2F;<code>return</code> happens and no more value are required, the iterator function justgot collected by the runtime since that there are no more references to the function object.</p><p>But how do we early break the iteration process, if the control is transferinto the iterator function? Let’s look at the function signature again.(Take one value iterator function for example).</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(yield <span class="keyword">func</span>(idx <span class="type">int</span>)</span></span> <span class="type">bool</span>)</span><br></pre></td></tr></table></figure><p>The <code>yield</code> function returns a <code>bool</code> to indicate that whether the loop body does reach theend, or encounter a <code>break</code> statement. So in normal case, we continue to next possible valueafter <code>yield</code> return, but if we got <code>false</code> from <code>yield</code>, our iterator functioncan return immediately. </p><h2 id="Ecosystem-around-Iterator"><a href="#Ecosystem-around-Iterator" class="headerlink" title="Ecosystem around Iterator"></a>Ecosystem around Iterator</h2><p>The beauty of iterator only appears if the ecosystem, or we say, the common operations arounditerator are already implemented in standard library. That means:</p><ul><li>Conversion from and to standard container types, like <code>slice</code> <code>map</code> and <code>chan</code></li><li>Operations and compositions of iterators, e.g. <code>map</code>&#x2F;<code>filter</code>&#x2F;<code>reduce</code>&#x2F;<code>chain</code>&#x2F;<code>take</code> …</li></ul><p>In Python, there are generator expressions, which evolves implicit <code>map/filter</code>.<code>reduce</code> is a function at global scope, also there are many useful functions in <code>itertools</code> package,e.g. <code>pairwise</code>, <code>batched</code>, <code>chain</code>. Most builtin container types takes iterable as first argumentin it’s constructor.</p><p>In Golang, the first part is mostly done along the release of Golang 1.23.For example, to convert slice from and to iterator, we can use <code>slices.Collect</code> and <code>slices.Values</code>.</p><p>For second part, there is a plan to add <code>x/exp/xiter</code> package under <code>golang.org</code> namespace.There should be at least <code>Concat</code>, <code>Map</code>, <code>Filter</code>, <code>Reduce</code>, <code>Zip</code> … once it’s released.But unfortunately it’s not compete yet.</p><p>See: <a href="https://github.com/golang/go/issues/61897">iter: new package for iterators · Issue #61897 · golang&#x2F;go</a></p><p>Also I create a toy package <a href="https://pkg.go.dev/github.com/wdhongtw/mice/flow">github.com&#x2F;wdhongtw&#x2F;mice&#x2F;flow</a>to address some important building wheel around iterators</p><ul><li><code>Empty</code>&#x2F;<code>Pack</code> return a iterator for zero&#x2F;one value</li><li><code>Any</code>&#x2F;<code>All</code> short-circuit lazy evaluation of a predicate on a sequence of values</li><li><code>Forward</code>&#x2F;<code>Backward</code> absorb input and iterate in reversed order.</li></ul><p>For example, if we want to define a iterator function for a binary tree in recursive manner,we can use <code>Empty</code> and <code>Pack</code> together with <code>Chain</code> to implement this easily.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    val   <span class="type">int</span></span><br><span class="line">    left  *Node</span><br><span class="line">    right *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Traverse</span><span class="params">(node *Node)</span></span> iter.Seq[<span class="type">int</span>] &#123;</span><br><span class="line">    <span class="comment">// Empty is useful as base case during recursive generator chaining.</span></span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Empty[<span class="type">int</span>]()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Pack is useful to promote a single value into a iterable for chaining.</span></span><br><span class="line">    <span class="keyword">return</span> Chain(</span><br><span class="line">        Traverse(node.left),</span><br><span class="line">        Pack(node.val),</span><br><span class="line">        Traverse(node.right),</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looks cool, doesn’t it? :D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;For a long long long time, Golang have no standard way to represent a iterable sequence.&lt;/p&gt;
&lt;p&gt;C++ has range adaptor and iterator (altho</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="golang" scheme="https://blog.bitisle.net/tags/golang/"/>
    
    <category term="functional" scheme="https://blog.bitisle.net/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>Pipeline Style Map-Reduce in Python</title>
    <link href="https://blog.bitisle.net/2024/07/13/pipeline-style-python.html"/>
    <id>https://blog.bitisle.net/2024/07/13/pipeline-style-python.html</id>
    <published>2024-07-13T03:50:00.000Z</published>
    <updated>2024-07-13T03:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Since C++20, C++ provide a new style of data processing, and the ability oflazy evaluation by chaining the iterator to another iterator.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; input = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> output = input | std::views::<span class="built_in">filter</span>([](<span class="type">const</span> <span class="type">int</span> n) &#123;<span class="keyword">return</span> n % <span class="number">3</span> == <span class="number">0</span>;&#125;)</span><br><span class="line">                        | std::views::<span class="built_in">transform</span>([](<span class="type">const</span> <span class="type">int</span> n) &#123;<span class="keyword">return</span> n * n;&#125;);</span><br><span class="line">    <span class="comment">// now output is [0, 9, 36, 81], conceptually</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we use this style in Python? Yes! :D</p><h2 id="Evaluation-of-Operators"><a href="#Evaluation-of-Operators" class="headerlink" title="Evaluation of Operators"></a>Evaluation of Operators</h2><p>In Python, all expression evolves a arithmetic operator, e.g. <code>a + b</code>, is evaluate by follow rule</p><ul><li>If the (forward) special method, e.g. <code>__add__</code> exists on left operand<ul><li>It’s invoked on left operand, e.g. <code>a.__add__(b)</code></li><li>If the invocation return some meaningful value other than <code>NotImplemented</code>, done!</li></ul></li><li>If the (forward) special method does not exist, or the invocation returns <code>NotImplemented</code>, then</li><li>If the <strong>reverse special method</strong>, e.g. <code>__radd__</code> exists on right operand<ul><li>It’s invoked on the right operator, e.g. <code>b.__radd__(a)</code></li><li>If the invocation return some meaningful value other than <code>NotImplemented</code>, done!</li></ul></li><li>Otherwise, <code>TypeError</code> is raised</li></ul><p>So it seems possible here… Let’s make a quick experiment</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Adder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, rhs: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._rhs = rhs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ror__</span>(<span class="params">self, lhs: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> lhs + self._rhs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="number">5</span> == <span class="number">2</span> | Adder(<span class="number">3</span>)  <span class="comment"># Is 5 equals to 2 + 3 ? Yes!!</span></span><br></pre></td></tr></table></figure><p>This works because the <code>|</code> operator of integer <code>2</code> check the type of <code>Adder(3)</code> and found thatis not something it recognized, so it returns <code>NotImplemented</code> and our reverse magic method goes.</p><p>In C++, the <code>|</code> operator is overloaded(?) on range adaptors to accept ranges.So maybe we can make something similar, having some object implements <code>__ror__</code> that acceptan iterable and return another value (probably a iterator).</p><h2 id="Pipe-able-Higher-Order-Function"><a href="#Pipe-able-Higher-Order-Function" class="headerlink" title="Pipe-able Higher Order Function"></a>Pipe-able Higher Order Function</h2><p>So back to our motivation, Python already have something like <code>filter</code> <code>map</code> <code>reduce</code>,and also the powerful generator expression to filter and&#x2F;or map without explicit function call.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">values = <span class="built_in">filter</span>(<span class="keyword">lambda</span> v: v % <span class="number">2</span> == <span class="number">0</span>, <span class="built_in">range</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">values = (v <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> v % <span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>But it’s just hard to chain multiple operations together while preserving readability.</p><p>So let’s make a filter object that support <code>|</code> operator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Filter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, predicate: <span class="type">Callable</span>[[<span class="built_in">int</span>], <span class="built_in">bool</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._predicate = predicate</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ror__</span>(<span class="params">self, values: Iterable[<span class="built_in">int</span>]</span>) -&gt; Iterator[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">            <span class="keyword">if</span> self._predicate(value):</span><br><span class="line">                <span class="keyword">yield</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">selected = <span class="built_in">range</span>(<span class="number">10</span>) | Filter(<span class="keyword">lambda</span> val: val % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>] == <span class="built_in">list</span>(selected)</span><br></pre></td></tr></table></figure><p>How about map?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mapper</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, transform: <span class="type">Callable</span>[[<span class="built_in">int</span>], <span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._transform = transform</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ror__</span>(<span class="params">self, values: Iterable[<span class="built_in">int</span>]</span>) -&gt; Iterator[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">            <span class="keyword">yield</span> self._transform(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">processed = <span class="built_in">range</span>(<span class="number">3</span>) | Mapper(<span class="keyword">lambda</span> val: val * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>] == <span class="built_in">list</span>(processed)</span><br></pre></td></tr></table></figure><p>Works well, we are great again!!</p><p>It just take some time for we to write the class representation for <code>filter</code>, <code>map</code>, <code>reduce</code>,<code>take</code>, <code>any</code> … and any higher function you may think useful.</p><p>Wait, it looks so tedious. Python should be a powerful language, isn’t it?</p><h2 id="Piper-and-Decorators"><a href="#Piper-and-Decorators" class="headerlink" title="Piper and Decorators"></a>Piper and Decorators</h2><p>The function capturing and <code>__ror__</code> implementation can be so annoying for all high order function.If we can make sure <code>__ror__</code> only take left operand, and return the return value of the capturedfunction, than we can extract a common <code>Piper</code> class. We just need another function to produce afunction that already capture the required logic.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Piper</span>(<span class="type">Generic</span>[_T, _U]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func: <span class="type">Callable</span>[[_T], _U]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ror__</span>(<span class="params">self, lhs: _T</span>) -&gt; _U:</span><br><span class="line">        <span class="keyword">return</span> self._func(lhs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_wrapped</span>(<span class="params">predicate: <span class="type">Callable</span>[[_T], <span class="built_in">bool</span>]</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">apply</span>(<span class="params">items: Iterable[_T]</span>) -&gt; Iterator[_T]:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">if</span> predicate(item):</span><br><span class="line">                <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Piper(apply)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">selected = <span class="built_in">range</span>(<span class="number">10</span>) | filter_wrapped(<span class="keyword">lambda</span> val: val % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>] == <span class="built_in">list</span>(selected)</span><br></pre></td></tr></table></figure><p>Now it looks a little nicer … but we still need to implement all wrapper functions for allkinds of operations?</p><p>Again, the only difference between these wrapped functions is the logic inside apply function,so we can extract this part again, with a decorator!! :D</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on</span>(<span class="params">func: <span class="type">Callable</span>[Concatenate[_T, _P], _R]</span>) -&gt; <span class="type">Callable</span>[_P, Piper[_T, _R]]:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>(<span class="params">*args: _P.args, **kwargs: _P.kwargs</span>) -&gt; Piper[_T, _R]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">apply</span>(<span class="params">head: _T</span>) -&gt; _R:</span><br><span class="line">            <span class="keyword">return</span> func(head, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Piper(apply)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@on</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">items: Iterable[_T], predicate: <span class="type">Callable</span>[[_T], <span class="built_in">bool</span>]</span>) -&gt; Iterator[_T]:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> predicate(item):</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">selected = <span class="built_in">range</span>(<span class="number">10</span>) | <span class="built_in">filter</span>(<span class="keyword">lambda</span> val: val % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>] == <span class="built_in">list</span>(selected)</span><br></pre></td></tr></table></figure><p>The <code>on</code> decorator accept some function <code>func</code>, and return a function that first take thetail arguments of <code>func</code> and return a function that accept head argument of <code>func</code> throughpipe operator.</p><p>So now we can express our thoughts in our codebase using pipeline style code,just with one helper class and one helper decorator! :D</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">values = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">result = (</span><br><span class="line">    values</span><br><span class="line">    | <span class="built_in">filter</span>(<span class="keyword">lambda</span> val: val % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    | <span class="built_in">map</span>(<span class="built_in">str</span>)</span><br><span class="line">    | on(<span class="keyword">lambda</span> chunks: <span class="string">&quot;&quot;</span>.join(chunks))() <span class="comment"># create pipe-able object on the fly</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">assert</span> result == <span class="string">&quot;02468&quot;</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) | <span class="built_in">filter</span>(<span class="keyword">lambda</span> val: val % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>Complete type-safe code here</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pipe is a module that make it easy to write higher-order pipeline function</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> <span class="type">Callable</span>, Iterable, Iterator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Generic</span>, TypeVar, ParamSpec, Concatenate</span><br><span class="line"></span><br><span class="line">_R = TypeVar(<span class="string">&quot;_R&quot;</span>)</span><br><span class="line">_T = TypeVar(<span class="string">&quot;_T&quot;</span>)</span><br><span class="line">_P = ParamSpec(<span class="string">&quot;_P&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Piper</span>(<span class="type">Generic</span>[_T, _R]):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Piper[T, R] is a function that accept T and return R</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    call the piper with &quot;value_t | piper_t_r&quot;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func: <span class="type">Callable</span>[[_T], _R]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ror__</span>(<span class="params">self, items: _T</span>) -&gt; _R:</span><br><span class="line">        <span class="keyword">return</span> self._func(items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on</span>(<span class="params">func: <span class="type">Callable</span>[Concatenate[_T, _P], _R]</span>) -&gt; <span class="type">Callable</span>[_P, Piper[_T, _R]]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &quot;on&quot; decorates a func into pipe-style function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The result function first takes the arguments, excluding first,</span></span><br><span class="line"><span class="string">    and returns an object that takes the first argument through &quot;|&quot; operator.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>(<span class="params">*args: _P.args, **kwargs: _P.kwargs</span>) -&gt; Piper[_T, _R]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">apply</span>(<span class="params">head: _T</span>) -&gt; _R:</span><br><span class="line">            <span class="keyword">return</span> func(head, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Piper(apply)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Since C++20, C++ provide a new style of data processing, and the ability of
lazy evaluation by chaining the iterator to another iterator.</summary>
      
    
    
    
    <category term="tips" scheme="https://blog.bitisle.net/categories/tips/"/>
    
    
    <category term="python" scheme="https://blog.bitisle.net/tags/python/"/>
    
    <category term="development" scheme="https://blog.bitisle.net/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>Introduction of Function Hijacking in C</title>
    <link href="https://blog.bitisle.net/2024/07/08/intro-hijack-c-function.html"/>
    <id>https://blog.bitisle.net/2024/07/08/intro-hijack-c-function.html</id>
    <published>2024-07-08T11:28:00.000Z</published>
    <updated>2024-07-08T11:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Thanks to the symbol-lazy-loading ability in Unix environment,we can do many interesting thing on functions from some shared librarywhen executing some executables.</p><p>All we need to do are</p><ul><li>Implement a shared library that contains the functions we want to hijack.</li><li>Run the executable with our magic library inserted.</li></ul><h2 id="Make-a-Shared-Library"><a href="#Make-a-Shared-Library" class="headerlink" title="Make a Shared Library"></a>Make a Shared Library</h2><p>If we want to replace some function with stub &#x2F; fake implementation.we can just implement a function with the same name and the same signature.</p><p>For example, if we want to fixed the clock during unit test …</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in hijack.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a &quot;time&quot; function which always return the timestamp of the epoch.</span></span><br><span class="line"><span class="type">time_t</span> <span class="title function_">time</span><span class="params">(<span class="type">time_t</span>* arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arg)</span><br><span class="line">        *arg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we want do observation about some function call, but still delegate thecall to the original function, we can implement a function that loadcorresponding function at runtime and pass the function call.</p><p>For example, if we want to monitor the call sequence of file open action.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in hijack.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// write &quot;open&quot; action to standard error before open the file</span></span><br><span class="line">FILE* <span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* <span class="keyword">restrict</span> path, <span class="type">const</span> <span class="type">char</span>* <span class="keyword">restrict</span> mode)</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> used_count = <span class="number">0</span>;</span><br><span class="line">    used_count += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;open file [%d]: \&quot;%s\&quot;\n&quot;</span>, used_count, path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> FILE* (*wrapped_type)(<span class="type">const</span> <span class="type">char</span>* <span class="keyword">restrict</span> path, <span class="type">const</span> <span class="type">char</span>* <span class="keyword">restrict</span> mode);</span><br><span class="line">    <span class="comment">// no dlopen, just search the function in magic handle RTLD_NEXT</span></span><br><span class="line">    wrapped_type wrapped = dlsym(RTLD_NEXT, <span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> wrapped(path, mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After finish our implementation, compile them as a shared library,called <code>hijack.so</code> here.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc -fPIC -shared -o hijack.so hijack.c</span><br></pre></td></tr></table></figure><h2 id="Hijack-during-Actual-Execution"><a href="#Hijack-during-Actual-Execution" class="headerlink" title="Hijack during Actual Execution"></a>Hijack during Actual Execution</h2><p>We can use <code>LD_PRELOAD</code> environment variable to do insert our specialshared library for any executable during execution.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=&quot;path-to-shared-lib&quot; executable</span><br></pre></td></tr></table></figure><p>For example, if we want to use the implementations in last section inour executable, called <code>app</code> here.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE* handle = fopen(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    assert(handle);</span><br><span class="line">    fclose(handle);</span><br><span class="line"></span><br><span class="line">    <span class="type">time_t</span> current = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;now: %s&quot;</span>, asctime(gmtime(&amp;current)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(Compile and) run the executable</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc -o app app.c</span><br><span class="line">LD_PRELOAD=./hijack.so ./app</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open file [1]: &quot;output.txt&quot;</span><br><span class="line">now: Thu Jan  1 00:00:00 1970</span><br></pre></td></tr></table></figure><p>The open-file action is traced, and the time is fixed to the epoch.</p><p>If we need to overwrite functions with more than one shared library,just use <code>:</code> to separate them in <code>LD_PRELOAD</code>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>It’s a powerful feature, it allows we to do observation, to replace withmock&#x2F;fake implementation, or sometime even to apply emergency patch.</p><p>And all make this possible are the dynamic linking mechanism, andthe one-to-one mapping from symbol from sources to libraries&#x2F;binaries.</p><p>Although development in C is somehow inconvenient, but it’s stilla interesting experience when seeing this kind of usage. :D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Thanks to the symbol-lazy-loading ability in Unix environment,
we can do many interesting thing on functions from some shared library
whe</summary>
      
    
    
    
    <category term="tips" scheme="https://blog.bitisle.net/categories/tips/"/>
    
    
    <category term="development" scheme="https://blog.bitisle.net/tags/development/"/>
    
    <category term="c" scheme="https://blog.bitisle.net/tags/c/"/>
    
    <category term="testing" scheme="https://blog.bitisle.net/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Python 的 type 不是 type？</title>
    <link href="https://blog.bitisle.net/2024/06/05/python-type-expression.html"/>
    <id>https://blog.bitisle.net/2024/06/05/python-type-expression.html</id>
    <published>2024-06-05T09:38:00.000Z</published>
    <updated>2024-06-05T09:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>近期因為一些原因，想自己寫一個 Python 用的 DI library。寫是寫完了，不含 test 基本上不到 50 行，也 release 到 <a href="https://pypi.org/project/luckydep/">luckydep · PyPI</a> 了。不過在寫的過程中發現了一些問題。</p><p>與 Golang 不同。 在 Python 中，DI container 拿取特定 instance 的介面 (invoke&#x2F;bind&#x2F;get 等，下稱 invoke)需要明確傳遞想拿取的 instance 的 type。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Invoke</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(c *Container)</span></span> T &#123;</span><br><span class="line">    <span class="keyword">var</span> _ T <span class="comment">// can construct T event if T is a interface</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// although we need to specify the type parameter, the type parameter</span></span><br><span class="line"><span class="comment">// is not passed during runtime</span></span><br><span class="line"><span class="keyword">var</span> instance = Invoke[SomeType](c)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invoke</span>(<span class="params">t</span>): <span class="comment"># search and build a instance of type t</span></span><br><span class="line"></span><br><span class="line">c = Container()</span><br><span class="line">instance = c.invoke(SomeType) <span class="comment"># need to pass type as a parameter</span></span><br></pre></td></tr></table></figure><p>其中的根本差異是，Golang 類型的 static type language，generic function 會真的根據不同型別，產生對應的function 出來，這些 function 的 byte code&#x2F;machine code 自然知道當下在處理的型別。而 Python 這類語言，靠 static type checker 建立 generic function，實際上到 runtime 時還是只有一個function，自然會需要傳遞 type 給 invoke 介面。</p><p>自從 Python 3.6 開始我們有 type hint，所以我們可以 annotate function&#x2F;method 來幫助IDE&#x2F;type checker 來推論正確的型別。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invoke</span>(<span class="params">t: <span class="built_in">type</span>[T]</span>) -&gt; T: <span class="comment"># search and build a instance of type t</span></span><br><span class="line"></span><br><span class="line">c = Container()</span><br><span class="line">instance: SomeType = c.invoke(SomeType) <span class="comment"># ok, we can infer instance is SomeType</span></span><br></pre></td></tr></table></figure><p>這邊 <code>type[T]</code> (or <code>typing.Type[T]</code>, the old way) 用來表示我們正在用 <code>t</code> 來傳遞傳遞某個 type <code>T</code>，而非 type 為 <code>T</code> 的某個 instance。</p><p>From <code>typing</code> document:</p><blockquote><p>A variable annotated with <code>C</code> may accept a value of type <code>C</code>. In contrast, a variable annotated with<code>type[C]</code> (or <code>typing.Type[C]</code>) may accept values that are classes themselves</p></blockquote><h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>OK，我們有 <code>type[T]</code> 可以用。 DI library 開發者可以用型別為 <code>type[T]</code> 的 <code>t</code> 來做 indexing，library 使用者可以享受到 static type checker 帶來的 type safety。</p><p>於是我們拿這個 library 來用在真實情境.. 沒想到一下子就碰上問題了。當我們定義 interface type，並透過 DI container 對該 interface 拿取對應的 implementation instance 時。因為 interface 通常是個 abstract class (or protocol)，<code>mypy</code> type checker 會報錯(<a href="https://mypy.readthedocs.io/en/stable/error_code_list.html#safe-handling-of-abstract-type-object-types-type-abstract">mypy: type-abstract</a>)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeInterface</span>(<span class="title class_ inherited__">Protocol</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>): ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeImplementation</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>): ...</span><br><span class="line"></span><br><span class="line">c.invoke(SomeInterface) <span class="comment"># trigger mypy error [type-abstract]</span></span><br></pre></td></tr></table></figure><p>不會吧… 這不是我們需要 DI 的最重要原因嗎？我們定義 interface 並另外提供 implementation，來達到隔離不同 class 職責的效果。結果當 user 要用這個 library 的時候卻卡在型別檢查…</p><h2 id="The-History"><a href="#The-History" class="headerlink" title="The History"></a>The History</h2><p>翻閱文件，第一時間以為這是 <code>mypy</code> 的設計問題。</p><blockquote><p>Mypy always allows instantiating (calling) type objects typed as <code>Type[t]</code></p></blockquote><p>沒想到翻了 <code>mypy</code> issue <a href="https://github.com/python/mypy/issues/4717">#4717 · python&#x2F;mypy</a>後，發現這是已經寫在 PEP 544 內的規格。</p><blockquote><p>Variables and parameters annotated with <code>Type[Proto]</code> accept only concrete (non-protocol) subtypes of Proto.The main reason for this is to allow instantiation of parameters with such type. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">cls: <span class="type">Type</span>[Proto]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> cls().meth() <span class="comment"># OK</span></span><br></pre></td></tr></table></figure></blockquote><p><code>mypy</code> 允許 construct 一個不知道 constructor 長什麼樣子的 interface type，所以該標示 <code>Type[Proto]</code> 的 parameter 只能傳遞 concrete type… 嗯？</p><p>繼續往下追，想不到一開始會有這個檢查，是因為 <strong>Guido 本人</strong> 在 2016 年開的 <a href="https://github.com/python/mypy/issues/1843">#1843 · python&#x2F;mypy</a>，認為應該允許這種使用方法。</p><p>於是 <code>mypy</code> 加入了這個檢查，後來 2017 年的 PEP 544 也明確定義了這個使用規則。</p><h2 id="The-Controversy"><a href="#The-Controversy" class="headerlink" title="The Controversy"></a>The Controversy</h2><p>這個 <code>t: type[T]</code> 的設計引起很多爭議，從 <a href="https://github.com/python/mypy/issues/4717">#4717 · python&#x2F;mypy</a>來看，不少人認為: 為了允許 construct <code>t()</code> 而限制只能傳遞 concrete class 會大幅限制這個 <code>type[T]</code> 的使用情境。</p><p>也有人認為這個檢查根本就不合理，因為沒有人能保證這個 protocol type 底下的 concrete class 的 constructor到底要吃什麼東西。 即使 static type check 檢查過了，<code>t()</code> 在 runtime 噴掉一點也不奇怪。更何況根本沒看過有人在 protocol type 上面定義 <code>__init__</code> method，這個 <code>t()</code> 一開始到底要怎麼檢查也不知道。</p><p>如果看相其他語言的開發經驗…Golang 生態系 constructor 是 plain function，定義 interface type 時自然不會包含 constructor。寫 C++ 的人應該也沒聽過什麼 abstract constructor，只有 destructor 會掛 <code>abstract</code> keyword。回到 Python 自身，<code>mypy</code> 和 <code>pyright</code> 兩大工具也都允許 <code>__init__</code> 的 signature 在繼承鍊中被修改。(see: <a href="https://github.com/python/typing/discussions/1305">python&#x2F;typing · Discussion #1305</a>)</p><p>至於 <code>typing.Type</code> 的文件，寫得很模糊，我想有一定程度的人看到反而更容易誤會。</p><blockquote><p><code>type[C]</code> … may accept values that are classes themselves …</p></blockquote><p>就算捨棄掉 protocol，限制都只能用 concrete class 來定義 interface。這個只能允許 concrete class 的規則還造成了另一個問題: 使用者該如何傳遞 function type？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.register(<span class="type">Callable</span>[[<span class="built_in">int</span>, <span class="built_in">int</span>], <span class="built_in">int</span>], <span class="keyword">lambda</span> a, b: a + b) <span class="comment"># ????</span></span><br></pre></td></tr></table></figure><p>說好的 function as first-class citizen 呢？ 怎麼到了要傳遞型別時就不行了？</p><p>在翻閱 issue 的過程中，發現其他 DI framework 的 repo 也遇上同樣的問題 <a href="https://github.com/python-injector/injector/issues/143">#143 · python-injector&#x2F;injector</a>，頓時覺得自己不孤單。</p><h2 id="The-Future"><a href="#The-Future" class="headerlink" title="The Future"></a>The Future</h2><p>由於 PEP 544 自從 2017 年就已經完成，<code>mypy</code> 預設執行這個檢查也行之有年，現在再來改這個行為或許已經來不及了。</p><p>於是為了解決這個問題，2020 有人在開了新 issue <a href="https://github.com/python/mypy/issues/9773">9773 · python&#x2F;mypy</a>想要定義新的 annotation <code>TypeForm[T]</code>&#x2F;<code>TypeExpr[T]</code> 來達成要表達任意 type 的 type 的需求。到目前 (2024-06)，對應的 <a href="https://github.com/python/peps/pull/3798">PEP 747 draft</a> 也已經被提出了。</p><p>若一切順利，以後我們就會用 <code>TypeExpr[T]</code> 來表達這類 generic function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invoke</span>(<span class="params">t: TypeExpr[T]</span>) -&gt; T: <span class="comment"># search and build a instance of type t</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeType</span>(<span class="title class_ inherited__">Protocol</span>): ...</span><br><span class="line"></span><br><span class="line">c = Container()</span><br><span class="line">instance = c.invoke(SomeType) <span class="comment"># ok, we find a object for type SomeType for you!</span></span><br><span class="line">operator = c.invoke(<span class="type">Callable</span>[[<span class="built_in">int</span>], <span class="built_in">bool</span>]) <span class="comment"># you need a (int -&gt; bool)? no problem!</span></span><br></pre></td></tr></table></figure><p>至於目前嘛.. library user 在使用到這類 library 的檔案加入下面這行即可。我想要修改的範圍和造成的影響應該都還可以接受。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mypy: disable-error-code=&quot;type-abstract&quot;</span></span><br></pre></td></tr></table></figure><p>期許 Python typing system 完好的那天到來。</p><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li>2016-07: <a href="https://github.com/python/mypy/issues/1843">#1843 · python&#x2F;mypy</a> Guido 提出要 instantiate 的需求</li><li>2017-05: <a href="https://peps.python.org/pep-0544/">PEP 544</a> standardized and published</li><li>2018-05: <a href="https://github.com/python/mypy/issues/4717">#4717 · python&#x2F;mypy</a> first discussion against <code>type[T]</code> design</li><li>2020-04: <a href="https://github.com/python-injector/injector/issues/143">#143 · python-injector&#x2F;injector</a></li><li>2020-10: <a href="https://github.com/python/mypy/issues/9773">#9773 · python&#x2F;mypy</a> propose idea of <code>TypeFrom[T]</code></li><li>2024-06: <a href="https://github.com/python/peps/pull/3798">PEP 747</a> draft created</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;近期因為一些原因，想自己寫一個 Python 用的 DI library。寫是寫完了，不含 test 基本上不到 5</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="typing" scheme="https://blog.bitisle.net/tags/typing/"/>
    
    <category term="generic" scheme="https://blog.bitisle.net/tags/generic/"/>
    
    <category term="python" scheme="https://blog.bitisle.net/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>利用 SSH 建立 SOCKS Proxy</title>
    <link href="https://blog.bitisle.net/2022/04/20/ssh-socks-proxy.html"/>
    <id>https://blog.bitisle.net/2022/04/20/ssh-socks-proxy.html</id>
    <published>2022-04-20T02:58:00.000Z</published>
    <updated>2022-04-20T02:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因為疫情又開始 WFH 了。 公司有提供一些 VPN solution 讓員工存取公司內網路，但有一些架在 public cloud 上的服務後台因為有擋來源 IP，無法在家直接存取。</p><p>這時候 SSH 內建的 SOCKS proxy server 功能就可以派上用場了！</p><p>SSH 可以在建立連線時，一併在本機端開出一個 SOCKS (version 4 and 5) 的 server，接下來任何應用程式都可以將任意的 TCP 連線透過這個 SOCKS server，轉送到 SSH server後再與目標站台連線。因為大家一定在公司裡有台可以 SSH 的機器(?)，於是這種限制公司 IP 的管理後台就可以順利存取。 :D</p><p>使用方式很簡單，SSH 連線時多下參數即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &quot;target-machine&quot; -D &quot;localhost:1080&quot; -N</span><br></pre></td></tr></table></figure><ul><li><code>-D localhost:1080</code>: 決定要開在 local 的 SOCKS port，RFC 建議是 1080</li><li><code>-N</code>: 如果不需要開一個 shell，只是要 SOCKS proxy 功能，那可以多帶此參數</li></ul><p>Note: SSH 有支援 SOCKS5 (可做 IPv6 proxy) 但不支援 authentication，不過因為 SOCKS server可以如上述設定只開在 <code>localhost</code> 上，所以沒麼問題。</p><p>接著我們就可以設定 OS 層級或是 application 層級的 proxy 設定來使用這個 proxy 了！以我一開始遇到的問題來說，通常我會多開一個 Firefox 並設定使用 proxy 來存取公司的各種管理後台。這樣就可以保持其他網路流量還是直接往外打，不需要過 proxy。 :D</p><p>若要快速啟動 proxy，可以使用 <a href="https://www.microsoft.com/zh-tw/p/windows-terminal/9n0dx20hk701">Windows Terminal</a>並設定一個 profile，執行上述 SSH 指令。</p><p>PuTTY 作為 Windows 上最多人使用的 SSH client，也有支援 SOCKS proxy 功能，詳見: <a href="https://securitymusings.com/article/462/how-to-set-up-a-socks-proxy-using-putty-ssh">How To Set up a SOCKS Proxy Using Putty &amp; SSH - Security Musings</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://linux.die.net/man/1/ssh">ssh(1): OpenSSH SSH client - Linux man page</a></li><li><a href="https://serverfault.com/questions/336067/how-can-i-setup-a-socks-proxy-over-ssh-with-password-based-authentication-on-cen">linux - How can I setup a SOCKS proxy over ssh with password based authentication on CentOS? - Server Fault</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近因為疫情又開始 WFH 了。 公司有提供一些 VPN solution 讓員工存取公司內網路，
但有一些架在 public cloud 上的服務後台因為有擋來源 IP，無法在家直接存取。&lt;/p&gt;
&lt;p&gt;這時候 SSH 內建的 SOCKS proxy server 功能就</summary>
      
    
    
    
    <category term="tips" scheme="https://blog.bitisle.net/categories/tips/"/>
    
    
    <category term="ssh" scheme="https://blog.bitisle.net/tags/ssh/"/>
    
    <category term="socks" scheme="https://blog.bitisle.net/tags/socks/"/>
    
  </entry>
  
  <entry>
    <title>Golang 1.18 Generics 終於來臨</title>
    <link href="https://blog.bitisle.net/2022/03/16/golang-generics-coming.html"/>
    <id>https://blog.bitisle.net/2022/03/16/golang-generics-coming.html</id>
    <published>2022-03-16T14:54:00.000Z</published>
    <updated>2022-03-16T14:54:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天 Golang 1.18 終於正式釋出啦！我們終於有辦法在 Golang 裡做 generic programming 啦！</p><p>Golang 是一個近 10 年快速竄紅的程式語言，但在很多面向其實還是非常土炮。得靠後續社群不斷的討論與貢獻才達到一個比較完善的水準。 像是..</p><ul><li><code>context</code> package in Golang 1.7: 解決 long job cancelling 的問題</li><li><code>errors</code> package in Golang 1.13: 滿足其他語言常見的 error 嵌套需求和提供統一的判斷方式</li><li>Generic support in Golang 1.18: 提供開發者實作各種型無關演算法的機會</li></ul><p>一直以來，在 Golang 的標準函式庫中，碰到類型無關的抽象問題時，最後給出來的解法大概就兩種</p><ol><li>所有 input &#x2F; output 參數都定義成 <code>interface&#123;&#125;</code>，大家一起把型別檢查往 run-time 丟</li><li>同一個 class &#x2F; function 對於常用的 data type 通通實作一遍</li></ol><p>前者最典型的大概就是 <code>sync</code> 這個函示庫，後者.. 大家應該都看過那個慘不忍睹的 <code>sort</code>..</p><p>不過這些都是過去式了，從今天開始，大家都可以寫自己想要的 generic code &#x2F; library &#x2F; framework。 :D</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>基本語法很簡單，只要在想做成 generic 的 function &#x2F; struct 後面多加一個 <code>[T TypeName]</code> 即可，<code>TypeName</code> 是用原本就有的 <code>interface&#123;...&#125;</code> 語法來表示，可以自己描述這個 generic function &#x2F; struct支援的型態必須滿足什麼樣的介面。</p><p>以 Python style 的 sort by key 當例子。我們可以定義一個 generic 的 sort function，並且明定送進來的 list 內的每個元素需要支援一個 <code>Key</code> 函示，作為排序時的根據。</p><p>範例 code 如下</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Keyable <span class="keyword">interface</span> &#123;</span><br><span class="line">Key() <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sort</span>[<span class="title">T</span> <span class="title">Keyable</span>]<span class="params">(items []T)</span></span> []T &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(items) &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> items</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pivot := items[<span class="number">0</span>]</span><br><span class="line">less, greater := []T&#123;&#125;, []T&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> items[<span class="number">1</span>:] &#123;</span><br><span class="line"><span class="keyword">if</span> item.Key() &lt; pivot.Key() &#123;</span><br><span class="line">less = <span class="built_in">append</span>(less, item)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">greater = <span class="built_in">append</span>(greater, item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(<span class="built_in">append</span>(less, pivot), greater...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n Person)</span></span> Key() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n.Age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">persons := []Person&#123;&#123;Name: <span class="string">&quot;alice&quot;</span>, Age: <span class="number">33</span>&#125;, &#123;Name: <span class="string">&quot;bob&quot;</span>, Age: <span class="number">27</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">persons = Sort(persons)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這個範例中，<code>Sort</code> 要求送進來的 <code>[]T</code> 當中的 <code>T</code> 要實作 <code>Keyable</code> 介面 (提供 <code>Key</code> method)。當我們想排序一堆 <code>Person</code> 時，我們可以在這個 <code>Person</code> 物件上定義 <code>Key</code> method，取出 <code>Person</code> 的年齡。完成之後，我們就可以依年齡來排序 <code>[]Person</code> 了。</p><p>期許自己未來可以多加利用這個遲來的功能.. XD</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://tip.golang.org/doc/go1.18">Go 1.18 Release Notes</a></li><li><a href="https://go.dev/doc/tutorial/generics">Tutorial: Getting started with generics</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天 Golang 1.18 終於正式釋出啦！
我們終於有辦法在 Golang 裡做 generic programming 啦！&lt;/p&gt;
&lt;p&gt;Golang 是一個近 10 年快速竄紅的程式語言，但在很多面向其實還是非常土炮。
得靠後續社群不斷的討論與貢獻才達到一個比較完</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="golang" scheme="https://blog.bitisle.net/tags/golang/"/>
    
    <category term="generic" scheme="https://blog.bitisle.net/tags/generic/"/>
    
  </entry>
  
  <entry>
    <title>如何避免 Commit Message 拼錯字？</title>
    <link href="https://blog.bitisle.net/2021/09/28/vim-git-commit-spell-check.html"/>
    <id>https://blog.bitisle.net/2021/09/28/vim-git-commit-spell-check.html</id>
    <published>2021-09-28T17:43:50.000Z</published>
    <updated>2021-09-28T17:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>文件打錯字還好，隨時可以修。但在 commit message 中打錯字，可是會流傳千古。</p><p>身為一個 RD，有個極簡的解決方法..把底下這行設定放到 <code>.vimrc</code> 內即可。 (O</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autocmd FileType gitcommit setlocal spell</span><br></pre></td></tr></table></figure><p>(對於屬 Git commit message 的 buffer 自動啟用 spell check 功能)</p><p>設定完之後，當出現 <code>vim</code> 不認識的單字時，就會有醒目的顏色提示，提醒自己該回頭看一下是不是又拼錯字了。</p><p>當然，要有舒適的拼字檢查體驗，字典檔的維護也是很重要的一環。不過那又是另一個話題了..</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://thoughtbot.com/blog/vim-spell-checking">Vim Spell-Checking</a></li><li><a href="https://vimhelp.org/spell.txt.html#spell">Vim: spell.txt</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文件打錯字還好，隨時可以修。
但在 commit message 中打錯字，可是會流傳千古。&lt;/p&gt;
&lt;p&gt;身為一個 RD，有個極簡的解決方法..
把底下這行設定放到 &lt;code&gt;.vimrc&lt;/code&gt; 內即可。 (O&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="tips" scheme="https://blog.bitisle.net/categories/tips/"/>
    
    
    <category term="git" scheme="https://blog.bitisle.net/tags/git/"/>
    
    <category term="vim" scheme="https://blog.bitisle.net/tags/vim/"/>
    
    <category term="spell" scheme="https://blog.bitisle.net/tags/spell/"/>
    
  </entry>
  
  <entry>
    <title>Google 更新 Go 的社群行為準則</title>
    <link href="https://blog.bitisle.net/2021/09/23/golang-coc-update.html"/>
    <id>https://blog.bitisle.net/2021/09/23/golang-coc-update.html</id>
    <published>2021-09-23T13:18:47.000Z</published>
    <updated>2021-09-23T13:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天 Go blog 上出新文章，說要更新 Code of Conduct。</p><p>一直一來覺得每個社群的 CoC 都寫得差不多，不外乎是要互相尊重、開放透明、建設性發言等等。也因為都差不多，平常也不會去細看。反正就是些正常人該有的道德觀。因此，看到說要更新 Code of Conduct 讓我感到有點好奇。</p><p>讀一讀讀下去，其實這次 Go community 的 CoC 就是新增一條：</p><blockquote><p><strong>Be responsible.</strong> What you say and do matters. Take responsibility …</p></blockquote><p>沒想到連這個都要寫進 CoC …。可能 Go 的核心開發團隊看 issue 真的看到心累了？ XD</p><p>See: <a href="https://go.dev/blog/conduct-2021">Code of Conduct Updates - go.dev</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天 Go blog 上出新文章，說要更新 Code of Conduct。&lt;/p&gt;
&lt;p&gt;一直一來覺得每個社群的 CoC 都寫得差不多，不外乎是要互相尊重、開放透明、建設性發言等等。
也因為都差不多，平常也不會去細看。反正就是些正常人該有的道德觀。
因此，看到說要更新 C</summary>
      
    
    
    
    <category term="news" scheme="https://blog.bitisle.net/categories/news/"/>
    
    
    <category term="golang" scheme="https://blog.bitisle.net/tags/golang/"/>
    
    <category term="community" scheme="https://blog.bitisle.net/tags/community/"/>
    
  </entry>
  
  <entry>
    <title>單台機器的 Ceph 部署</title>
    <link href="https://blog.bitisle.net/2021/08/08/single-node-ceph-cluster.html"/>
    <id>https://blog.bitisle.net/2021/08/08/single-node-ceph-cluster.html</id>
    <published>2021-08-08T03:52:24.000Z</published>
    <updated>2021-08-08T03:52:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原由"><a href="#原由" class="headerlink" title="原由"></a>原由</h2><p>Ceph 的預設設定對資料的 replica 行為要求嚴格。若只有單台機器或是硬碟數量受限，往往架設起來的 Ceph 無法順利存放資料。</p><p>此篇筆記關注的目標如下</p><blockquote><p>若想要用最少資源，建立可用的 Ceph 環境，需要做哪些額外的調整？</p></blockquote><h2 id="背景知識"><a href="#背景知識" class="headerlink" title="背景知識"></a>背景知識</h2><p>Ceph 是一套開源的儲存叢集 solution。 可以整合多個儲存設備並在其上提供RADOSGW, RBD, Ceph FS 等不同層級的存取介面。</p><p><img src="https://docs.ceph.com/en/latest/_images/stack.png" alt="ceph-stack"></p><p>對於每個儲存設備 (HDD, SSD)，Ceph 會建立對應的 OSD 來管理儲存設備。有了儲存設備之後，Ceph 會建立邏輯上的 pool 作為管理空間的單位。Pool 底下會有多個 PG(placement group) 作為實際存放資料至 OSD 中的區塊。</p><p>在 Ceph 的預設設定中，一般 pool 的 replica 行為如下</p><ul><li>要有三份 replica</li><li>replica 要分散在不同的 host 上</li></ul><p>在開發環境中，資料掉了其實並無傷大雅，三份 replica 意味著儲存空間的浪費。且若資料真的要放在不同的 host 上，連同 replica 三份這點，我們就至少要開三台機器，增加無謂的管理成本。</p><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>假設我們都是透過 <code>cephadm bootstrap</code> 來架設 Ceph。</p><p>Ceph cluster 建立好，也設定完需要的 OSD 之後，就可以來建立 pool。</p><p>根據 pool 的目的不同，要解決單台機器部署 Ceph 的限制，大概會有兩種做法。</p><h3 id="降低-Pool-Size"><a href="#降低-Pool-Size" class="headerlink" title="降低 Pool Size"></a>降低 Pool Size</h3><p>Pool size 此術語意味著該 pool 下的 PG 要 replica 幾份。若某 pool 是拿供他人存放資料，或是會使用較多空間的，可以把 size 降為 1。</p><p>調整完之後就相當於該 pool 內的所有資料都不會有 replica。</p><p>範例如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create &quot;&lt;pool name&gt;&quot;</span><br><span class="line">ceph osd pool set &quot;&lt;pool name&gt;&quot; size 1</span><br><span class="line">ceph osd pool application enable &quot;&lt;pool name&gt;&quot; rbd</span><br></pre></td></tr></table></figure><h3 id="調整-Choose-Leaf-行為"><a href="#調整-Choose-Leaf-行為" class="headerlink" title="調整 Choose Leaf 行為"></a>調整 Choose Leaf 行為</h3><p>Ceph 有定義不同層級的資料分散設定。預設值為 <code>host</code>，意味著只有一台機器的情況下，資料會無法複製。若調整為 <code>osd</code>，只要該機器上有多顆硬碟即可滿足複製條件。若是針對 Ceph 自行建立出來，管理 meta data 的 pool (e.g. <code>device_health_metrics</code>)可以考慮使用此方式處理。</p><p>設定方式大概有兩種。</p><p><strong>方法一</strong>: 調整 Ceph global 設定</p><p>編輯 <code>/etc/ceph.conf</code> 並在 global section 下加入 <code>osd_crush_chooseleaf_type</code> 設定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">...</span><br><span class="line">    osd_crush_chooseleaf_type = 0</span><br></pre></td></tr></table></figure><p>或是直接執行 command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config set global osd_crush_chooseleaf_type 0</span><br></pre></td></tr></table></figure><p>這邊的 <code>0</code> 代表 OSD。預設的對應列表如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type 0 osd</span><br><span class="line">type 1 host</span><br><span class="line">...</span><br><span class="line">type 9 zone</span><br><span class="line">type 10 region</span><br><span class="line">type 11 root</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>: 修改 crush map 內容</p><p>筆者有注意到有時即使有執行方法一，pool 還是不會受到設定影響。 (相關知識還太少，不太確定具體原因) 不過針對此狀況，還有第二個方法可以使用。</p><p>此方法會用到 <code>crushtool</code> 指令 (Ubuntu 中需要額外安裝 <code>ceph-base</code> 套件)</p><p>首先執行指令將目前的 crush map 撈出來</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph osd getcrushmap -o &quot;compiled-crush-map&quot;</span><br><span class="line">crushtool -d &quot;compiled-crush-map&quot; -o &quot;crush-map&quot;</span><br></pre></td></tr></table></figure><p>接著修改 <code>crush-map</code> 檔案內容，應該會有一行有 <code>step chooseleaf</code> 開頭的設定，把最後的type 從 <code>host</code> 調整為 <code>osd</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Before</span></span><br><span class="line">step chooseleaf firstn &lt;number&gt; type host</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">After</span></span><br><span class="line">step chooseleaf firstn &lt;number&gt; type osd</span><br></pre></td></tr></table></figure><p>最後將修改好的 crush map 設定塞回去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crushtool -c &quot;crush-map&quot; -o &quot;compiled-crush-map&quot;</span><br><span class="line">ceph osd setcrushmap -i &quot;compiled-crush-map&quot;</span><br></pre></td></tr></table></figure><p>相關 reference link</p><ul><li><a href="https://docs.ceph.com/en/latest/rados/configuration/common/">Common Settings — Ceph Documentation</a></li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/1.2.3/html/installation_guide_for_centos_x86_64/create_a_cluster">Chapter 4. Create a Cluster Red Hat Ceph Storage 1.2.3 | Red Hat Customer Portal</a></li><li><a href="https://docs.ceph.com/en/latest/rados/operations/crush-map/">CRUSH Maps — Ceph Documentation</a></li><li><a href="https://docs.ceph.com/en/latest/rados/operations/crush-map-edits/">Manually editing a CRUSH Map — Ceph Documentation</a></li><li><a href="https://docs.ceph.com/en/latest/rados/operations/crush-map/">CRUSH Maps — Ceph Documentation</a></li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>筆者在公司業務並不負責維護 production 的 Ceph cluster，僅是為了建立 Kubernetes開發環境，需要有個基本會動的 Ceph。</p><p>為了用最少資源建立 Ceph 環境，需要調整相關設定來改變 Ceph 行為。只可惜相關的資源不是很夠，一路跌跌撞撞下來，決定寫下這篇筆記，希望造福未來的自己，也同時照顧他人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原由&quot;&gt;&lt;a href=&quot;#原由&quot; class=&quot;headerlink&quot; title=&quot;原由&quot;&gt;&lt;/a&gt;原由&lt;/h2&gt;&lt;p&gt;Ceph 的預設設定對資料的 replica 行為要求嚴格。
若只有單台機器或是硬碟數量受限，往往架設起來的 Ceph 無法順利存放資料。&lt;</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="ceph" scheme="https://blog.bitisle.net/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>NATS 與 JetStream 簡易介紹</title>
    <link href="https://blog.bitisle.net/2021/07/28/nats-brief-intro.html"/>
    <id>https://blog.bitisle.net/2021/07/28/nats-brief-intro.html</id>
    <published>2021-07-28T16:23:00.000Z</published>
    <updated>2021-07-28T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因公司業務在玩一套相對新的 MQ: NATS。因為官方文件不慎清楚且有些地方與直覺不同，造成起步緩慢。</p><p>以下簡單紀錄一下剛入門時應知道的事情。</p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><p>相較 RabbitMQ, Kafka 等，<a href="https://nats.io/">NATS</a> 是一套較為年輕的 MQ。雖然有部分子專案的版本未達 v1.0，但官方宣稱已經接近 production ready。</p><p>NATS 從一開始就是針對 cloud service 設計，cluster mode 的水平擴展，node 之間的身分驗證及 TLS 通訊設計看起來都還不錯。</p><p>NATS 的 message 並無特別限制，在 client library 內任何的 byte sequence 都可以成為 message。</p><p>NATS 有以下三個模式(以及其對應的 client library)。</p><h3 id="NATS-NATS-Core"><a href="#NATS-NATS-Core" class="headerlink" title="NATS (NATS Core)"></a>NATS (NATS Core)</h3><p>NATS 專案從一開始發展時的基本模式。 支援 <strong>Pub&#x2F;Sub</strong> pattern 並提供 <code>at-most-once</code> 語意。</p><h3 id="NATS-Streaming"><a href="#NATS-Streaming" class="headerlink" title="NATS Streaming"></a>NATS Streaming</h3><p>NATS Streaming 是一套疊在 NATS 上面形成的 solution。</p><p>因為設計上的問題，後來又有了 JetStream，所以我們基本上不用理它，只要知道 NATS Streaming 和JetStream 不一樣，翻文件的時候不要翻錯即可。</p><h3 id="JetStream"><a href="#JetStream" class="headerlink" title="JetStream"></a>JetStream</h3><p>JetStream 是後來做在 NATS 內，可選擇是否啟用的子系統。 藉由 JetStream，可以實作 <strong>Producer&#x2F;Consumer</strong> pattern 並提供 <code>at-least-once</code> 語意。</p><p>Server side 沒什麼需要注意的，只要用較新版的 NATS image 並啟用設定即可。Client 開發則需要注意一些概念。</p><ul><li>Subject: NATS 最初的概念，代表一些 message 的集合。</li><li>Stream: 建立於一或多個 Subject 之上，可將這些 subject 內的 message 統整起來，並放入 persistent storage。</li><li>Consumer: 建立在某個 Stream 之下，可以依序的 consume 屬於此 stream 的特定 message。</li></ul><p>需要注意的是，不只 Subject 與 Stream，Consumer 本身也是建立在 NATS server 中的一個物件。當利用 client library create 一個 Consumer 時，並不是該 process 本身成為一個 consumer，而是 NATS server 中被創了一個 Consumer 物件，準備去使用 Stream 裡面的 message。</p><p>JetStream client library 並沒有提供一個對稱的 producer&#x2F;consumer API。基於術語的限制以及為了避免誤會，以下在稱呼一般所稱的 producer&#x2F;consumer 時，會特別加上 <strong>role</strong> 後綴來表示。</p><p>Producer role: 要使用 NATS library 內的 Publish API，將產生的 message 推送至某個 Subject 內。</p><p>Consumer role: 要使用 JetStream library 內的 Stream API，在 NATS server 上對目標Subject 建立 Stream，接著使用 JetStream Consumer API，在 NATS server 中建立屬於該 Stream 的 Consumer。以上都完成之後，即可利用 Consumer 上的 <code>NextMsg</code> 來消耗 message。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>JetStream 的 API 設計並不常見，需要先認知到與既有設計的差別之處才能開始開發。不過其 cloud native 的架構設計或許可以在維運上面勝過其他老牌的 MQ solution。</p><p>今天就先寫到這裡，如果有哪天有興趣再補吧。 :D</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://gcoolinfo.medium.com/comparing-nats-nats-streaming-and-nats-jetstream-ec2d9f426dc8">Comparing NATS, NATS Streaming and NATS JetStream | by George Koulouris | Medium</a></li></ul><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>Golang sample code:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/nats-io/jsm.go&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/nats-io/jsm.go/api&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/nats-io/nats.go&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullSubject <span class="type">string</span> = <span class="string">&quot;report_task.scheduled&quot;</span></span><br><span class="line"><span class="keyword">var</span> wildcardSubject <span class="type">string</span> = <span class="string">&quot;report_task.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumeOne</span><span class="params">(doneChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">msg, err := consumer.NextMsg()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Fail to get message: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Consume get task: %s\n&quot;</span>, <span class="type">string</span>(msg.Data))</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line"><span class="keyword">if</span> err := msg.Ack(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Fail to ack the message %s: %v\n&quot;</span>, <span class="type">string</span>(msg.Data), err)</span><br><span class="line">&#125;</span><br><span class="line">doneChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProduceAndConsume</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">producerStopChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">consumerStopChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"><span class="keyword">var</span> taskCount <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; taskCount; idx++ &#123;</span><br><span class="line">taskName := fmt.Sprintf(<span class="string">&quot;task #%d&quot;</span>, rand.Int())</span><br><span class="line">nc.Publish(fullSubject, []<span class="type">byte</span>(taskName))</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Producer produce: %s\n&quot;</span>, taskName)</span><br><span class="line">&#125;</span><br><span class="line">producerStopChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; taskCount; idx++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">consumeOne(consumerStopChan)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;-producerStopChan</span><br><span class="line"><span class="keyword">for</span> idx := <span class="number">0</span>; idx &lt; taskCount; idx++ &#123;</span><br><span class="line">&lt;-consumerStopChan</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ctx context.Context</span><br><span class="line"><span class="keyword">var</span> cancel context.CancelFunc</span><br><span class="line"><span class="keyword">var</span> nc *nats.Conn</span><br><span class="line"><span class="keyword">var</span> stream *jsm.Stream</span><br><span class="line"><span class="keyword">var</span> consumer *jsm.Consumer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), <span class="number">10</span>*time.Second)</span><br><span class="line">nc, err = nats.Connect(nats.DefaultURL, nats.UserInfo(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;password&quot;</span>), nats.UseOldRequestStyle())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsmgr, err := jsm.New(nc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">streamName := <span class="string">&quot;ReportTask&quot;</span></span><br><span class="line">stream, err = jsmgr.LoadOrNewStreamFromDefault(streamName,</span><br><span class="line">api.StreamConfig&#123;</span><br><span class="line">Subjects:     []<span class="type">string</span>&#123;wildcardSubject&#125;,</span><br><span class="line">Storage:      api.FileStorage,</span><br><span class="line">Retention:    api.LimitsPolicy,</span><br><span class="line">Discard:      api.DiscardOld,</span><br><span class="line">MaxConsumers: <span class="number">-1</span>,</span><br><span class="line">MaxMsgs:      <span class="number">-1</span>,</span><br><span class="line">MaxBytes:     <span class="number">-1</span>,</span><br><span class="line">MaxAge:       <span class="number">24</span> * time.Hour,</span><br><span class="line">MaxMsgSize:   <span class="number">-1</span>,</span><br><span class="line">Replicas:     <span class="number">1</span>,</span><br><span class="line">NoAck:        <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumerName := <span class="string">&quot;Generator&quot;</span></span><br><span class="line">consumer, err = stream.LoadOrNewConsumerFromDefault(consumerName,</span><br><span class="line">api.ConsumerConfig&#123;</span><br><span class="line">Durable:         consumerName,</span><br><span class="line">DeliverPolicy:   api.DeliverNew,</span><br><span class="line">FilterSubject:   fullSubject,</span><br><span class="line">AckPolicy:       api.AckExplicit,</span><br><span class="line">AckWait:         <span class="number">30</span> * time.Second,</span><br><span class="line">MaxDeliver:      <span class="number">5</span>,</span><br><span class="line">ReplayPolicy:    api.ReplayInstant,</span><br><span class="line">SampleFrequency: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shutdown</span><span class="params">()</span></span> &#123;</span><br><span class="line">cancel()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">setup()</span><br><span class="line">code := m.Run()</span><br><span class="line">shutdown()</span><br><span class="line">os.Exit(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近因公司業務在玩一套相對新的 MQ: NATS。
因為官方文件不慎清楚且有些地方與直覺不同，造成起步緩慢。&lt;/p&gt;
&lt;p&gt;以下簡單紀錄一下剛入門時應知道的事情。&lt;/p&gt;
&lt;h2 id=&quot;Guide&quot;&gt;&lt;a href=&quot;#Guide&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="golang" scheme="https://blog.bitisle.net/tags/golang/"/>
    
    <category term="nats" scheme="https://blog.bitisle.net/tags/nats/"/>
    
    <category term="mq" scheme="https://blog.bitisle.net/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title>GitLab 更換自家 GPG Key</title>
    <link href="https://blog.bitisle.net/2021/06/17/gitlab-revoke-gpg-key.html"/>
    <id>https://blog.bitisle.net/2021/06/17/gitlab-revoke-gpg-key.html</id>
    <published>2021-06-17T03:10:00.000Z</published>
    <updated>2021-06-17T03:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天 GitLab 在自家 blog 上公告 revoke 簽署 package 的 GPG key。</p><blockquote><p>We recently became aware of an instance where this key and other tokensused to distribute official GitLab Runner packages and binaries were notsecured according to GitLab’s security policies.</p></blockquote><blockquote><p>We have not found any evidence of unauthorized modification of the packagesor access to the services storing them.</p></blockquote><p>並不是因為 key 被 compromise，僅是因為 key 不符合公司的安全規範，所以就進行了一次 rekey。</p><p>GPG key rekey 並不如換憑證一樣，只要重簽一張就好 (因為信賴建立在已知的第三方 CA 上)。GPG key rekey 需要透過可信管道重新宣告 fingerprint 並請大家 import 新的 key。這個轉換的成本，相較換憑證應是高非常多且難以量化的。</p><p>沒想到居然僅為了不合安全規範就進行 rekey，不愧是國際一線的軟體公司！</p><p>See: <a href="https://about.gitlab.com/blog/2021/06/16/gpg-key-used-to-sign-gitlab-runner-packages-rotated/">The GPG key used to sign GitLab Runner packages has been rotated | GitLab</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天 GitLab 在自家 blog 上公告 revoke 簽署 package 的 GPG key。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We recently became aware of an instance where this key and other </summary>
      
    
    
    
    <category term="news" scheme="https://blog.bitisle.net/categories/news/"/>
    
    
    <category term="gitlab" scheme="https://blog.bitisle.net/tags/gitlab/"/>
    
    <category term="gnupg" scheme="https://blog.bitisle.net/tags/gnupg/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 新功能: Remote Repositories</title>
    <link href="https://blog.bitisle.net/2021/06/12/vscode-feature-remote-repositories.html"/>
    <id>https://blog.bitisle.net/2021/06/12/vscode-feature-remote-repositories.html</id>
    <published>2021-06-12T08:35:00.000Z</published>
    <updated>2021-06-12T08:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>VS Code 在 <a href="https://code.visualstudio.com/updates/v1_57">1.57</a> 版中，Remote Development 系列 extension 加入了新成員:<a href="https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub">Remote Repositories</a>。</p><p>有了這個 extension 之後，如果遇上臨時想看的 project，就可以直接在 VS Code中叫出來看，不需要事先 clone 至某個 local 資料夾。</p><p>不過.. 因為這個 extension 實際上是建一個<a href="https://github.com/microsoft/vscode/wiki/Virtual-Workspaces">Virtual Workspaces</a>並把 code 放在裡面閱覽，所以用 Remote Repositories 開出來的 workspace 功能非常受限。諸如 Debug, Terminal 及大部分的 extension 基本上都不能用。但話雖如此，當看 code 看一看想要開始進行比較深入的修改及除錯時，其實也是有提供轉換成一般 workspace 的功能。 使用上非常方便！</p><p>可惜的是，目前此 extension 支援的 remote repository 種類只有 GitHub。且如同其他 Remote Development Series，這個 extension 並非 open source project：</p><ul><li><a href="https://code.visualstudio.com/docs/remote/faq#_why-arent-the-remote-development-extensions-or-their-components-open-source">Visual Studio Code Remote Development Frequently Asked Questions</a></li><li><a href="https://github.com/VSCodium/vscodium/issues/196">Cannot use Remote Development extension pack · Issue #196 · VSCodium&#x2F;vscodium</a></li></ul><p>未來會不會支援 GitHub 以外的 Git repositories，甚至其他種類的 VCS，只能看微軟爸爸的眼色了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VS Code 在 &lt;a href=&quot;https://code.visualstudio.com/updates/v1_57&quot;&gt;1.57&lt;/a&gt; 版中，
Remote Development 系列 extension 加入了新成員:
&lt;a href=&quot;https://mar</summary>
      
    
    
    
    <category term="news" scheme="https://blog.bitisle.net/categories/news/"/>
    
    
    <category term="github" scheme="https://blog.bitisle.net/tags/github/"/>
    
    <category term="development" scheme="https://blog.bitisle.net/tags/development/"/>
    
    <category term="ide" scheme="https://blog.bitisle.net/tags/ide/"/>
    
    <category term="vscode" scheme="https://blog.bitisle.net/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages 與 GitLab Pages 架設 Blog</title>
    <link href="https://blog.bitisle.net/2021/06/06/github-pages-gitlab-pages.html"/>
    <id>https://blog.bitisle.net/2021/06/06/github-pages-gitlab-pages.html</id>
    <published>2021-06-06T13:00:00.000Z</published>
    <updated>2021-06-06T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>筆者最近把個人 blog 的產生工具從 GitHub Pages 預設的 <a href="https://jekyllrb.com/">Jekyll</a>換成 <a href="https://hexo.io/">Hexo</a>，有了一點心得。 而且不只 GitHub Pages，筆者在公司業務中也有大量使用 GitLab Pages 來產生文件及測試報表，算是有累積不少經驗。</p><p>趁著印象還深刻時，寫點筆記，替這兩個相同性質的服務做基本的介紹。</p><h2 id="Pages-服務與-Static-Site-Generator"><a href="#Pages-服務與-Static-Site-Generator" class="headerlink" title="Pages 服務與 Static Site Generator"></a>Pages 服務與 Static Site Generator</h2><p>GitHub &#x2F; GitLab Pages 可以將一組靜態網頁內容 (html, css, js 等)，透過 GitHub &#x2F; GitLab的伺服器，host 在某個 URL 底下。 網頁產生工具 (Static Site Generator, 下稱 SSG) 則是一個可以將用 Markdown 撰寫的文章，轉化成漂亮的靜態網頁內容的工具。常見的 SSG 有 Jekyll(Ruby), Hugo(Go),Hexo(JavaScript) 等。</p><p>若將 SSG 工具與 GitHub &#x2F; GitLab Pages 服務，搭配使用，<strong>寫作者只需要寫寫簡單的 Markdown 並 push commit，就能得到一個漂亮的 blog 或是文件網頁。</strong>筆者的個人 blog 及公司的工作筆記即是使用這類流程架設。</p><p>整體流程大概如下圖所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">               +   GitHub            +     github.io</span><br><span class="line">Local Project  |          Project    |               site</span><br><span class="line">               |   GitLab            |     gitlab.io</span><br><span class="line">               +                     +</span><br><span class="line"></span><br><span class="line">+----------+        +----------+  Build &amp;  +------+  User</span><br><span class="line">| Markup   |  Push  | Markup   |  Deploy   | Site |  Browse</span><br><span class="line">| config.. | +----&gt; | Config.. | +-------&gt; |      | +-------&gt;</span><br><span class="line">+----------+        +----------+           +------+</span><br></pre></td></tr></table></figure><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p><a href="https://pages.github.com/">GitHub Pages</a> 基本上會有兩種主要的使用方式。可以直接使用 GitHub Pages，或是透過 GitHub Pages 的 Jekyll 整合功能。前者需要的技術背景與設定步驟均較複雜，後者較簡單但缺少了根據個別需求調整的機會。</p><h3 id="Native-GitHub-Pages"><a href="#Native-GitHub-Pages" class="headerlink" title="Native GitHub Pages"></a>Native GitHub Pages</h3><p>若直接使用 GitHub Pages，使用方式是: 將 SSG 產生的網頁擺放至某 branch (預設為 <code>gh-pages</code>)的 <code>/</code> 或 <code>/docs</code> 目錄。 每次該 branch 被更新時，GitHub 就會將最新版本的網頁內容，呈現在 <code>https://&lt;username&gt;.github.io/&lt;project&gt;</code> 連結下。</p><p>早期這個 push brach 的動作是蠻麻煩的，但後來有了 GitHub Action 之後，產生網站和後 push branch 的動作都可以在 GitHub 提供的環境完成，非常方便。</p><p>筆者個人使用的 job 描述檔如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/blog.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">build-and-deploy-blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;master&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2.3.4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2.1.5</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">12.</span><span class="string">x</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependent</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">blog</span> <span class="string">posts</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>若不想使用 GitHub 提供的 domain，也可以參照<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">官方文件</a>，使用自己購買的 domain 來架設網站。只要設定完成，GitHub 也可以一併幫使用者申請 custom domain 需要的 HTTPS 憑證。</p><p>比方說筆者的 blog 原本可存取的位置應是 <code>https://wdhongtw.github.io/blog</code>，但有設定custom domain 後，目前是透過 <code>https://blog.bitisle.net</code> 來存取架在 GitHub Pages 上的 blog。</p><p><img src="/assets/images/f0b7ac13-d964-496f-ab78-1fed9a8a742b.png"></p><h3 id="GitHub-Pages-Jekyll"><a href="#GitHub-Pages-Jekyll" class="headerlink" title="GitHub Pages Jekyll"></a>GitHub Pages Jekyll</h3><p>前述 (Native) GitHub Pages 的使用方式會需要自己 push branch。但若 GitHub 偵測到 project 使用的 SSG 是 Jekyll，GitHub 會自動處理產生網頁以及後續部屬到 <code>https://&lt;username&gt;.github.io/&lt;project&gt;</code> 的工作。(連 <code>gh-pages</code> branch 都省了，整個 project 會非常乾淨。)</p><p>此方法相當容易上手，也是 GitHub Pages 教學文件預設的使用方式。但因為產生網站的環境是由 GitHub 協助處理，能使用的 Jekyll plugin 自然也是受到限制。</p><p>說是受到限制，但以一般使用情境應該也很夠了。諸如 RSS feed, sitemap, Open Graph metadata等現代 blog 必備的功能都有自帶。若想知道有那些 Jekyll plugin 可用，可至 <a href="https://pages.github.com/versions/">Dependency versions | GitHub Pages</a>查閱。</p><h3 id="Compare-Native-GitHub-Page-with-GitHub-Pages-and-Jekyll"><a href="#Compare-Native-GitHub-Page-with-GitHub-Pages-and-Jekyll" class="headerlink" title="Compare Native GitHub Page with GitHub Pages and Jekyll"></a>Compare Native GitHub Page with GitHub Pages and Jekyll</h3><p>簡單比較上述兩種方式如下</p><table><thead><tr><th></th><th>GitHub Page</th><th>GitHub Page with Jekyll</th></tr></thead><tbody><tr><td>SSG Tool</td><td>on your choice</td><td>only Jekyll</td></tr><tr><td>Deployment</td><td>push generated site</td><td>done by GitHub</td></tr><tr><td>Customization</td><td>any plugins of SSG</td><td>limited Jekyll plugin list</td></tr></tbody></table><h2 id="GitLab-Pages"><a href="#GitLab-Pages" class="headerlink" title="GitLab Pages"></a>GitLab Pages</h2><p><a href="https://about.gitlab.com/stages-devops-lifecycle/pages/">GitLab Pages</a>與 GitHub Pages 一樣，有將 SSG 產生的網頁 host 在特定網址的能力。以 GitLab 官方 host 的站台來說，網站會放在 <code>https://&lt;username&gt;.gitlab.io/&lt;project&gt;</code> 下。(私人或公司 host 的 GitLab instance 就要看各自的設定)</p><p>與 GitHub 不同的是，GitLab Pages 並不是透過 push branch 的方式部屬，且沒有針對特定 SSG 提供更進一步的自動部屬功能。</p><p>GitLab Pages 的使用方式是基於 GitLab CI Pipeline 的架構設計的。若想要部屬網站，一般的使用方式是在 pipeline 內產生網頁，接著將網頁內容擺放至為特定 job (<code>pages</code>) 的特定artifacts 目錄 (<code>public</code>) 中。 一旦有 pipeline jobs 達成此條件。 GitLab 就會把網頁內容部屬到對應的網址下。</p><p>筆者個人使用的 job 描述檔如下:(因為 GitHub Action 與 GitLab CI 的架構差異，寫起來比較簡潔)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ruby:3.0.1</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bundle</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">jekyll</span> <span class="string">build</span> <span class="string">--destination</span> <span class="string">public</span> <span class="string">--baseurl</span> <span class="string">&quot;$CI_PAGES_URL&quot;</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>至於其他 GitHub Pages 有的功能，如 custom domain，自動申請 HTTPS 憑證等，GitLab Pages也都有。 記得去 project 設定頁面設定即可。</p><p><img src="/assets/images/49f9611b-3d40-4425-beb6-317aeae0aa6e.png"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>在 2008 年 GitHub Pages 剛推出時，使用者都要自己手動 push <code>gh-pages</code> branch。後來 GitLab 推出基於 GitLab CI 的 Pages 服務之後，GitHub Pages使用體驗相較之下可說是非常糟糕。</p><p>但後來隨著 GitHub Actions 服務推出，以及社群維護的高品質<a href="https://github.com/marketplace/actions/github-pages-action">Pages 部屬 Action</a> 出現。GitHub &#x2F; GitLab Pages 的使用體驗已經變得相當接近。其他像是 custom domain 以及 HTTPS 的支援也都是免費的基本功能。</p><p>基於上述原因，許多早期的 <a href="https://mjswensen.com/blog/github-pages-vs-gitlab-pages/">比較文章</a>其實已經沒什麼參考價值。 若現在想架設新的 blog 等站台，只要選擇自己習慣的平台即可。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.github.com/en/pages">GitHub Pages Documentation - GitHub Docs</a></li><li><a href="https://docs.gitlab.com/ee/user/project/pages/">GitLab Pages | GitLab</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;筆者最近把個人 blog 的產生工具從 GitHub Pages 預設的 &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;
換成 &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;，有了一點心得。 而且不只 GitHu</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="github" scheme="https://blog.bitisle.net/tags/github/"/>
    
    <category term="gitlab" scheme="https://blog.bitisle.net/tags/gitlab/"/>
    
    <category term="blog" scheme="https://blog.bitisle.net/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 即日起支援使用 Security Key 進行 Git 操作</title>
    <link href="https://blog.bitisle.net/2021/05/11/github-ssh-fido-key.html"/>
    <id>https://blog.bitisle.net/2021/05/11/github-ssh-fido-key.html</id>
    <published>2021-05-11T00:00:00.000Z</published>
    <updated>2021-05-11T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 開始支援使用 security key 進行 Git 操作啦！</p><p>這應該是各家科技巨頭當中，第一個支援 security key 進行 SSH login 的服務吧。筆者昨天 5&#x2F;10 才在公司內分享如何使用 security key 來做 SSH login，沒想到 Yubico 和 GitHub 也剛好在昨天一起同步更新 blog 文章，通知大家這個新功能。喜極而泣..</p><ul><li><a href="https://github.blog/2021-05-10-security-keys-supported-ssh-git-operations/">Security keys are now supported for SSH Git operations - The GitHub Blog</a></li><li><a href="https://www.yubico.com/blog/github-now-supports-ssh-security-keys/">GitHub now supports SSH security keys - Yubico</a></li></ul><p>以下簡單介紹如何使用這個新功能。為了方便解說及避免誤會，後述內容均以正式名稱 authenticator 代稱 security key。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先當然要有一把 authenticator，如果還沒有，趕快去買一把囉。 :D</p><p><strong>第一步</strong>，在 authenticator 內產生新的 key pair。</p><p>產生 key pair 的流程和傳統放在檔案系統上的差不多，只是 key type 要指定代表 authenticator的 type。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa-sk</span><br></pre></td></tr></table></figure><p>產生的過程，根據不同的 authenticator，會有要求按一下 且&#x2F;或 輸入 PIN code 驗證身分。此步驟會在 authenticator 內產生一組 key pair，並將 public key 寫到檔案系統上。平常放 private key 的那個檔案還是會產生，不過這次裡面放的會是一個 key handle。</p><p><strong>第二步</strong>，透過 GitHub 的 web UI 上傳 public key</p><p>上傳完之後，沒意外就可以順利使用了，可以試著 clone 一些 project</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:github/secure_headers.git</span><br><span class="line">Cloning into &#x27;secure_headers&#x27;...</span><br><span class="line">Confirm user presence for key ECDSA-SK SHA256:........</span><br><span class="line">User presence confirmed</span><br></pre></td></tr></table></figure><p>若確認 OK，之後的 Git 操作都可以透過隨身攜帶的 authenticator 保護，只要按一下 authenticator 即可。</p><p>設定完之後，<strong>若沒有拿出 authenticator，就不能進行 push &#x2F; pull 操作。</strong>只要確保 authenticator 還在身上，就可以安心睡大覺。(再也不用擔心 private key 放在公司電腦上會被摸走了！)</p><h2 id="進階使用方式"><a href="#進階使用方式" class="headerlink" title="進階使用方式"></a>進階使用方式</h2><p>FIDO 2 authenticator 博大精深，除了上述的基本使用流程外，還有些細節可以設定。</p><p>以下分別介紹三個進階使用技巧：</p><h3 id="要求身分驗證-User-Verification-才能使用-Authenticator"><a href="#要求身分驗證-User-Verification-才能使用-Authenticator" class="headerlink" title="要求身分驗證 (User Verification) 才能使用 Authenticator"></a>要求身分驗證 (User Verification) 才能使用 Authenticator</h3><p>根據每個人平常保管鑰匙習慣的差異，可能有人會擔心 authenticator 真的被摸走。</p><p>但 authenticator 也有支援一定要驗甚身分 (e.g. PIN code or 指紋辨識) 後才能使用內部的 key pair 的功能。</p><p>要如何使用呢？ 只要在產生 key pair 的過程中多下一個 flag 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa-sk -O verify-required</span><br></pre></td></tr></table></figure><p>若之後要使用由此方式產生的 key pair，除了手指按一下 authenticator 之外，還會要求使用者輸入 PIN code 才能順利完成操作。如此即使 authenticator 被偷走了，也不用太緊張。</p><h3 id="全自動使用-Authenticator-避免-User-Presence-Check"><a href="#全自動使用-Authenticator-避免-User-Presence-Check" class="headerlink" title="全自動使用 Authenticator (避免 User Presence Check)"></a>全自動使用 Authenticator (避免 User Presence Check)</h3><p>若把 authenticator 插上電腦後，想要隨時隨地都進行 push &#x2F; pull，但不要每次都手按一下 authenticator。這種自動化的使用情境 OpenSSH 其實也是有支援的。</p><p>使用的方式也是在產生 key pair 時多帶一個參數。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa-sk -O no-touch-required</span><br></pre></td></tr></table></figure><p>同時在將 public key 部屬到目標機器上時，在 public key 該行前面多下 <code>no-touch-required</code>即可。 (詳情請見 <code>ssh-keygen(1)</code> 及 <code>sshd(8)</code>)</p><p>以此方始產生的 key pair 在使用時就不需要每次都手按一下，可以全自動使用。</p><p>不過，雖然 OpenSSH 有支援此種使用情境，<strong>但目前 GitHub 禁止這種使用方式</strong>。</p><p>節錄自上述 blog 文章</p><blockquote><p>While we understand the appeal of removing the need for the taps,we determined our current approach to require presence and intentionis the best balance between usability and security.</p></blockquote><p>所以在 GitHub 上，若想要全自動操作，只能回去用一般的 SSH key 或 API token 囉。</p><h3 id="避免手動複製-Key-Handle"><a href="#避免手動複製-Key-Handle" class="headerlink" title="避免手動複製 Key Handle"></a>避免手動複製 Key Handle</h3><p>前面有提到，原先檔案系統上用來放 private key 的檔案會變成拿來擺放 key handle。</p><p>這意味著，當我們想在新的機器上透過 SSH 進行 Git 操作時，除了拿出 authenticator 之外，也需要把原先的 key handle 檔案複製到新的機器上。且若 key handle 檔案掉了，該組 key pair 就不能使用了。</p><p>若要避免此問題，就要用上 authenticator 的另一個進階功能discoverable credentials &#x2F; resident keys 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ecdsa-sk -O resident</span><br></pre></td></tr></table></figure><p>使用此類型的 key pair 時，會在 authenticator 上消耗一些儲存空間。但換來的好處是，使用者可以在新的機器上，把 key handle 從 authenticator 內抽出來。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -K # extract discoverable credentials</span><br></pre></td></tr></table></figure><p>如此就不用手動複製擺放 key handle 的 private key 檔案了。</p><p>但要注意的是此類型 key pair 會消耗 authenticator 的空間。每把 authenticator 可以放多少 key pair 要再自行查閱官方文件。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上介紹了基本使用情境及三種可能的進階使用方式。</p><p>筆者在 2014 年第一次注意到 FIDO (U2F) 標準，當時就在想像沒有密碼的世界。如今，藉由 FIDO 2 security key 的普及，當初所想的美好願景似乎在慢慢地實現中..</p><p>希望未來能看到 security key 運用在更多場景上！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub 開始支援使用 security key 進行 Git 操作啦！&lt;/p&gt;
&lt;p&gt;這應該是各家科技巨頭當中，第一個支援 security key 進行 SSH login 的服務吧。
筆者昨天 5&amp;#x2F;10 才在公司內分享如何使用 security key </summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="github" scheme="https://blog.bitisle.net/tags/github/"/>
    
    <category term="fido" scheme="https://blog.bitisle.net/tags/fido/"/>
    
    <category term="git" scheme="https://blog.bitisle.net/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>延長或縮短 GPG 金鑰的過期時間 (Expiration Time)</title>
    <link href="https://blog.bitisle.net/2021/05/06/gpg-key-extend-expiration-date.html"/>
    <id>https://blog.bitisle.net/2021/05/06/gpg-key-extend-expiration-date.html</id>
    <published>2021-05-06T00:00:00.000Z</published>
    <updated>2021-05-06T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>筆者在 2018 年的時候開了第一個真的有在長期使用的 GPG 金鑰。</p><p>因為年少輕狂不懂事，當時特別把 primary key 設定成永遠不會過期。但演算法可能在未來被發現漏洞，電腦的運算能力也會越來越好，一把不會過期的 GPG 金鑰是先天上不合理的存在。考量到此問題，筆者後來又再修正了該金鑰的過期時間，以及整理這篇筆記…</p><h2 id="GPG-Key-可以延展過期時間？"><a href="#GPG-Key-可以延展過期時間？" class="headerlink" title="GPG Key 可以延展過期時間？"></a>GPG Key 可以延展過期時間？</h2><p>我想這應該是熟悉 X.509 憑證生態系的人最為驚訝的一件事情了。</p><p>我發現幾位公司主管並不知道這件事情，也促使我在經過一段時間後回來整理這篇文章。事實上，GPG key 不只是可以延展過期時間，這也是一般推薦的最佳慣例。</p><blockquote><p>People think that they don’t want their keys to expire,but you actually do. Why? Because you can always extend your expiration date,even after it has expired!</p></blockquote><p>See: <a href="https://riseup.net/en/security/message-security/openpgp/best-practices#use-an-expiration-date-less-than-two-years">OpenPGP Best Practices - riseup.net</a></p><p>使用者應該設一個較短的有效時間，並在後續有需要時延展過期時間。</p><p>GPG key 可以自己修改金鑰的過期時間，是因為 GPG key 和 X.509憑證有著本質上的區別。</p><blockquote><p>GPG key 的產生是透過 primary key 的 self-signature，而 X.509 憑證的簽署是由公正的第三方 CA 進行。</p></blockquote><p>X.509 憑證的過期時間是 CA 幫你簽署憑證時決定，自然無法隨意修改，大家也很習慣這件事情，但 GPG key 就不一樣了。GPG key 的有效時間是透過 key 的 self-signature 內所記載的時間決定。只要 primary (private) key 沒有遺失，持有者隨時可以重新自簽並修改時間。</p><p>只要認知到兩者本質上的差異，可以修改過期時間這件事情也就很好理解了。</p><h2 id="他人如何認定過期時間？"><a href="#他人如何認定過期時間？" class="headerlink" title="他人如何認定過期時間？"></a>他人如何認定過期時間？</h2><p>既然 GPG key 可以隨時重簽修改過期時間，那對他人來說，該如何判定某把 key 究竟什麼時候過期呢？</p><p>規則很簡單</p><blockquote><p>The latest self-signature takes precedence</p></blockquote><p>See: <a href="https://www.gnupg.org/gph/en/manual/c235.html">Key Management</a></p><p>若是透過 <code>gpg</code> tool 修改過期時間，舊的 self-signature 會被刪掉。因為只有一個 self-signature，修改完之後，只要重新把 key export 給他人，他人就可以知道新的過期時間。</p><p>若不是透過信賴管道直接把新簽的 key 給他人，而是透過 GPG key server，狀況會有點不一樣。</p><p>基於安全考量，GPG key server 是不允許部分或完全刪除 key 的，MIT 名下的 key server還特別寫了一篇 <a href="https://pgp.mit.edu/faq.html">FAQ</a> 來說明這件事。對於一把已存在的 key，使用者只能推新的 sub key 或新的 signature 上去。</p><p>因此，他人透過 key server 取得 key 時，也會拿到多個 signature。好在 signature 本身也有時戳，根據上述 “後者為準” 的規則，他人就可以知道正確的過期時間是何時。</p><p>有興趣的可以查看筆者的 GPG key 來確認這個行為</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver keys.gnupg.net --recv-keys C9756E05</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Get key from key server</span></span><br><span class="line"></span><br><span class="line">gpg --export C9756E05 | gpg --list-packets</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">One signature has <span class="string">&quot;key expires after ...&quot;</span> <span class="keyword">while</span> another doesn<span class="string">&#x27;t</span></span></span><br><span class="line"></span><br><span class="line">gpg -k C9756E05</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Validate that the key indeed expires at some time</span></span></span><br></pre></td></tr></table></figure><p>或是可以直接去 GnuPG 官方的 key server 查看:<a href="http://keys.gnupg.net/pks/lookup?op=vindex&fingerprint=on&search=0xC728B2BDC9756E05">Search results for ‘0xc728b2bdc9756e05’</a></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>翻閱文件研究的過程，慢慢感受到到 GPG 這個扣除 X.509 之外唯一成熟的 PKI生態系，究竟有多麼偉大。同時也看到很多值得細讀的 guideline 文件。</p><p>若有時間，真的該來好好吸收整理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;筆者在 2018 年的時候開了第一個真的有在長期使用的 GPG 金鑰。&lt;/p&gt;
&lt;p&gt;因為年少輕狂不懂事，當時特別把 primary key 設定成永遠不會過期。
但演算法可能在未來被發現漏洞，電腦的運算能力也會越來越好，
一把不會過期的 GPG 金鑰是先天上不合理的存在。</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="security" scheme="https://blog.bitisle.net/tags/security/"/>
    
    <category term="gnupg" scheme="https://blog.bitisle.net/tags/gnupg/"/>
    
  </entry>
  
  <entry>
    <title>保護存在檔案系統上的 Docker 登入密碼</title>
    <link href="https://blog.bitisle.net/2021/03/04/docker-credential-helper.html"/>
    <id>https://blog.bitisle.net/2021/03/04/docker-credential-helper.html</id>
    <published>2021-03-04T00:00:00.000Z</published>
    <updated>2021-03-04T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在企業內部的工作環境中，常會碰到需要存取 private registry 上的 image 的狀況。以 Docker 的工作流程來說，一般要透過執行 <code>docker login</code> 來存取 private registry。不過，若事先毛設定好 <em>docker credential helper</em>，執行 <code>docker login</code> 會導致我們的密碼 &#x2F; API token 直接以明文的方式寫在檔案系統上。</p><p>這篇筆記說明如何在 Linux 環境下安裝與設定 <em>docker credential helper</em>。</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>至 docker&#x2F;docker-credential-helpers 的 GitHub release 頁面下載最新版本的<code>docker-credential-secretservice</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/docker-credential-helpers/releases/download/v0.6.3/docker-credential-secretservice-v0.6.3-amd64.tar.gz &gt;secretservice.tar.gz</span><br></pre></td></tr></table></figure><p>解壓縮並把執行檔放到任意一個 PATH 資料夾內。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxv -f secretservice.tar.gz</span><br><span class="line">chmod +x docker-credential-secretservice</span><br><span class="line">mv docker-credential-secretservice ~/.local/bin</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>為了讓 <code>docker</code> 工具知道我們要用 credential helper，需要調整家目錄下的設定檔。</p><p>在設定檔 <code>~/.docker/config.json</code> 內加入 <code>credsStore</code> 設定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">EDITOR ~/.docker/config.json</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;credsStore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;secretservice&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>註: 此資料夾和 JSON 檔案可能不存在。若沒有自己創一個即可。</p><p>註: 根據文件，此欄位的值與是 helper binary 的後綴對齊，因為 Linux 環境使用的 binary 是<code>docker-credential-secretservice</code> 所以需要填入的值爲 <code>secretservice</code></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>如果已經有登入過某 registry，需要手動登出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout registry.example.com</span><br></pre></td></tr></table></figure><p>(重新) 登入該 registry。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login registry.example.com</span><br></pre></td></tr></table></figure><p>檢視 <code>~/.docker/config.json</code> 並確認對應的身分紀錄是空白的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;auths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;registry.example.com&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>若有安裝 Seahorse 程式的話，此時可以看到 secret 被放在 Login keyring 中。</p><p>如果設定錯誤的話，登入資訊會以編碼過的方式呈現在該紀錄中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;auths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;registry.example.com&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c3R...zE2&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Future-Reading"><a href="#Future-Reading" class="headerlink" title="Future Reading"></a>Future Reading</h2><ul><li><a href="https://docs.docker.com/engine/reference/commandline/login/">docker login - Docker Documentation</a></li><li><a href="https://github.com/docker/docker-credential-helpers">docker&#x2F;docker-credential-helpers</a></li><li><a href="https://wiki.archlinux.org/index.php/GNOME/Keyring">GNOME&#x2F;Keyring - ArchWiki</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在企業內部的工作環境中，常會碰到需要存取 private registry 上的 image 的狀況。
以 Docker 的工作流程來說，一般要透過執行 &lt;code&gt;docker login&lt;/code&gt; 來存取 private registry。
不過，若事先毛設定好 &lt;</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="docker" scheme="https://blog.bitisle.net/tags/docker/"/>
    
    <category term="secret" scheme="https://blog.bitisle.net/tags/secret/"/>
    
    <category term="security" scheme="https://blog.bitisle.net/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Audit Log 使用筆記</title>
    <link href="https://blog.bitisle.net/2020/10/22/kubernetes-auditing.html"/>
    <id>https://blog.bitisle.net/2020/10/22/kubernetes-auditing.html</id>
    <published>2020-10-22T00:00:00.000Z</published>
    <updated>2020-10-22T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在公司的工作環境中，有些業務需要部屬服務在 Kubernetes (下稱 K8s) 上。因此在專案早期，部門內的同事自架了 K8s cluster 來開發。</p><p>隨著時間流逝，各個 RD 開始上手 K8s 操作後，每天都有人在對 K8s 的 master 開發環境做修改。於是部門內開始產生一些令人煩躁的對話</p><ul><li>我看 K8s 上面有裝了某個 CRD，但沒有裝對應的 service 來用這個 CRD，這個是你裝的嗎？</li><li>Test namespace 裝了一個 Ingress rule 產生衝突了，那個 rule 是誰裝的？</li><li>…</li></ul><p>這些對話的共通點是：想知道 K8s 的狀態改變是誰造成的。但在部門自架的環境內，因為大家共用了一個 kubeconfig，所以根本無從找起..</p><p>於是我想辦法把開發用的 K8s 環境設定好 auditing log 的功能，並留下這篇筆記</p><h2 id="Audit-目標"><a href="#Audit-目標" class="headerlink" title="Audit 目標"></a>Audit 目標</h2><p>要做 audit 來確認每個人做了什麼操作，我需要達到兩個目標</p><ol><li>不同人員需要使用不同的身分存取 K8s API server</li><li>API server 需開啟 log 且 log 需保存在 persistent storage 上</li></ol><h2 id="身分驗證方式比較"><a href="#身分驗證方式比較" class="headerlink" title="身分驗證方式比較"></a>身分驗證方式比較</h2><p>參考 K8s 的 <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">Authenticating</a>官方文件，在不依賴外部服務的情況下，大概有三種身分驗證的方式</p><ul><li>X509 Client Certificate</li><li>Static Token File</li><li>Service Account Tokens</li></ul><p>以下分別介紹各方式的優缺點</p><h3 id="X509-Client-Certificate"><a href="#X509-Client-Certificate" class="headerlink" title="X509 Client Certificate"></a>X509 Client Certificate</h3><p>此方式依賴 TLS 的 client verification 功能，只要你有正確的憑證塞在 kubeconfig 裡即可使用。一般在做 cluster 初始化過程中拿到的 admin kubeconfig ，其內容即屬這一類。</p><p>此方式的優點為</p><ul><li>若採取嚴謹的使用者自行產生 key-CSR pair 再給 CA 簽署流程，因為僅使用者有 private key，出事時有高度信心一定是該使用者所為</li><li>除了自己的 user name 外，使用者可以從自己的憑證中直接確認操作 K8s 時會有那些 group 身分<ul><li>憑證內 subject 的 <em>CN</em> 對應 K8s user name, <em>O</em> 對應 K8s group name</li></ul></li></ul><p>此方式的缺點為</p><ul><li>K8s 不支援 X509 原生的 certificate revocation 功能，若有特定 client 憑證有問題，得整個 CA 換掉重來<ul><li>Upstream issue: <a href="https://github.com/kubernetes/kubernetes/issues/18982">Support for managing revoked certs</a> (opened for 5 years)</li></ul></li></ul><h3 id="Static-Token-File"><a href="#Static-Token-File" class="headerlink" title="Static Token File"></a>Static Token File</h3><p>K8s API server 在開啟時，可以設定一個檔案來記錄 token 與 user(group) 的 mapping 關係。Client 連上 API server 時，只要能拿出此 token，便會被視為對應的 user 進行後續權限檢查。</p><p>此方式的優點為</p><ul><li>設定簡單。需要新增&#x2F;刪除使用者或修改 token 時，只需修改一個檔案</li><li>Token 可長可短，可以做出較為可讀的 kubeconfig 檔案 (行寬 80 字元以內)</li></ul><p>此方式的缺點為</p><ul><li>static token file 設定有異動時需要重開 server</li></ul><h3 id="Service-Account"><a href="#Service-Account" class="headerlink" title="Service Account"></a>Service Account</h3><p>Service Account 是 K8s 原生設計給 K8s 內的 service 做 K8s 自我管理的機制。</p><p>此方式的優點為</p><ul><li>彈性極高，可在 runtime 直接透過 K8s API 產生新的 service account</li></ul><p>此方式的缺點為</p><ul><li>service account 屬 namespaced resource，若有多個 namespace 要相同 user，需要重複設定</li><li>產生的 audit log 較難做事後梳理<ul><li>K8s 有大量利用 service account 的自我管理行為，因此難以區隔使用者操作和 K8s 自身操作</li></ul></li><li>相較於 X509 或 static token 方式，service account 不能直接設定群組</li></ul><h2 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h2><p>若使用 <code>kubeadm</code> 安裝設定 K8s cluster，只有 <code>kubelet</code> 會作為一個 system service 運行在 host 中。其他如 K8s API server, scheduler 及 etcd 等都是跑在 master node 的 Docker container 環境中</p><p>以下說明均假設為此類環境進行操作。</p><h2 id="設定-Static-Token-File"><a href="#設定-Static-Token-File" class="headerlink" title="設定 Static Token File"></a>設定 Static Token File</h2><h3 id="K8s-Master-Node-設定修改"><a href="#K8s-Master-Node-設定修改" class="headerlink" title="K8s Master Node 設定修改"></a>K8s Master Node 設定修改</h3><p>新增 user token file <code>/etc/kubernetes/tokens.csv</code> (路徑可自行調整)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user-token,user-name,uid,&quot;optional-group,another-group&quot;</span><br><span class="line">fc27911e-73dd-46b0-8c57-86f2fe5fdd21,alice,alice@example.com,&quot;developer&quot;</span><br></pre></td></tr></table></figure><p>檔案為單純的 CSV 格式，包含四個欄位</p><ul><li>User Token: 任意字串，不一定要使用 UUID 格式</li><li>User Name: 使用此 token 身分驗證完成後得到的 user name</li><li>UID: 用途不明，會出現在 audit log 中<ul><li><blockquote><p>identifies the end user and attempts to be more consistent and unique than username</p></blockquote></li></ul></li><li>List of Group Name: (Optional) 使用此 token 身分驗證完成後得到的 group 身分</li></ul><p>設好 static token file 後，修改 API server 的 static pod 描述 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>。<code>user-tokens</code> 的 path 與前述設定對齊。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/root/manifests/kube-apiserver.yaml b/root/token-api-server.yaml</span></span><br><span class="line"><span class="comment">index 31c5f40..d4511ae 100644</span></span><br><span class="line"><span class="comment">--- a/root/manifests/kube-apiserver.yaml</span></span><br><span class="line"><span class="comment">+++ b/root/token-api-server.yaml</span></span><br><span class="line"><span class="meta">@@ -37,6 +37,7 @@</span> spec:</span><br><span class="line">     - --service-cluster-ip-range=10.96.0.0/12</span><br><span class="line">     - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span><br><span class="line">     - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span><br><span class="line"><span class="addition">+    - --token-auth-file=/etc/kubernetes/tokens.csv</span></span><br><span class="line">     image: k8s.gcr.io/kube-apiserver:v1.17.4</span><br><span class="line">     imagePullPolicy: IfNotPresent</span><br><span class="line">     livenessProbe:</span><br><span class="line"><span class="meta">@@ -71,6 +72,9 @@</span> spec:</span><br><span class="line">     - mountPath: /usr/share/ca-certificates</span><br><span class="line">       name: usr-share-ca-certificates</span><br><span class="line">       readOnly: true</span><br><span class="line"><span class="addition">+    - mountPath: /etc/kubernetes/tokens.csv</span></span><br><span class="line"><span class="addition">+      name: user-tokens</span></span><br><span class="line"><span class="addition">+      readOnly: true</span></span><br><span class="line">   hostNetwork: true</span><br><span class="line">   priorityClassName: system-cluster-critical</span><br><span class="line">   volumes:</span><br><span class="line"><span class="meta">@@ -98,4 +102,8 @@</span> spec:</span><br><span class="line">       path: /usr/share/ca-certificates</span><br><span class="line">       type: DirectoryOrCreate</span><br><span class="line">     name: usr-share-ca-certificates</span><br><span class="line"><span class="addition">+  - hostPath:</span></span><br><span class="line"><span class="addition">+      path: /etc/kubernetes/tokens.csv</span></span><br><span class="line"><span class="addition">+      type: FileOrCreate</span></span><br><span class="line"><span class="addition">+    name: user-tokens</span></span><br><span class="line"> status: &#123;&#125;</span><br></pre></td></tr></table></figure><p>上述修改內容的重點為</p><ul><li>將 master node 上的 user token 設定檔 mount 至 API server 的 container 內</li><li>設定 API server 去使用此 token 檔案</li></ul><h3 id="User-Token-File-後續維護"><a href="#User-Token-File-後續維護" class="headerlink" title="User Token File 後續維護"></a>User Token File 後續維護</h3><p>若之後需要修改 user token file，因為一些<a href="https://github.com/kubernetes/kubernetes/issues/44713">上游的限制</a>，API server pod 無法觀測到檔案的修改，即使 kill pod 再重啟也無法使用新的 token file。</p><p>不過我們可以透過修改 API server 描述檔的方式，穩定地重新部屬 API server，讓新的 token file 生效。</p><ul><li>編輯 <code>/etc/kubernetes/tokens.csv</code></li><li>修改 API server 描述檔 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code><ul><li>加入或修改 <code>metadata.annotations.lastModify</code> 欄位，填入合適字串</li></ul></li><li>修改後 kubelet 會偵測到檔案異動，並重新 apply <code>apiserver</code> pod</li></ul><h3 id="User-kubeconfig-設定"><a href="#User-kubeconfig-設定" class="headerlink" title="User kubeconfig 設定"></a>User kubeconfig 設定</h3><p>使用 <code>kubectl</code> 設定 user token</p><p><code>kubectl config set-credentials &lt;user-name&gt; --token=&lt;token&gt;</code></p><p>或是直接修改 kubeconfig 內的 user object</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alice</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">token:</span> <span class="string">fc27911e-73dd-46b0-8c57-86f2fe5fdd21</span></span><br></pre></td></tr></table></figure><h2 id="Log-設定"><a href="#Log-設定" class="headerlink" title="Log 設定"></a>Log 設定</h2><p>當各個使用者操作 K8s 的身分確實有被切分開之後，即可進行後續的 audit log 設定動作。</p><p>Audit log 必須在吻合事先設定的 match rule 才會被記錄下來。根據 <a href="https://kubernetes.io/docs/tasks/debug-application-cluster/audit/">Auditing 文件</a> 說明，server 在判斷每個事件的 log level 時，是採取 first match 的規則進行。第一個吻合的規則會決定此事件是否紀錄以及紀錄的詳細程度。</p><blockquote><p>The first matching rule sets the “audit level” of the event.</p></blockquote><h3 id="API-Server-Audit-設定"><a href="#API-Server-Audit-設定" class="headerlink" title="API Server Audit 設定"></a>API Server Audit 設定</h3><p>在 master node 上設定 audit policy <code>/etc/kubernetes/audit-policy.yaml</code> (路徑可自行調整)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">audit.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Policy</span></span><br><span class="line"><span class="attr">omitStages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;RequestReceived&quot;</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Metadata</span></span><br><span class="line">  <span class="attr">userGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;developer&quot;</span></span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;deletecollection&quot;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Metadata</span></span><br><span class="line">  <span class="attr">userGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;developer&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;secrets&quot;</span>, <span class="string">&quot;configmaps&quot;</span>]</span><br></pre></td></tr></table></figure><p>此設定有幾個重點</p><ul><li>global 的 <em>omitStages</em> 設定<ul><li>所有 API request 都會經過 <em>RequestReceived</em> stage</li><li>省略此 stage 可以避免所有的 request 都產生兩筆 log</li></ul></li><li>Rule 以 <em>userGroups</em> 進行篩選<ul><li>若已知要紀錄的 user group 範圍，明定 group 可避免記錄到大量的 K8s 自身維護的事件</li></ul></li><li>設定動詞範圍記錄所有的 modify 操作</li><li>設定敏感的 resource 種類 (e.g. secrets &amp; configmaps) 記錄所有操作</li></ul><p>接著修改 API server 的 static pod 描述 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code>。<code>audit</code> hostPath volume 需與前述設定對齊</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/root/token-api-server.yaml b/root/audit-token-api-server.yaml</span></span><br><span class="line"><span class="comment">index d4511ae..0e07f7f 100644</span></span><br><span class="line"><span class="comment">--- a/root/token-api-server.yaml</span></span><br><span class="line"><span class="comment">+++ b/root/audit-token-api-server.yaml</span></span><br><span class="line"><span class="meta">@@ -38,6 +38,10 @@</span> spec:</span><br><span class="line">     - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span><br><span class="line">     - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span><br><span class="line">     - --token-auth-file=/etc/kubernetes/tokens.csv</span><br><span class="line"><span class="addition">+    - --audit-policy-file=/etc/kubernetes/audit-policy.yaml</span></span><br><span class="line"><span class="addition">+    - --audit-log-path=/var/log/kubernetes/audit.log</span></span><br><span class="line"><span class="addition">+    - --audit-log-maxsize=1</span></span><br><span class="line"><span class="addition">+    - --audit-log-maxbackup=6</span></span><br><span class="line">     image: k8s.gcr.io/kube-apiserver:v1.17.4</span><br><span class="line">     imagePullPolicy: IfNotPresent</span><br><span class="line">     livenessProbe:</span><br><span class="line"><span class="meta">@@ -75,6 +79,12 @@</span> spec:</span><br><span class="line">     - mountPath: /etc/kubernetes/tokens.csv</span><br><span class="line">       name: user-tokens</span><br><span class="line">       readOnly: true</span><br><span class="line"><span class="addition">+    - mountPath: /etc/kubernetes/audit-policy.yaml</span></span><br><span class="line"><span class="addition">+      name: audit</span></span><br><span class="line"><span class="addition">+      readOnly: true</span></span><br><span class="line"><span class="addition">+    - mountPath: /var/log/kubernetes</span></span><br><span class="line"><span class="addition">+      name: audit-log</span></span><br><span class="line"><span class="addition">+      readOnly: false</span></span><br><span class="line">   hostNetwork: true</span><br><span class="line">   priorityClassName: system-cluster-critical</span><br><span class="line">   volumes:</span><br><span class="line"><span class="meta">@@ -106,4 +116,12 @@</span> spec:</span><br><span class="line">       path: /etc/kubernetes/tokens.csv</span><br><span class="line">       type: FileOrCreate</span><br><span class="line">     name: user-tokens</span><br><span class="line"><span class="addition">+  - name: audit</span></span><br><span class="line"><span class="addition">+    hostPath:</span></span><br><span class="line"><span class="addition">+      path: /etc/kubernetes/audit-policy.yaml</span></span><br><span class="line"><span class="addition">+      type: File</span></span><br><span class="line"><span class="addition">+  - name: audit-log</span></span><br><span class="line"><span class="addition">+    hostPath:</span></span><br><span class="line"><span class="addition">+      path: /var/log/kubernetes</span></span><br><span class="line"><span class="addition">+      type: DirectoryOrCreate</span></span><br><span class="line"> status: &#123;&#125;</span><br></pre></td></tr></table></figure><p>Note: 開 <code>/var/log/kubernetes</code> 資料夾而非單一 log 檔案，是為了避免 log rotate 時因權限不足無法正確 rotate</p><p>設定完之後即可在 master node 的 <code>/var/log/kubernetes</code> 看到 access log</p><p>Sample 如下</p><p>command: <code>kubectl apply -f services/tasks/redis-cluster-proxy.yml</code></p><p>log: (Log 檔內會寫成一行，beautify 後如下)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span><span class="string">&quot;Event&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span><span class="string">&quot;audit.k8s.io/v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;Metadata&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;auditID&quot;</span><span class="punctuation">:</span><span class="string">&quot;f09f32f4-a93f-41ee-b2b9-2f3acf3aa963&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;stage&quot;</span><span class="punctuation">:</span><span class="string">&quot;ResponseComplete&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;requestURI&quot;</span><span class="punctuation">:</span><span class="string">&quot;/api/v1/namespaces/alice/services&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;verb&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span><span class="string">&quot;alice@example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;groups&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">         <span class="string">&quot;developer&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="string">&quot;system:authenticated&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;sourceIPs&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;10.300.400.512&quot;</span></span><br><span class="line">   <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;userAgent&quot;</span><span class="punctuation">:</span><span class="string">&quot;kubectl/v1.18.2 (linux/amd64) kubernetes/52c56ce&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;objectRef&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span><span class="string">&quot;services&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span><span class="string">&quot;alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;redis-cluster-proxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;apiVersion&quot;</span><span class="punctuation">:</span><span class="string">&quot;v1&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;responseStatus&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">201</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;requestReceivedTimestamp&quot;</span><span class="punctuation">:</span><span class="string">&quot;2020-10-21T12:27:30.252440Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;stageTimestamp&quot;</span><span class="punctuation">:</span><span class="string">&quot;2020-10-21T12:27:30.272401Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;annotations&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;authorization.k8s.io/decision&quot;</span><span class="punctuation">:</span><span class="string">&quot;allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;authorization.k8s.io/reason&quot;</span><span class="punctuation">:</span><span class="string">&quot;RBAC: allowed by RoleBinding \&quot;super-user-role-binding-alice/alice\&quot; of Role \&quot;super-user\&quot; to User \&quot;alice\&quot;&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="疑難排解"><a href="#疑難排解" class="headerlink" title="疑難排解"></a>疑難排解</h2><h3 id="設定檔位置"><a href="#設定檔位置" class="headerlink" title="設定檔位置"></a>設定檔位置</h3><p>kubelet Static Pod 設定資料夾不一定在 <code>/etc/kubernetes/manifests</code> 位置，須從 <code>kubelet</code> 啟動設定中的 <code>staticPodPath</code> 欄位找到真實位置。</p><h3 id="備份設定檔"><a href="#備份設定檔" class="headerlink" title="備份設定檔"></a>備份設定檔</h3><p>若要備份 static pod 設定資料夾內的任何檔案，不能備份在相同資料夾內，否則會導致 <code>kubelet</code> 行為怪異。</p><h3 id="Reload-K8s-API-server-設定"><a href="#Reload-K8s-API-server-設定" class="headerlink" title="Reload K8s API server 設定"></a>Reload K8s API server 設定</h3><p><code>kubelet</code> service 一般會自動偵測 static pod 資料夾內的檔案異動，並重新佈署該 pod，但偶爾還是會碰上意外..</p><p>發生意外時，以下方式可能可以回到正常狀態</p><ul><li>刪除對應的 pod, e.g. <code>kubectl delete -n kube-system pod kube-apiserver-&lt;cluster name&gt;</code><ul><li>刪除後 <code>kubelet</code> 會馬上重新佈署一個新的 API server</li><li><code>Controlled By:  Node/k8s-master</code>: 意味者此 pod 不是由 deployment 等 K8s object 控制，是直接由 master node 控制</li></ul></li><li>或是重啟 <code>kubelet</code> systemd service</li></ul><h2 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h2><p>此篇筆記紀錄 static token 的身分驗證機制，但若有企業規模的身分驗證需求時，這顯然不是個好方法。</p><p>Kubernetes 也有原生支援 OpenID 的身分驗證方式來應付更進一步的需求，不過這部分就等未來有空再來研究了。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">Authenticating | Kubernetes</a></li><li><a href="https://stackoverflow.com/questions/51666507/how-can-kube-apiserver-be-restarted">kubernetes - How can kube-apiserver be restarted? - Stack Overflow</a></li><li><a href="https://kubernetes.io/docs/tasks/debug-application-cluster/audit/">Auditing | Kubernetes</a></li><li><a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/">Authorization Overview | Kubernetes</a></li><li><a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/">kube-apiserver | Kubernetes</a></li><li><a href="https://github.com/kubernetes/kubernetes/issues/70664">kube-apiserver audit log rotation throwing permission denied · Issue #70664 · kubernetes&#x2F;kubernetes</a></li></ul><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>Request Stages:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> +-----------------+</span><br><span class="line"> | RequestReceived +----+</span><br><span class="line"> +---+-------------+    |</span><br><span class="line">     |                  |</span><br><span class="line">     |       +----------v------+</span><br><span class="line">     |       | ResponseStarted |</span><br><span class="line">     |       +----------+------+</span><br><span class="line">     |                  |             +-------+</span><br><span class="line">     |                  |             | Panic |</span><br><span class="line">+----v------------+     |             +-------+</span><br><span class="line">| ResponseComplete&lt;-----+</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在公司的工作環境中，有些業務需要部屬服務在 Kubernetes (下稱 K8s) 上。
因此在專案早期，部門內的同事自架了 K8s cluster 來開發。&lt;/p&gt;
&lt;p&gt;隨著時間流逝，各個 RD 開始上手 K8s 操作後，每天都有人在對 K8s 的 master 開發</summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="authentication" scheme="https://blog.bitisle.net/tags/authentication/"/>
    
    <category term="kubernetes" scheme="https://blog.bitisle.net/tags/kubernetes/"/>
    
    <category term="log" scheme="https://blog.bitisle.net/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu Server 上自動啟用 SSH Agent</title>
    <link href="https://blog.bitisle.net/2020/04/04/run-ssh-agent-ubuntu-server.html"/>
    <id>https://blog.bitisle.net/2020/04/04/run-ssh-agent-ubuntu-server.html</id>
    <published>2020-04-04T00:00:00.000Z</published>
    <updated>2020-04-04T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>當 我們的 SSH private key 有上 pass phrase 保護時，SSH agent 是個方便的好東西。因為它可以幫我們記住已經解鎖過的 private key。</p><p>可惜的是，Ubuntu server 18.04 的環境預設並不會幫你生一個 SSH agent 出來。</p><p>本文章記錄一點摸索的過程…</p><h2 id="系統自帶的-SSH-agent-systemd-unit"><a href="#系統自帶的-SSH-agent-systemd-unit" class="headerlink" title="系統自帶的 SSH agent systemd unit"></a>系統自帶的 SSH agent systemd unit</h2><blockquote><p>我看別人的 Ubuntu 登入之後就有 SSH agent 可以用啊？</p></blockquote><p>很可惜的是我的環境沒有。研究一陣子之後，發現 SSH agent 應是在有圖形介面的情況下才會被自動帶起。</p><p>在 <code>dpkg --listfiles openssh-client</code> 下可看到幾個重要的檔案</p><ul><li><code>/usr/lib/openssh/launch-agent</code></li><li><code>/usr/lib/systemd/user/ssh-agent.service</code></li><li><code>/usr/lib/systemd/user/graphical-session-pre.target.wants/ssh-agent.service</code></li></ul><p>看了這幾個檔案的內容後可得知</p><ol><li>這是設計給圖形介面的登入 session 使用的 service</li><li>即使想要直接 enable <code>ssh-agent.service</code> 也無法，因為裡面沒有寫任何的 <code>[Install]</code> 參數</li></ol><h2 id="自行撰寫並啟用一個-SSH-agent-服務"><a href="#自行撰寫並啟用一個-SSH-agent-服務" class="headerlink" title="自行撰寫並啟用一個 SSH agent 服務"></a>自行撰寫並啟用一個 SSH agent 服務</h2><p>為了解決沒有 SSH agent 的問題，我們可以自己寫一個 systemd 的 user service，讓系統在發現我登入之後，自動幫我把 SSH agent 拉起來。</p><p>首先編輯 <code>~/.local/share/systemd/user/ssh-agent.service</code> (參考 <code>man systemd.unit</code> 此為預設的 user unit 路徑)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=SSH authentication agent</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/ssh-agent -a %t/ssh-agent.socket -D</span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=default.target</span><br></pre></td></tr></table></figure><p>注意 <code>ssh-agent</code> 的 <code>-D</code> 參數與 <code>Type=simple</code> 設定。</p><p>接著執行 <code>systemctl --user enable ssh-agent.service</code>。這一步會在 <code>.config/systemd/user/default.target.wants</code> 資料夾下創出一個 symbolic link，連回剛剛我們寫的 service file，表示要在登入時自動啟用此 unit。</p><p>接著重新登入該機器，應該就可以看到一個 <code>ssh-agent</code> process 跑起來了。</p><h2 id="設定-SSH-agent-所需的的環境變數"><a href="#設定-SSH-agent-所需的的環境變數" class="headerlink" title="設定 SSH agent 所需的的環境變數"></a>設定 SSH agent 所需的的環境變數</h2><p>雖然 SSH agent 起來了，但此時若下 <code>ssh-add -L</code> 依然會發現無法連上 SSH agent。</p><blockquote><p>Could not open a connection to your authentication agent.</p></blockquote><p>這是因為 <code>ssh</code> 以及 <code>ssh-add</code> 等工具預設都是看 <code>SSH_AUTH_SOCK</code> 環境變數來得知要透過哪個 Unix socket 與 agent 溝通。</p><p>為了處理此問題，我們需在 <code>~/.profile</code> 內加入一行環境變數設定，確保在登入時能自動設定完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export SSH_AUTH_SOCK=&quot;$XDG_RUNTIME_DIR/ssh-agent.socket&quot;</span><br></pre></td></tr></table></figure><p>註: <code>$XDG_RUNTIME_DIR/ssh-agent.socket</code> 與前述 unit file 內的 <code>-a %t/ssh-agent.socket</code> 對應。詳細可參考 <code>man systemd.unit</code></p><p>下次登入重新讀取 profile 之後即可正常使用 SSH agent 囉。 :D</p><h2 id="Alternative-Solution"><a href="#Alternative-Solution" class="headerlink" title="Alternative Solution"></a>Alternative Solution</h2><p>尋找解決方式的過程中，注意到了一些解法，透過純 shell script 的方式處理重複登入的問題</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SSH_ENV=<span class="string">&quot;<span class="variable">$HOME</span>/.ssh/environment&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> start_agent &#123;</span><br><span class="line">    /usr/bin/ssh-agent | sed <span class="string">&#x27;s/^echo/#echo/&#x27;</span> &gt; <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">chmod</span> 600 <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span></span><br><span class="line">    . <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span> &gt; /dev/null</span><br><span class="line">    /usr/bin/ssh-add;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    . <span class="string">&quot;<span class="variable">$&#123;SSH_ENV&#125;</span>&quot;</span> &gt; /dev/null</span><br><span class="line">    ps -ef | grep <span class="variable">$&#123;SSH_AGENT_PID&#125;</span> | grep ssh-agent$ &gt; /dev/null || &#123;</span><br><span class="line">        start_agent;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    start_agent;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>Ref: <a href="https://stackoverflow.com/questions/18880024/start-ssh-agent-on-login/18915067#18915067">https://stackoverflow.com/questions/18880024/start-ssh-agent-on-login/18915067#18915067</a></li></ul><p>若不考慮 race condition，該作法其實也很值得參考。可以在沒有 systemd 輔助的的生態系底下使用。</p><h2 id="雜談"><a href="#雜談" class="headerlink" title="雜談"></a>雜談</h2><p>看 systemd 的文件時，發現 systemd 的 user mode 會非常遵守 <code>XDG_</code> 系列的環境變數。不過因為我們是在 Ubuntu server edition 下，所以大部分都略過不看。 :D</p><p>但 <code>XDG_RUNTIME_DIR</code> 這個變數除外，此變數雖然也是由<a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG Base Directory Specification</a>所規範，但在一般 Linux 發行版，此變數是由 <code>pam_systemd</code> 直接維護的。所以即使是在 server環境也會有此變數存在。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html">systemd.unit</a></li><li><a href="https://askubuntu.com/questions/872792/what-is-xdg-runtime-dir">command line - What is XDG_RUNTIME_DIR? - Ask Ubuntu</a></li><li><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG Base Directory Specification</a></li><li><a href="https://gist.github.com/magnetikonline/b6255da90606fe9c5c25d3333c98c90d">Add user ssh-agent as daemon to Ubuntu 18.04LTS server.</a></li><li><a href="https://stackoverflow.com/questions/18880024/start-ssh-agent-on-login">git - Start ssh-agent on login - Stack Overflow</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;當 我們的 SSH private key 有上 pass phrase 保護時，
SSH agent 是個方便的好東西。因為它可以幫我們記住已經解鎖過的 private key。&lt;/p&gt;
&lt;p&gt;可惜的是，Ubuntu server 18.04 的環境預設並不會幫你生一個 </summary>
      
    
    
    
    <category term="notes" scheme="https://blog.bitisle.net/categories/notes/"/>
    
    
    <category term="ssh" scheme="https://blog.bitisle.net/tags/ssh/"/>
    
    <category term="systemd" scheme="https://blog.bitisle.net/tags/systemd/"/>
    
    <category term="authentication" scheme="https://blog.bitisle.net/tags/authentication/"/>
    
  </entry>
  
</feed>
